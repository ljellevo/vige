// Generated by Haxe 4.0.5
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ContainerTest = function() {
};
ContainerTest.__name__ = "ContainerTest";
ContainerTest.prototype = {
	beforeClass: function() {
	}
	,afterClass: function() {
	}
	,setup: function() {
		com_externs_JSDomSetup.init();
		this.container = new com_vige_components_Container({ child : new com_vige_components_Text("tekst")});
	}
	,tearDown: function() {
	}
	,testExample: function() {
		massive_munit_Assert.isTrue(true,null,{ fileName : "tests/ContainerTest.hx", lineNumber : 42, className : "ContainerTest", methodName : "testExample"});
		var node = this.container.render();
		massive_munit_Assert.isNotNull(node,null,{ fileName : "tests/ContainerTest.hx", lineNumber : 44, className : "ContainerTest", methodName : "testExample"});
		massive_munit_Assert.isTrue(node.hasChildNodes(),null,{ fileName : "tests/ContainerTest.hx", lineNumber : 45, className : "ContainerTest", methodName : "testExample"});
		massive_munit_Assert.areEqual(node.firstChild.nodeName.toLowerCase(),"p",null,{ fileName : "tests/ContainerTest.hx", lineNumber : 46, className : "ContainerTest", methodName : "testExample"});
		massive_munit_Assert.isFalse(node.firstChild.hasChildNodes(),null,{ fileName : "tests/ContainerTest.hx", lineNumber : 47, className : "ContainerTest", methodName : "testExample"});
		massive_munit_Assert.areEqual(node.childNodes.length,1,null,{ fileName : "tests/ContainerTest.hx", lineNumber : 48, className : "ContainerTest", methodName : "testExample"});
	}
	,testAsyncExample: function(asyncFactory) {
		massive_munit_Assert.isTrue(true,null,{ fileName : "tests/ContainerTest.hx", lineNumber : 64, className : "ContainerTest", methodName : "testAsyncExample"});
	}
	,onTestAsyncExampleComplete: function() {
		massive_munit_Assert.isTrue(true,null,{ fileName : "tests/ContainerTest.hx", lineNumber : 69, className : "ContainerTest", methodName : "onTestAsyncExampleComplete"});
	}
	,testSinglePlatform: function() {
		massive_munit_Assert.isTrue(true,null,{ fileName : "tests/ContainerTest.hx", lineNumber : 75, className : "ContainerTest", methodName : "testSinglePlatform"});
	}
	,__class__: ContainerTest
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.filter = function(it,f) {
	var _g = [];
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			_g.push(x1);
		}
	}
	return _g;
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s1 = _g_s;
		var index = _g_offset++;
		var c = s1.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
var TestMain = function() {
	var suites = [];
	suites.push(TestSuite);
	var client = new massive_munit_client_RichPrintClient();
	var httpClient = new massive_munit_client_HTTPClient(new massive_munit_client_SummaryReportClient());
	var runner = new massive_munit_TestRunner(client);
	runner.addResultClient(httpClient);
	runner.completionHandler = $bind(this,this.completionHandler);
	runner.run(suites);
};
TestMain.__name__ = "TestMain";
TestMain.main = function() {
	new TestMain();
};
TestMain.prototype = {
	completionHandler: function(successful) {
		try {
			eval("testResult(" + (successful == null ? "null" : "" + successful) + ");");
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		}
	}
	,__class__: TestMain
};
var massive_munit_TestSuite = function() {
	this.index = 0;
	this.tests = [];
};
massive_munit_TestSuite.__name__ = "massive.munit.TestSuite";
massive_munit_TestSuite.prototype = {
	add: function(test) {
		this.tests.push(test);
		this.sortTests();
	}
	,hasNext: function() {
		return this.index < this.tests.length;
	}
	,next: function() {
		if(this.hasNext()) {
			return this.tests[this.index++];
		} else {
			return null;
		}
	}
	,repeat: function() {
		if(this.index > 0) {
			this.index--;
		}
	}
	,sortTests: function() {
		this.tests.sort($bind(this,this.sortByName));
	}
	,sortByName: function(x,y) {
		var xName = x.__name__;
		var yName = y.__name__;
		if(xName == yName) {
			return 0;
		}
		if(xName > yName) {
			return 1;
		}
		return -1;
	}
	,__class__: massive_munit_TestSuite
};
var TestSuite = function() {
	massive_munit_TestSuite.call(this);
	this.add(ContainerTest);
};
TestSuite.__name__ = "TestSuite";
TestSuite.__super__ = massive_munit_TestSuite;
TestSuite.prototype = $extend(massive_munit_TestSuite.prototype,{
	__class__: TestSuite
});
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
		return false;
	}
	return true;
};
var _$Xml_XmlType_$Impl_$ = {};
_$Xml_XmlType_$Impl_$.__name__ = "_Xml.XmlType_Impl_";
_$Xml_XmlType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.attributeMap.keys();
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var com_akifox_asynchttp__$AsyncHttp_HttpTransferMode = $hxEnums["com.akifox.asynchttp._AsyncHttp.HttpTransferMode"] = { __ename__ : true, __constructs__ : ["UNDEFINED","FIXED","CHUNKED","NO_CONTENT"]
	,UNDEFINED: {_hx_index:0,__enum__:"com.akifox.asynchttp._AsyncHttp.HttpTransferMode",toString:$estr}
	,FIXED: {_hx_index:1,__enum__:"com.akifox.asynchttp._AsyncHttp.HttpTransferMode",toString:$estr}
	,CHUNKED: {_hx_index:2,__enum__:"com.akifox.asynchttp._AsyncHttp.HttpTransferMode",toString:$estr}
	,NO_CONTENT: {_hx_index:3,__enum__:"com.akifox.asynchttp._AsyncHttp.HttpTransferMode",toString:$estr}
};
var com_akifox_asynchttp_ContentKind = $hxEnums["com.akifox.asynchttp.ContentKind"] = { __ename__ : true, __constructs__ : ["XML","JSON","IMAGE","TEXT","BYTES"]
	,XML: {_hx_index:0,__enum__:"com.akifox.asynchttp.ContentKind",toString:$estr}
	,JSON: {_hx_index:1,__enum__:"com.akifox.asynchttp.ContentKind",toString:$estr}
	,IMAGE: {_hx_index:2,__enum__:"com.akifox.asynchttp.ContentKind",toString:$estr}
	,TEXT: {_hx_index:3,__enum__:"com.akifox.asynchttp.ContentKind",toString:$estr}
	,BYTES: {_hx_index:4,__enum__:"com.akifox.asynchttp.ContentKind",toString:$estr}
};
var com_akifox_asynchttp_AsyncHttp = function() {
};
com_akifox_asynchttp_AsyncHttp.__name__ = "com.akifox.asynchttp.AsyncHttp";
com_akifox_asynchttp_AsyncHttp.log = function(message,fingerprint) {
	if(fingerprint == null) {
		fingerprint = "";
	}
	if(com_akifox_asynchttp_AsyncHttp.logEnabled) {
		haxe_Log.trace("" + fingerprint + " INFO:" + message,{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 186, className : "com.akifox.asynchttp.AsyncHttp", methodName : "log"});
	}
	return message;
};
com_akifox_asynchttp_AsyncHttp.error = function(message,fingerprint,throwError) {
	if(throwError == null) {
		throwError = false;
	}
	if(fingerprint == null) {
		fingerprint = "";
	}
	if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
		haxe_Log.trace("" + fingerprint + " ERROR:" + message,{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
	}
	if(throwError) {
		throw new js__$Boot_HaxeError("AsyncHttp Error:" + message);
	}
	return message;
};
com_akifox_asynchttp_AsyncHttp.determineContentKind = function(contentType) {
	var contentKind = com_akifox_asynchttp_ContentKind.BYTES;
	var _g = 0;
	var _g1 = com_akifox_asynchttp_AsyncHttp.CONTENT_KIND_MATCHES;
	while(_g < _g1.length) {
		var el = _g1[_g];
		++_g;
		if(el.regex.match(contentType)) {
			contentKind = el.kind;
			break;
		}
	}
	return contentKind;
};
com_akifox_asynchttp_AsyncHttp.determineIsBinary = function(contentKind) {
	if(contentKind == com_akifox_asynchttp_ContentKind.BYTES || contentKind == com_akifox_asynchttp_ContentKind.IMAGE) {
		return true;
	}
	return false;
};
com_akifox_asynchttp_AsyncHttp.prototype = {
	send: function(request) {
		if(request.get_finalised()) {
			var message = "Unable to send the request:it was already sent before\n" + "To send it again you have to clone it before.";
			var fingerprint = request.get_fingerprint();
			var throwError = true;
			if(throwError == null) {
				throwError = false;
			}
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + message,{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			if(throwError) {
				throw new js__$Boot_HaxeError("AsyncHttp Error:" + message);
			}
			return;
		}
		request.finalise();
		this.httpViaHaxeHttp(request);
	}
	,callback: function(request,time,url,headers,status,content,error) {
		if(error == null) {
			error = "";
		}
		headers.finalise();
		var response = new com_akifox_asynchttp_HttpResponse(request,time,url,headers,status,content,error);
		if(request.get_callbackError() != null && !response.get_isOK()) {
			(request.get_callbackError())(response);
		} else if(request.get_callback() != null) {
			(request.get_callback())(response);
		}
		response = null;
	}
	,callbackProgress: function(request,loaded,total) {
		if(request.get_callbackProgress() != null) {
			(request.get_callbackProgress())(loaded,total);
		}
	}
	,httpViaHaxeHttp: function(request) {
		var _gthis = this;
		if(request == null) {
			return;
		}
		var start = Date.now() / 1000;
		var url = request.get_url();
		var status = 0;
		var headers = new com_akifox_asynchttp_HttpHeaders();
		var content = null;
		var r = new haxe_http_HttpNodeJs(url.toString());
		if(request.get_content() != null) {
			r.setPostData(Std.string(request.get_content()));
		}
		var httpstatusDone = false;
		r.onError = function(msg) {
			var message = "Request failed -> " + msg;
			var fingerprint = request.get_fingerprint();
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + message,{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			var errorMessage = message;
			var time = _gthis.elapsedTime(start);
			var error = errorMessage;
			if(error == null) {
				error = "";
			}
			headers.finalise();
			var response = new com_akifox_asynchttp_HttpResponse(request,time,url,headers,status,content,error);
			if(request.get_callbackError() != null && !response.get_isOK()) {
				(request.get_callbackError())(response);
			} else if(request.get_callback() != null) {
				(request.get_callback())(response);
			}
			response = null;
		};
		r.onData = function(data) {
			if(!httpstatusDone) {
				status = 200;
			}
			var time1 = _gthis.elapsedTime(start);
			content = haxe_io_Bytes.ofString(data);
			var message1 = "Response Complete " + status + " (" + time1 + " s)\n> " + request.get_method() + " " + Std.string(request.get_url());
			var fingerprint1 = request.get_fingerprint();
			if(fingerprint1 == null) {
				fingerprint1 = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logEnabled) {
				haxe_Log.trace("" + fingerprint1 + " INFO:" + message1,{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 186, className : "com.akifox.asynchttp.AsyncHttp", methodName : "log"});
			}
			headers.finalise();
			var response1 = new com_akifox_asynchttp_HttpResponse(request,time1,url,headers,status,content,"");
			if(request.get_callbackError() != null && !response1.get_isOK()) {
				(request.get_callbackError())(response1);
			} else if(request.get_callback() != null) {
				(request.get_callback())(response1);
			}
			response1 = null;
		};
		r.onStatus = function(http_status) {
			status = http_status;
			var message2 = "Response HTTP Status " + status;
			var fingerprint2 = request.get_fingerprint();
			if(fingerprint2 == null) {
				fingerprint2 = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logEnabled) {
				haxe_Log.trace("" + fingerprint2 + " INFO:" + message2,{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 186, className : "com.akifox.asynchttp.AsyncHttp", methodName : "log"});
			}
			httpstatusDone = true;
		};
		r.request(request.get_content() != null);
	}
	,elapsedTime: function(start) {
		return ((Date.now() / 1000 - start) * 1000 | 0) / 1000;
	}
	,randomUID: function(size) {
		if(size == null) {
			size = 32;
		}
		var nchars = com_akifox_asynchttp_AsyncHttp.UID_CHARS.length;
		var uid_b = "";
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			var c = HxOverrides.cca(com_akifox_asynchttp_AsyncHttp.UID_CHARS,Std.random(nchars));
			uid_b += String.fromCodePoint(c);
		}
		return uid_b;
	}
	,__class__: com_akifox_asynchttp_AsyncHttp
};
var com_akifox_asynchttp_HttpHeaders = function(headers) {
	this._finalised = false;
	this._headers = new haxe_ds_StringMap();
	if(headers == null) {
		return;
	}
	var c = js_Boot.getClass(headers);
	switch(c.__name__) {
	case "HttpHeaders":case "com.akifox.asynchttp.HttpHeaders":
		var key = (js_Boot.__cast(headers , com_akifox_asynchttp_HttpHeaders)).keys();
		while(key.hasNext()) {
			var key1 = key.next();
			this.add(key1,(js_Boot.__cast(headers , com_akifox_asynchttp_HttpHeaders)).get(key1));
		}
		break;
	default:
		var _g = 0;
		var _g1 = Reflect.fields(headers);
		while(_g < _g1.length) {
			var key2 = _g1[_g];
			++_g;
			var value = Reflect.getProperty(headers,key2);
			this.add(key2,value);
		}
	}
};
com_akifox_asynchttp_HttpHeaders.__name__ = "com.akifox.asynchttp.HttpHeaders";
com_akifox_asynchttp_HttpHeaders.validateRequest = function(header) {
	if(header == null) {
		return false;
	}
	if(com_akifox_asynchttp_HttpHeaders.FORBIDDEN_ON_REQUEST.indexOf(header.toLowerCase()) >= 0) {
		return false;
	}
	return true;
};
com_akifox_asynchttp_HttpHeaders.prototype = {
	get_finalised: function() {
		return this._finalised;
	}
	,toString: function() {
		return "[HttpHeaders <" + this._headers.toString() + ">]";
	}
	,clone: function() {
		return new com_akifox_asynchttp_HttpHeaders(this);
	}
	,finalise: function() {
		this._finalised = true;
	}
	,keys: function() {
		return this._headers.keys();
	}
	,exists: function(key) {
		var _this = this._headers;
		if(__map_reserved[key] != null) {
			return _this.existsReserved(key);
		} else {
			return _this.h.hasOwnProperty(key);
		}
	}
	,get: function(key) {
		var _this = this._headers;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this._headers;
			if(__map_reserved[key] != null) {
				return _this1.getReserved(key);
			} else {
				return _this1.h[key];
			}
		}
		return "";
	}
	,add: function(key,value) {
		if(this._finalised) {
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace(" ERROR:" + "HttpHeaders.add() -> Can't add an header. This HttpHeaders object is immutable",{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			return this;
		}
		var _this = this._headers;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
		return this;
	}
	,remove: function(key) {
		if(key == null) {
			return this;
		}
		if(this._finalised) {
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace(" ERROR:" + "HttpHeaders.remove() -> Can't remove an header. This HttpHeaders object is immutable",{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			return this;
		}
		this._headers.remove(key);
		return this;
	}
	,__class__: com_akifox_asynchttp_HttpHeaders
	,__properties__: {get_finalised:"get_finalised"}
};
var com_akifox_asynchttp_HttpMethod = function() { };
com_akifox_asynchttp_HttpMethod.__name__ = "com.akifox.asynchttp.HttpMethod";
com_akifox_asynchttp_HttpMethod.validate = function(value) {
	if(value == null) {
		value = "GET";
	}
	return value.toUpperCase();
};
var com_akifox_asynchttp_HttpRequest = function(options) {
	this._callbackProgress = null;
	this._callbackError = null;
	this._callback = null;
	this._contentIsBinary = false;
	this._contentType = "application/x-www-form-urlencoded";
	this._content = null;
	this._method = "GET";
	this._url = null;
	this._http11 = true;
	this._async = true;
	this._timeout = 10;
	this._headers = new com_akifox_asynchttp_HttpHeaders();
	this._finalised = false;
	this._fingerprint = new com_akifox_asynchttp_AsyncHttp().randomUID(8);
	if(options != null) {
		if(options.async != null) {
			this.set_async(options.async);
		}
		if(options.http11 != null) {
			this.set_http11(options.http11);
		}
		if(options.url != null) {
			this.set_url(options.url);
		}
		if(options.callback != null) {
			this.set_callback(options.callback);
		}
		if(options.callbackProgress != null) {
			this.set_callbackProgress(options.callbackProgress);
		}
		if(options.callbackError != null) {
			this.set_callbackError(options.callbackError);
		}
		if(options.headers != null) {
			this._headers = options.headers.clone();
		}
		if(options.timeout != null) {
			this.set_timeout(options.timeout);
		}
		if(options.method != null) {
			this.set_method(options.method);
		}
		if(options.content != null) {
			this.set_content(options.content);
		}
		if(options.contentType != null) {
			this.set_contentType(options.contentType);
		}
		if(options.contentIsBinary != null) {
			this.set_contentIsBinary(options.contentIsBinary);
		}
	}
};
com_akifox_asynchttp_HttpRequest.__name__ = "com.akifox.asynchttp.HttpRequest";
com_akifox_asynchttp_HttpRequest.prototype = {
	get_finalised: function() {
		return this._finalised;
	}
	,toString: function() {
		return "[HttpRequest <" + this._fingerprint + "> (" + this._method + " " + Std.string(this._url) + ")]";
	}
	,clone: function() {
		return new com_akifox_asynchttp_HttpRequest({ async : this._async, http11 : this._http11, url : this._url, callback : this._callback, callbackProgress : this._callbackProgress, headers : this._headers, timeout : this._timeout, method : this._method, content : this._content, contentType : this._contentType, contentIsBinary : this._contentIsBinary});
	}
	,finalise: function() {
		this._headers.finalise();
		this._finalised = true;
	}
	,send: function() {
		new com_akifox_asynchttp_AsyncHttp().send(this);
	}
	,get_fingerprint: function() {
		return this._fingerprint;
	}
	,get_headers: function() {
		return this._headers;
	}
	,set_headers: function(value) {
		if(this._finalised) {
			var fingerprint = this._fingerprint;
			var throwError = true;
			if(throwError == null) {
				throwError = false;
			}
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + "HttpRequest.headers -> Can't modify a property when the instance is already sent",{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			if(throwError) {
				throw new js__$Boot_HaxeError("AsyncHttp Error:" + "HttpRequest.headers -> Can't modify a property when the instance is already sent");
			}
			return this._headers;
		}
		return this._headers = value;
	}
	,get_timeout: function() {
		return this._timeout;
	}
	,set_timeout: function(value) {
		if(this._finalised) {
			var fingerprint = this._fingerprint;
			var throwError = true;
			if(throwError == null) {
				throwError = false;
			}
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + "HttpRequest.timeout -> Can't modify a property when the instance is already sent",{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			if(throwError) {
				throw new js__$Boot_HaxeError("AsyncHttp Error:" + "HttpRequest.timeout -> Can't modify a property when the instance is already sent");
			}
			return this._timeout;
		}
		if(value < 1) {
			value = 1;
		}
		return this._timeout = value;
	}
	,get_async: function() {
		return this._async;
	}
	,set_async: function(value) {
		if(this._finalised) {
			var fingerprint = this._fingerprint;
			var throwError = true;
			if(throwError == null) {
				throwError = false;
			}
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + "HttpRequest.async -> Can't modify a property when the instance is already sent",{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			if(throwError) {
				throw new js__$Boot_HaxeError("AsyncHttp Error:" + "HttpRequest.async -> Can't modify a property when the instance is already sent");
			}
			return this._async;
		}
		return this._async = value;
	}
	,get_http11: function() {
		return this._http11;
	}
	,set_http11: function(value) {
		if(this._finalised) {
			var fingerprint = this._fingerprint;
			var throwError = true;
			if(throwError == null) {
				throwError = false;
			}
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + "HttpRequest.http11 -> Can't modify a property when the instance is already sent",{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			if(throwError) {
				throw new js__$Boot_HaxeError("AsyncHttp Error:" + "HttpRequest.http11 -> Can't modify a property when the instance is already sent");
			}
			return this._http11;
		}
		return this._http11 = value;
	}
	,get_url: function() {
		return this._url;
	}
	,set_url: function(value) {
		var v = null;
		var c = js_Boot.getClass(value);
		switch(c.__name__) {
		case "String":
			v = new com_akifox_asynchttp_URL(value);
			break;
		case "URL":case "com.akifox.asynchttp.URL":
			v = value.clone();
			break;
		default:
			var fingerprint = this._fingerprint;
			var throwError = true;
			if(throwError == null) {
				throwError = false;
			}
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + "HttpRequest.url -> Please specify an URL Object or a String",{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			if(throwError) {
				throw new js__$Boot_HaxeError("AsyncHttp Error:" + "HttpRequest.url -> Please specify an URL Object or a String");
			}
			return this._url;
		}
		if(this._finalised) {
			var fingerprint1 = this._fingerprint;
			var throwError1 = true;
			if(throwError1 == null) {
				throwError1 = false;
			}
			if(fingerprint1 == null) {
				fingerprint1 = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint1 + " ERROR:" + "HttpRequest.url -> Can't modify a property when the instance is already sent",{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			if(throwError1) {
				throw new js__$Boot_HaxeError("AsyncHttp Error:" + "HttpRequest.url -> Can't modify a property when the instance is already sent");
			}
			return this._url;
		}
		return this._url = v;
	}
	,get_method: function() {
		return this._method;
	}
	,set_method: function(value) {
		if(this._finalised) {
			var fingerprint = this._fingerprint;
			var throwError = true;
			if(throwError == null) {
				throwError = false;
			}
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + "HttpRequest.method -> Can't modify a property when the instance is already sent",{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			if(throwError) {
				throw new js__$Boot_HaxeError("AsyncHttp Error:" + "HttpRequest.method -> Can't modify a property when the instance is already sent");
			}
			return this._method;
		}
		value = com_akifox_asynchttp_HttpMethod.validate(value);
		return this._method = value;
	}
	,get_content: function() {
		return this._content;
	}
	,set_content: function(value) {
		if(this._finalised) {
			var fingerprint = this._fingerprint;
			var throwError = true;
			if(throwError == null) {
				throwError = false;
			}
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + "HttpRequest.content -> Can't modify a property when the instance is already sent",{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			if(throwError) {
				throw new js__$Boot_HaxeError("AsyncHttp Error:" + "HttpRequest.content -> Can't modify a property when the instance is already sent");
			}
			return this._content;
		}
		return this._content = value;
	}
	,get_contentType: function() {
		return this._contentType;
	}
	,set_contentType: function(value) {
		if(this._finalised) {
			var fingerprint = this._fingerprint;
			var throwError = true;
			if(throwError == null) {
				throwError = false;
			}
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + "HttpRequest.contentType -> Can't modify a property when the instance is already sent",{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			if(throwError) {
				throw new js__$Boot_HaxeError("AsyncHttp Error:" + "HttpRequest.contentType -> Can't modify a property when the instance is already sent");
			}
			return this._contentType;
		}
		if(value == null) {
			value = "application/x-www-form-urlencoded";
		}
		this._contentIsBinary = com_akifox_asynchttp_AsyncHttp.determineIsBinary(com_akifox_asynchttp_AsyncHttp.determineContentKind(value));
		return this._contentType = value;
	}
	,get_contentIsBinary: function() {
		return this._contentIsBinary;
	}
	,set_contentIsBinary: function(value) {
		if(this._finalised) {
			var fingerprint = this._fingerprint;
			var throwError = true;
			if(throwError == null) {
				throwError = false;
			}
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + "HttpRequest.contentIsBinary -> Can't modify a property when the instance is already sent",{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			if(throwError) {
				throw new js__$Boot_HaxeError("AsyncHttp Error:" + "HttpRequest.contentIsBinary -> Can't modify a property when the instance is already sent");
			}
			return this._contentIsBinary;
		}
		return this._contentIsBinary = value;
	}
	,get_callback: function() {
		return this._callback;
	}
	,set_callback: function(value) {
		if(this._finalised) {
			var fingerprint = this._fingerprint;
			var throwError = true;
			if(throwError == null) {
				throwError = false;
			}
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + "HttpRequest.callback -> Can't modify a property when the instance is already sent",{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			if(throwError) {
				throw new js__$Boot_HaxeError("AsyncHttp Error:" + "HttpRequest.callback -> Can't modify a property when the instance is already sent");
			}
			return this._callback;
		}
		return this._callback = value;
	}
	,get_callbackError: function() {
		return this._callbackError;
	}
	,set_callbackError: function(value) {
		if(this._finalised) {
			var fingerprint = this._fingerprint;
			var throwError = true;
			if(throwError == null) {
				throwError = false;
			}
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + "HttpRequest.callbackError -> Can't modify a property when the instance is already sent",{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			if(throwError) {
				throw new js__$Boot_HaxeError("AsyncHttp Error:" + "HttpRequest.callbackError -> Can't modify a property when the instance is already sent");
			}
			return this._callbackError;
		}
		return this._callbackError = value;
	}
	,get_callbackProgress: function() {
		return this._callbackProgress;
	}
	,set_callbackProgress: function(value) {
		if(this._finalised) {
			var fingerprint = this._fingerprint;
			var throwError = true;
			if(throwError == null) {
				throwError = false;
			}
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + "HttpRequest.callbackProgress -> Can't modify a property when the instance is already sent",{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
			if(throwError) {
				throw new js__$Boot_HaxeError("AsyncHttp Error:" + "HttpRequest.callbackProgress -> Can't modify a property when the instance is already sent");
			}
			return this._callbackProgress;
		}
		return this._callbackProgress = value;
	}
	,__class__: com_akifox_asynchttp_HttpRequest
	,__properties__: {set_callbackProgress:"set_callbackProgress",get_callbackProgress:"get_callbackProgress",set_callbackError:"set_callbackError",get_callbackError:"get_callbackError",set_callback:"set_callback",get_callback:"get_callback",set_contentIsBinary:"set_contentIsBinary",get_contentIsBinary:"get_contentIsBinary",set_contentType:"set_contentType",get_contentType:"get_contentType",set_content:"set_content",get_content:"get_content",set_method:"set_method",get_method:"get_method",set_url:"set_url",get_url:"get_url",set_http11:"set_http11",get_http11:"get_http11",set_async:"set_async",get_async:"get_async",set_timeout:"set_timeout",get_timeout:"get_timeout",get_headers:"get_headers",get_fingerprint:"get_fingerprint",get_finalised:"get_finalised"}
};
var com_akifox_asynchttp_HttpResponse = function(request,time,url,headers,status,content,error) {
	this._error = null;
	this._filename = null;
	this._request = request;
	this._time = time;
	this._url = url;
	this._status = status;
	this._isOK = this._status >= 200 && this._status < 400;
	this._headers = headers;
	this._error = error;
	if(!this._isOK && this._status != 0) {
		this._error = com_akifox_asynchttp_HttpResponse._httpStatus.h[this._status];
	}
	if(this._headers.exists("content-type")) {
		this._contentType = this._headers.get("content-type");
	} else {
		this._contentType = "text/plain";
	}
	this._contentKind = com_akifox_asynchttp_AsyncHttp.determineContentKind(this._contentType);
	this._contentIsBinary = com_akifox_asynchttp_AsyncHttp.determineIsBinary(this._contentKind);
	this._contentRaw = content;
	if(!this._contentIsBinary) {
		this._content = this.toText();
	} else {
		this._content = this._contentRaw;
	}
	this._contentLength = 0;
	if(this._headers.exists("content-length")) {
		this._contentLength = Std.parseInt(this._headers.get("content-length"));
	} else if(content != null) {
		this._contentLength = this._content.length;
	}
};
com_akifox_asynchttp_HttpResponse.__name__ = "com.akifox.asynchttp.HttpResponse";
com_akifox_asynchttp_HttpResponse.prototype = {
	toString: function() {
		return "[HttpResponse <" + this._request.get_fingerprint() + "> (isOK=" + Std.string(this._isOK) + ", status=" + this._status + ", length=" + this._contentLength + " bytes in " + this._time + " sec), error=" + this._error + "]";
	}
	,get_isBinary: function() {
		return this._contentIsBinary;
	}
	,get_isText: function() {
		return !this._contentIsBinary;
	}
	,get_isXml: function() {
		return this._contentKind == com_akifox_asynchttp_ContentKind.XML;
	}
	,get_isJson: function() {
		return this._contentKind == com_akifox_asynchttp_ContentKind.JSON;
	}
	,get_isImage: function() {
		return this._contentKind == com_akifox_asynchttp_ContentKind.IMAGE;
	}
	,toXml: function() {
		var _contentXml = null;
		try {
			_contentXml = Xml.parse(this.toText());
		} catch( msg ) {
			haxe_CallStack.lastException = msg;
			var message = "HttpResponse.toXml() -> " + Std.string(((msg) instanceof js__$Boot_HaxeError) ? msg.val : msg);
			var fingerprint = this._request.get_fingerprint();
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + message,{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
		}
		return _contentXml;
	}
	,toJson: function() {
		var _contentJson = null;
		try {
			_contentJson = JSON.parse(this.toText());
		} catch( msg ) {
			haxe_CallStack.lastException = msg;
			var message = "HttpResponse.toJson() -> " + Std.string(((msg) instanceof js__$Boot_HaxeError) ? msg.val : msg);
			var fingerprint = this._request.get_fingerprint();
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + message,{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
		}
		return _contentJson;
	}
	,toText: function() {
		var _contentText = null;
		try {
			_contentText = Std.string(this._contentRaw);
		} catch( msg ) {
			haxe_CallStack.lastException = msg;
			var message = "HttpResponse.toText() -> " + Std.string(((msg) instanceof js__$Boot_HaxeError) ? msg.val : msg);
			var fingerprint = this._request.get_fingerprint();
			if(fingerprint == null) {
				fingerprint = "";
			}
			if(com_akifox_asynchttp_AsyncHttp.logErrorEnabled) {
				haxe_Log.trace("" + fingerprint + " ERROR:" + message,{ fileName : "com/akifox/asynchttp/AsyncHttp.hx", lineNumber : 195, className : "com.akifox.asynchttp.AsyncHttp", methodName : "error"});
			}
		}
		return _contentText;
	}
	,get_request: function() {
		return this._request;
	}
	,get_fingerprint: function() {
		return this._request.get_fingerprint();
	}
	,get_url: function() {
		return this._url;
	}
	,get_urlString: function() {
		return this._url.toString();
	}
	,get_headers: function() {
		return this._headers;
	}
	,get_status: function() {
		return this._status;
	}
	,get_content: function() {
		return this._content;
	}
	,get_contentRaw: function() {
		return this._contentRaw;
	}
	,get_contentType: function() {
		return this._contentType;
	}
	,get_contentIsBinary: function() {
		return this._contentIsBinary;
	}
	,get_contentLength: function() {
		return this._contentLength;
	}
	,get_time: function() {
		return this._time;
	}
	,get_filename: function() {
		if(this._filename == null) {
			var filename = "";
			var rx = new EReg("([^?/]*)($|\\?.*)","");
			if(rx.match(this._url.toString())) {
				filename = rx.matched(1);
			}
			if(filename == "") {
				filename = "unknown";
			}
			this._filename = filename;
		}
		return this._filename;
	}
	,get_isOK: function() {
		return this._isOK;
	}
	,get_error: function() {
		return this._error;
	}
	,__class__: com_akifox_asynchttp_HttpResponse
	,__properties__: {get_error:"get_error",get_isOK:"get_isOK",get_filename:"get_filename",get_time:"get_time",get_contentLength:"get_contentLength",get_contentIsBinary:"get_contentIsBinary",get_contentType:"get_contentType",get_contentRaw:"get_contentRaw",get_content:"get_content",get_status:"get_status",get_headers:"get_headers",get_urlString:"get_urlString",get_url:"get_url",get_fingerprint:"get_fingerprint",get_request:"get_request",get_isImage:"get_isImage",get_isJson:"get_isJson",get_isXml:"get_isXml",get_isText:"get_isText",get_isBinary:"get_isBinary"}
};
var com_akifox_asynchttp_URL = function(urlString) {
	this._querystring = "";
	this._resource = "";
	this._port = "";
	this._host = "";
	this._protocol = "";
	this.regexURL = new EReg("^([a-z]+:|)(//[^/\\?:]+|)(:\\d+|)([^\\?]*|)(\\?.*|)","i");
	this._urlString = urlString;
	if(this.regexURL.match(urlString)) {
		this._protocol = HxOverrides.substr(this.regexURL.matched(1),0,-1);
		if(this._protocol == null) {
			this._protocol = "";
		}
		this._host = HxOverrides.substr(this.regexURL.matched(2),2,null);
		if(this._host == null) {
			this._host = "";
		}
		this._port = this.regexURL.matched(3);
		if(this._port == null) {
			this._port = "";
		}
		this._resource = this.regexURL.matched(4);
		if(this._resource == null) {
			this._resource = "";
		}
		this._querystring = this.regexURL.matched(5);
		if(this._querystring == null) {
			this._querystring = "";
		}
	}
};
com_akifox_asynchttp_URL.__name__ = "com.akifox.asynchttp.URL";
com_akifox_asynchttp_URL.prototype = {
	toString: function() {
		return "" + this.get_protocol() + this._host + this._port + this._resource + this._querystring;
	}
	,clone: function() {
		return new com_akifox_asynchttp_URL(this.toString());
	}
	,merge: function(url) {
		if(this._protocol == "") {
			this._protocol = url._protocol;
		}
		if(this._host == "") {
			this._host = url._host;
		}
		if(this._port == "") {
			this._port = url._port;
		}
		this._resource = this.mergeResources(this._resource,url._resource);
		return this;
	}
	,mergeResources: function(resNew,resOriginal) {
		if(resOriginal == null) {
			resOriginal = "";
		}
		var levels;
		if(HxOverrides.substr(resNew,0,1) == "/") {
			levels = resNew.split("/");
		} else {
			levels = resOriginal.split("/");
			levels.pop();
			levels = levels.concat(resNew.split("/"));
		}
		var finish = false;
		while(true) {
			var loop = levels.length;
			var i = 0;
			while(true) {
				if(levels[i] == "..") {
					if(i > 0) {
						levels.splice(i - 1,2);
					} else {
						levels.shift();
					}
					break;
				}
				++i;
				if(i >= loop) {
					finish = true;
					break;
				}
			}
			if(!(!finish)) {
				break;
			}
		}
		var result = levels.join("/");
		if(HxOverrides.substr(result,0,1) != "/") {
			result = "/" + result;
		}
		return result;
	}
	,get_isSsl: function() {
		return this._protocol == "https";
	}
	,get_isHttp: function() {
		return HxOverrides.substr(this._protocol,0,4) == "http";
	}
	,get_isRelative: function() {
		if(this._protocol != "") {
			return this._host == "";
		} else {
			return true;
		}
	}
	,get_protocol: function() {
		if(this._protocol != "") {
			return "" + this._protocol + "://";
		}
		return "";
	}
	,get_port: function() {
		if(this._port == "") {
			if(this.get_isHttp() && !this.get_isSsl()) {
				return 80;
			} else if(this.get_isHttp() && this.get_isSsl()) {
				return 443;
			} else {
				return 0;
			}
		} else {
			return Std.parseInt(HxOverrides.substr(this._port,1,null));
		}
	}
	,get_host: function() {
		return this._host;
	}
	,get_resource: function() {
		if(this._resource == "") {
			return "/";
		}
		return this._resource;
	}
	,get_querystring: function() {
		return this._querystring;
	}
	,__class__: com_akifox_asynchttp_URL
	,__properties__: {get_querystring:"get_querystring",get_resource:"get_resource",get_host:"get_host",get_port:"get_port",get_protocol:"get_protocol",get_isRelative:"get_isRelative",get_isHttp:"get_isHttp",get_isSsl:"get_isSsl"}
};
var com_externs_JSDom = require("jsdom").JSDOM;
var com_externs_JSDomSetup = function() { };
com_externs_JSDomSetup.__name__ = "com.externs.JSDomSetup";
com_externs_JSDomSetup.init = function() {
	var dom = new com_externs_JSDom("");
	$global.document = dom.window.document;
	$global.window = dom.window;
	$global.navigator = { userAgent : "node.js"};
};
var com_vige_support_Widget = function() { };
com_vige_support_Widget.__name__ = "com.vige.support.Widget";
com_vige_support_Widget.__isInterface__ = true;
com_vige_support_Widget.prototype = {
	__class__: com_vige_support_Widget
};
var com_vige_components_Button = function(arg) {
	this.onClick = null;
	this.child = null;
	this.child = arg.child;
	this.onClick = arg.onClick;
	this.color = arg.color;
	this.border = arg.border;
	this.padding = arg.padding;
	this.margin = arg.margin;
	this.size = arg.size;
	this.overflow = arg.overflow;
	this.shadow = arg.shadow;
};
com_vige_components_Button.__name__ = "com.vige.components.Button";
com_vige_components_Button.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Button.prototype = {
	init: function() {
	}
	,render: function() {
		var button = window.document.createElement("button");
		button.appendChild(this.child.render());
		button.onclick = this.onClick;
		button.style.cursor = "pointer";
		button.style.border = "none";
		button.style.textAlign = "left";
		button.style.textDecoration = "none";
		button.style.display = "inline-block";
		new com_vige_support_StyleManager().addStyleToButton({ widget : button, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : this.size, overflow : this.overflow, shadow : this.shadow});
		return button;
	}
	,__class__: com_vige_components_Button
};
var com_vige_components_Center = function(arg) {
	this.child = arg.child;
	this.alignment = arg.alignment;
	this.color = arg.color;
	this.border = arg.border;
	this.padding = arg.padding;
	this.margin = arg.margin;
	this.size = arg.size;
	this.overflow = arg.overflow;
	this.shadow = arg.shadow;
};
com_vige_components_Center.__name__ = "com.vige.components.Center";
com_vige_components_Center.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Center.prototype = {
	init: function() {
	}
	,render: function() {
		var parent = window.document.createElement("div");
		parent.id = "center";
		var element = window.document.createElement("div");
		switch(this.alignment._hx_index) {
		case 0:
			element.id = "element";
			element.style.display = "flex";
			element.style.justifyContent = "center";
			new com_vige_support_StyleManager().addStyleToDiv({ widget : parent, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : new com_vige_utils_Size({ width : "100%"}), overflow : this.overflow, shadow : this.shadow});
			element.appendChild(this.child.render());
			parent = element;
			break;
		case 1:
			element.style.position = "relative";
			element.style.top = "50%";
			element.style.transform = "translateY(-50%)";
			new com_vige_support_StyleManager().addStyleToDiv({ widget : parent, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : new com_vige_utils_Size({ height : "100%"}), overflow : this.overflow, shadow : this.shadow});
			element.appendChild(this.child.render());
			parent.appendChild(element);
			break;
		case 2:
			element.id = "element";
			element.style.display = "flex";
			element.style.justifyContent = "center";
			element.style.position = "relative";
			element.style.top = "50%";
			element.style.transform = "translateY(-50%)";
			new com_vige_support_StyleManager().addStyleToDiv({ widget : parent, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : new com_vige_utils_Size({ height : "100%"}), overflow : this.overflow, shadow : this.shadow});
			element.appendChild(this.child.render());
			parent.appendChild(element);
			break;
		}
		return parent;
	}
	,__class__: com_vige_components_Center
};
var com_vige_components_Collection = function(arg) {
	this.count = arg.count;
	this.color = arg.color;
	this.border = arg.border;
	this.padding = arg.padding;
	this.margin = arg.margin;
	this.size = arg.size;
	this.overflow = arg.overflow;
	this.shadow = arg.shadow;
};
com_vige_components_Collection.__name__ = "com.vige.components.Collection";
com_vige_components_Collection.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Collection.prototype = {
	init: function() {
	}
	,build: function(callback) {
		var widgets = [];
		var _g = 0;
		var _g1 = this.count;
		while(_g < _g1) {
			var i = _g++;
			widgets.push(callback(i));
		}
		return new com_vige_components_Column({ children : widgets});
	}
	,render: function() {
		var container = window.document.createElement("div");
		container.classList.add("collection");
		new com_vige_support_StyleManager().addStyleToDiv({ widget : container, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : this.size, overflow : this.overflow, shadow : this.shadow});
		return container;
	}
	,__class__: com_vige_components_Collection
};
var com_vige_components_Column = function(arg) {
	this.children = null;
	this.children = arg.children;
	this.equalElementWidth = arg.equalElementWidth != null ? arg.equalElementWidth : true;
	this.cellColor = arg.cellColor != null ? arg.cellColor : new com_vige_utils_Color({ });
	this.cellSize = arg.cellSize != null ? arg.cellSize : new com_vige_utils_Size({ width : "100%"});
	this.cellPadding = arg.cellPadding;
	this.cellMargin = arg.cellMargin;
	this.mainAxisAlignment = arg.mainAxisAlignment != null ? arg.mainAxisAlignment : com_vige_support_MainAxisAlignment.Stretch;
	this.crossAxisAlignment = arg.crossAxisAlignment != null ? arg.crossAxisAlignment : com_vige_support_CrossAxisAlignment.FlexStart;
	this.color = arg.color;
	this.border = arg.border;
	this.padding = arg.padding;
	this.margin = arg.margin;
	this.size = arg.size != null ? arg.size : new com_vige_utils_Size({ width : "100%"});
	this.overflow = arg.overflow;
	this.shadow = arg.shadow;
};
com_vige_components_Column.__name__ = "com.vige.components.Column";
com_vige_components_Column.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Column.prototype = {
	init: function() {
	}
	,render: function() {
		var column = window.document.createElement("div");
		column.style.display = "grid";
		column.classList.add("column");
		column.style.boxSizing = "border-box";
		new com_vige_support_StyleManager().addStyleToDiv({ widget : column, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : this.size, mainAxisAlignment : this.mainAxisAlignment, crossAxisAlignment : this.crossAxisAlignment, type : com_vige_support_DivType.Column, overflow : this.overflow, shadow : this.shadow});
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var cell = child.render();
			column.appendChild(cell);
		}
		return column;
	}
	,__class__: com_vige_components_Column
};
var com_vige_components_Constructors = function() { };
com_vige_components_Constructors.__name__ = "com.vige.components.Constructors";
com_vige_components_Constructors.constructRows = function(arg) {
	if(arg.data == null) {
		return [new com_vige_components_Row({ children : [new com_vige_components_Container({ })]})];
	}
	if(arg.elementsInEachRow == 0) {
		return [];
	}
	var rows = [];
	var row = [];
	var _g = 0;
	var _g1 = arg.data.length;
	while(_g < _g1) {
		var i = _g++;
		if(arg.elementsInEachRow == 1) {
			row.push(arg.elementBuilder(i));
			rows.push(arg.rowBuilder(row));
			row = [];
		} else {
			row.push(arg.elementBuilder(i));
			if(row.length % arg.elementsInEachRow == 0) {
				rows.push(arg.rowBuilder(row));
				row = [];
			}
		}
	}
	if(row.length > 0) {
		rows.push(arg.rowBuilder(row));
	}
	return rows;
};
com_vige_components_Constructors.constructColumns = function(arg) {
	if(arg.data == null) {
		return [new com_vige_components_Row({ children : [new com_vige_components_Container({ })]})];
	}
	if(arg.elementsInEachColumn == 0) {
		return [];
	}
	var columns = [];
	var column = [];
	var _g = 0;
	var _g1 = arg.data.length;
	while(_g < _g1) {
		var i = _g++;
		if(arg.elementsInEachColumn == 1) {
			column.push(arg.elementBuilder(i));
			columns.push(arg.columnBuilder(column));
			column = [];
		} else {
			column.push(arg.elementBuilder(i));
			if(column.length % arg.elementsInEachColumn == 0) {
				columns.push(arg.columnBuilder(column));
				column = [];
			}
		}
	}
	if(column.length > 0) {
		columns.push(arg.columnBuilder(column));
	}
	return columns;
};
var com_vige_components_Container = function(arg) {
	this.child = arg.child;
	this.color = arg.color;
	this.border = arg.border;
	this.padding = arg.padding;
	this.margin = arg.margin;
	this.size = arg.size != null ? arg.size : new com_vige_utils_Size({ height : "100%", width : "100%"});
	this.overflow = arg.overflow;
	this.shadow = arg.shadow;
};
com_vige_components_Container.__name__ = "com.vige.components.Container";
com_vige_components_Container.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Container.prototype = {
	init: function() {
	}
	,render: function() {
		var container = window.document.createElement("div");
		container.style.boxSizing = "border-box";
		if(this.child != null) {
			container.appendChild(this.child.render());
		}
		new com_vige_support_StyleManager().addStyleToDiv({ widget : container, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : this.size, overflow : this.overflow, shadow : this.shadow});
		return container;
	}
	,__class__: com_vige_components_Container
};
var com_vige_components_Embeded = function(arg) {
	this.src = arg.src;
	this.name = arg.name != null ? arg.name : "";
	this.height = arg.height;
	this.width = arg.width;
	this.type = arg.type != null ? arg.type : "";
	this.align = arg.align;
	this.color = arg.color;
	this.border = arg.border;
	this.padding = arg.padding;
	this.margin = arg.margin;
	this.size = arg.size;
	this.overflow = arg.overflow;
	this.shadow = arg.shadow;
};
com_vige_components_Embeded.__name__ = "com.vige.components.Embeded";
com_vige_components_Embeded.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Embeded.prototype = {
	init: function() {
	}
	,render: function() {
		var embeded = window.document.createElement("embed");
		embeded.src = this.src;
		embeded.name = this.name;
		if(this.height != null) {
			embeded.height = Std.string(this.height);
		}
		if(this.width != null) {
			embeded.width = Std.string(this.width);
		}
		embeded.type = this.type;
		if(this.align != null) {
			embeded.align = this.align;
		}
		new com_vige_support_StyleManager().addStyleToEmbeded({ widget : embeded, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : this.size, overflow : this.overflow, shadow : this.shadow});
		return embeded;
	}
	,__class__: com_vige_components_Embeded
};
var com_vige_components_HtmlSnippet = function(arg) {
	this.snippet = arg.snippet;
};
com_vige_components_HtmlSnippet.__name__ = "com.vige.components.HtmlSnippet";
com_vige_components_HtmlSnippet.__interfaces__ = [com_vige_support_Widget];
com_vige_components_HtmlSnippet.prototype = {
	init: function() {
	}
	,render: function() {
		var container = window.document.createElement("div");
		container.innerHTML = this.snippet;
		return container;
	}
	,__class__: com_vige_components_HtmlSnippet
};
var com_vige_components_IFrame = function(arg) {
	this.src = arg.src;
};
com_vige_components_IFrame.__name__ = "com.vige.components.IFrame";
com_vige_components_IFrame.__interfaces__ = [com_vige_support_Widget];
com_vige_components_IFrame.prototype = {
	init: function() {
	}
	,render: function() {
		var frame = window.document.createElement("iframe");
		frame.src = this.src;
		return frame;
	}
	,__class__: com_vige_components_IFrame
};
var com_vige_components_Image = function(arg) {
	this.src = arg.src;
	this.alt = arg.alt;
	this.height = arg.height;
	this.minHeight = arg.minHeight;
	this.maxHeight = arg.maxHeight;
	this.width = arg.width;
	this.minWidth = arg.minWidth;
	this.maxWidth = arg.maxWidth;
	this.resizeModifier = arg.resizeModifier != null ? arg.resizeModifier : com_vige_support_ResizeModifier.Width;
	this.color = arg.color;
	this.border = arg.border;
	this.padding = arg.padding;
	this.margin = arg.margin;
	this.size = arg.size;
	this.overflow = arg.overflow;
	this.shadow = arg.shadow;
};
com_vige_components_Image.__name__ = "com.vige.components.Image";
com_vige_components_Image.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Image.prototype = {
	init: function() {
	}
	,render: function() {
		var container = window.document.createElement("img");
		container.src = new com_vige_core_AssetManagement(this.src).getAssetPath();
		container.alt = this.alt;
		container.style.display = "block";
		container.style.objectFit = "contain";
		switch(this.resizeModifier._hx_index) {
		case 0:
			container.style.height = "100%";
			container.style.width = "auto";
			break;
		case 1:
			container.style.height = "auto";
			container.style.width = "100%";
			break;
		case 2:
			container.style.height = "auto";
			container.style.width = "auto";
			break;
		}
		if(this.height != null) {
			container.style.height = Std.string(this.height) + "px";
		}
		if(this.width != null) {
			container.style.width = Std.string(this.width) + "px";
		}
		if(this.minWidth != null) {
			container.style.minWidth = Std.string(this.minWidth) + "px";
		}
		if(this.minHeight != null) {
			container.style.minHeight = Std.string(this.minHeight) + "px";
		}
		if(this.maxWidth != null) {
			container.style.maxWidth = Std.string(this.maxWidth) + "px";
		}
		if(this.maxHeight != null) {
			container.style.maxHeight = Std.string(this.maxHeight) + "px";
		}
		new com_vige_support_StyleManager().addStyleToImage({ widget : container, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : this.size, overflow : this.overflow, shadow : this.shadow});
		return container;
	}
	,__class__: com_vige_components_Image
};
var com_vige_components_Navbar = function(arg) {
	this.child = arg.child;
	this.height = arg.height;
	this.position = arg.position != null ? arg.position : com_vige_support_NavbarPosition.Top;
	this.sticky = arg.sticky != null ? arg.sticky : true;
	this.offset = arg.offset != null ? arg.offset : 0;
	this.onComplete = arg.onComplete != null ? arg.onComplete : function() {
	};
	this.color = arg.color;
	this.border = arg.border;
	this.padding = arg.padding;
	this.margin = arg.margin;
	this.size = arg.size;
	this.overflow = arg.overflow;
	this.shadow = arg.shadow;
};
com_vige_components_Navbar.__name__ = "com.vige.components.Navbar";
com_vige_components_Navbar.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Navbar.prototype = {
	init: function() {
	}
	,render: function() {
		var navbar = window.document.createElement("div");
		new com_vige_support_StyleManager().addStyleToDiv({ widget : navbar, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : this.size, overflow : this.overflow, shadow : this.shadow});
		navbar.appendChild(this.child.render());
		navbar.style.overflow = "hidden";
		if(this.sticky) {
			navbar.style.position = "sticky";
		} else {
			navbar.style.position = "fixed";
		}
		if(this.position == com_vige_support_NavbarPosition.Top) {
			navbar.style.top = Std.string(this.offset) + "px";
		} else {
			navbar.style.bottom = Std.string(this.offset) + "px";
		}
		navbar.style.width = "100%";
		if(this.height != null) {
			navbar.style.height = Std.string(this.height) + "px";
		}
		navbar.style.zIndex = "1000";
		this.onComplete();
		return navbar;
	}
	,__class__: com_vige_components_Navbar
};
var com_vige_components_Page = function(arg) {
	this.title = "NOT IMPLEMENTED";
	this.route = arg.route;
	this.title = arg.title;
	this.navbar = arg.navbar;
	this.child = arg.child;
	this.color = arg.color;
	this.border = arg.border;
	this.padding = arg.padding;
	this.margin = arg.margin;
	this.size = arg.size;
	this.overflow = arg.overflow;
	this.shadow = arg.shadow;
};
com_vige_components_Page.__name__ = "com.vige.components.Page";
com_vige_components_Page.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Page.prototype = {
	init: function() {
	}
	,getRoute: function() {
		return this.route;
	}
	,render: function() {
		var element = window.document.createElement("div");
		if(this.title != null) {
			var titleElement = window.document.createElement("title");
			titleElement.text = this.title;
			var existingTitleElements = window.document.head.getElementsByTagName("title");
			var _g = 0;
			var _g1 = existingTitleElements.length;
			while(_g < _g1) {
				var i = _g++;
				window.document.head.removeChild(existingTitleElements[i]);
			}
			window.document.head.appendChild(titleElement);
		}
		element.id = "page";
		if(this.navbar != null) {
			element.appendChild(this.navbar.render());
		}
		element.appendChild(this.child.render());
		new com_vige_support_StyleManager().addStyleToDiv({ widget : element, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : this.size, overflow : this.overflow, shadow : this.shadow});
		return element;
	}
	,__class__: com_vige_components_Page
};
var com_vige_components_Positioned = function(arg) {
	this.top = arg.top != null ? arg.top : 0.0;
	this.right = arg.right != null ? arg.right : 0.0;
	this.bottom = arg.bottom != null ? arg.bottom : 0.0;
	this.left = arg.left != null ? arg.left : 0.0;
	this.child = arg.child;
	this.color = arg.color;
	this.border = arg.border;
	this.padding = arg.padding;
	this.margin = arg.margin;
	this.size = arg.size;
	this.overflow = arg.overflow;
	this.shadow = arg.shadow;
};
com_vige_components_Positioned.__name__ = "com.vige.components.Positioned";
com_vige_components_Positioned.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Positioned.prototype = {
	init: function() {
	}
	,render: function() {
		var parent = window.document.createElement("div");
		parent.style.position = "relative";
		new com_vige_support_StyleManager().addStyleToDiv({ widget : parent, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : new com_vige_utils_Size({ height : "100%", width : "100%"}), overflow : this.overflow, shadow : this.shadow});
		var positioned = window.document.createElement("div");
		positioned.appendChild(this.child.render());
		positioned.style.position = "absolute";
		if(this.top != 0.0) {
			positioned.style.top = Std.string(this.top) + "px";
		}
		if(this.right != 0.0) {
			positioned.style.right = Std.string(this.right) + "px";
		}
		if(this.bottom != 0.0) {
			positioned.style.bottom = Std.string(this.bottom) + "px";
		}
		if(this.left != 0.0) {
			positioned.style.left = Std.string(this.left) + "px";
		}
		new com_vige_support_StyleManager().addStyleToDiv({ widget : positioned, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : this.size, overflow : this.overflow, shadow : this.shadow});
		parent.appendChild(positioned);
		return parent;
	}
	,__class__: com_vige_components_Positioned
};
var com_vige_components_Request = function(arg) {
	this.onError = null;
	this.onProgress = null;
	this.onComplete = null;
	this.url = "";
	this.url = arg.url;
	this.jsonp = arg.jsonp != null && arg.jsonp;
	this.method = arg.method != null ? arg.method : "GET";
	this.onComplete = arg.onComplete;
	this.onProgress = arg.onProgress;
	this.onError = arg.onError;
};
com_vige_components_Request.__name__ = "com.vige.components.Request";
com_vige_components_Request.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Request.prototype = {
	init: function() {
	}
	,replace: function(container,onProgressNode,component) {
		container.removeChild(onProgressNode);
		container.appendChild(component.render());
	}
	,replaceNode: function(container,onProgressNode,component) {
		container.removeChild(onProgressNode);
		container.appendChild(component.render());
	}
	,render: function() {
		var _gthis = this;
		var container = window.document.createElement("div");
		if(this.jsonp) {
			var progressComponent = this.onProgress();
			var onProgressNode = progressComponent.render();
			var onProgressNode1 = container.appendChild(onProgressNode);
			var http = new com_vige_support_Jsonp(this.url);
			http.onData = function(data) {
				var component = _gthis.onComplete(data);
				_gthis.replaceNode(container,onProgressNode1,component);
			};
			http.request();
		} else {
			var progressComponent1 = this.onProgress();
			var onProgressNode2 = progressComponent1.render();
			var onProgressNode3 = container.appendChild(onProgressNode2);
			var request = new com_akifox_asynchttp_HttpRequest({ url : this.url, method : this.method, callback : function(response) {
				if(response.get_isOK()) {
					var component1 = _gthis.onComplete(response);
					_gthis.replace(container,onProgressNode3,component1);
				} else if(_gthis.onError != null) {
					var component2 = _gthis.onError(response);
					_gthis.replace(container,onProgressNode3,component2);
				}
			}});
			request.send();
		}
		return container;
	}
	,__class__: com_vige_components_Request
};
var com_vige_components_Row = function(arg) {
	this.children = null;
	this.children = arg.children;
	this.equalElementWidth = arg.equalElementWidth != null ? arg.equalElementWidth : true;
	this.cellColor = arg.cellColor != null ? arg.cellColor : new com_vige_utils_Color({ });
	this.cellSize = arg.cellSize;
	this.cellPadding = arg.cellPadding;
	this.cellMargin = arg.cellMargin;
	this.mainAxisAlignment = arg.mainAxisAlignment != null ? arg.mainAxisAlignment : com_vige_support_MainAxisAlignment.Stretch;
	this.crossAxisAlignment = arg.crossAxisAlignment != null ? arg.crossAxisAlignment : com_vige_support_CrossAxisAlignment.Stretch;
	this.flex = arg.flex != null && arg.flex;
	this.turnicate = arg.turnicate != null ? arg.turnicate : true;
	this.color = arg.color;
	this.border = arg.border;
	this.padding = arg.padding;
	this.margin = arg.margin;
	this.size = arg.size != null ? arg.size : new com_vige_utils_Size({ width : "100%"});
	this.overflow = arg.overflow;
	this.shadow = arg.shadow;
};
com_vige_components_Row.__name__ = "com.vige.components.Row";
com_vige_components_Row.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Row.prototype = {
	init: function() {
	}
	,render: function() {
		var row = window.document.createElement("div");
		if(this.flex) {
			new com_vige_support_StyleManager().addStyleToDiv({ widget : row, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : this.size, mainAxisAlignment : this.mainAxisAlignment, crossAxisAlignment : this.crossAxisAlignment, type : com_vige_support_DivType.Row, overflow : this.overflow, shadow : this.shadow});
			row.style.display = "flex";
			row.style.width = "100%";
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				row.appendChild(child.render());
			}
			return row;
		}
		if(this.equalElementWidth) {
			row.style.display = "grid";
		} else {
			row.style.display = "inline-grid";
		}
		row.style.gridAutoFlow = "column";
		new com_vige_support_StyleManager().addStyleToDiv({ widget : row, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : this.size, mainAxisAlignment : this.mainAxisAlignment, crossAxisAlignment : this.crossAxisAlignment, type : com_vige_support_DivType.Row, overflow : this.overflow, shadow : this.shadow});
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var child1 = _g11[_g2];
			++_g2;
			var rowCell = window.document.createElement("div");
			rowCell.style.boxSizing = "border-box";
			rowCell.appendChild(child1.render());
			new com_vige_support_StyleManager().addStyleToDiv({ widget : rowCell, color : this.cellColor, padding : this.cellPadding, margin : this.cellMargin, size : this.cellSize, shadow : []});
			row.appendChild(rowCell);
		}
		return row;
	}
	,__class__: com_vige_components_Row
};
var com_vige_components_Script = function(arg) {
	this.src = arg.src;
};
com_vige_components_Script.__name__ = "com.vige.components.Script";
com_vige_components_Script.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Script.prototype = {
	init: function() {
	}
	,render: function() {
		var script = window.document.createElement("script");
		script.src = this.src;
		return script;
	}
	,__class__: com_vige_components_Script
};
var com_vige_components_Stream = function(page,arg) {
	this.onError = null;
	this.onClose = null;
	this.onMessage = null;
	this.onOpen = null;
	this.onStandby = null;
	this.page = null;
	this.url = "";
	this.url = arg.url;
	this.page = page;
	this.onStandby = arg.onStandby;
	this.onOpen = arg.onOpen;
	this.onMessage = arg.onMessage;
	this.onClose = arg.onClose;
	this.onError = arg.onError;
};
com_vige_components_Stream.__name__ = "com.vige.components.Stream";
com_vige_components_Stream.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Stream.prototype = {
	init: function() {
	}
	,replace: function(container,onProgressNode,component) {
		container.removeChild(onProgressNode);
		return container.appendChild(component.render());
	}
	,render: function() {
		var _gthis = this;
		var container = window.document.createElement("div");
		var lastComponent = this.onStandby().render();
		var lastComponent1 = container.appendChild(lastComponent);
		var streamConnection = new com_vige_support_StreamConnection(this.url,window.location.pathname);
		streamConnection.getSocket().onopen = function(res) {
			com_vige_core_GlobalState.instance.openStream(streamConnection);
			var component = _gthis.onOpen();
			lastComponent1 = _gthis.replace(container,lastComponent1,component);
		};
		streamConnection.getSocket().onmessage = function(message) {
			var component1 = _gthis.onMessage(message);
			lastComponent1 = _gthis.replace(container,lastComponent1,component1);
		};
		streamConnection.getSocket().onclose = function(res1) {
			var component2 = _gthis.onClose();
			lastComponent1 = _gthis.replace(container,lastComponent1,component2);
		};
		streamConnection.getSocket().onerror = function(error) {
			var component3 = _gthis.onError(error);
			lastComponent1 = _gthis.replace(container,lastComponent1,component3);
		};
		return container;
	}
	,__class__: com_vige_components_Stream
};
var com_vige_components_Text = function(text,arg) {
	this.text = "";
	this.textSize = -1;
	this.text = text;
	if(arg == null) {
		arg = { textSize : -1, color : new com_vige_utils_Color({ }), textFormat : com_vige_support_TextFormat.p};
	}
	this.font = arg.font;
	this.textSize = arg.textSize != null ? arg.textSize : -1;
	this.color = arg.color != null ? arg.color : new com_vige_utils_Color({ });
	this.textFormat = arg.textFormat != null ? arg.textFormat : com_vige_support_TextFormat.p;
	this.textAlignment = arg.textAlignment != null ? arg.textAlignment : com_vige_support_TextAlign.Left;
	this.fontStyle = arg.fontStyle != null ? arg.fontStyle : com_vige_support_FontStyle.Normal;
	this.fontWeight = arg.fontWeight != null ? arg.fontWeight : com_vige_support_FontWeight.Normal;
	this.textOverflow = arg.textOverflow != null ? arg.textOverflow : com_vige_support_TextOverflow.Clip;
	this.whiteSpace = arg.whiteSpace != null ? arg.whiteSpace : com_vige_support_WhiteSpace.Normal;
	this.textIndent = arg.textIndent;
	this.wordBreak = arg.wordBreak != null ? arg.wordBreak : com_vige_support_WordBreak.Normal;
	this.lineHeight = arg.lineHeight;
	this.letterSpacing = arg.letterSpacing;
	this.wordSpacing = arg.wordSpacing;
};
com_vige_components_Text.__name__ = "com.vige.components.Text";
com_vige_components_Text.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Text.prototype = {
	init: function() {
	}
	,getText: function() {
		return this.text;
	}
	,render: function() {
		var element;
		switch(this.textFormat._hx_index) {
		case 0:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = "2em";
			element.style.margin = ".67em 0";
			element.style.fontWeight = "bold";
			break;
		case 1:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = "1.5em";
			element.style.margin = ".83em 0";
			element.style.fontWeight = "bold";
			break;
		case 2:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = "1.17em";
			element.style.margin = "1em 0";
			element.style.fontWeight = "bold";
			break;
		case 3:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = "1em";
			element.style.margin = "1.33em 0";
			element.style.fontWeight = "bold";
			break;
		case 4:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = ".83em";
			element.style.margin = "1.67em 0";
			element.style.fontWeight = "bold";
			break;
		case 5:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = ".67em";
			element.style.margin = "2.33em 0";
			element.style.fontWeight = "bold";
			break;
		case 6:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = "1em";
			element.style.margin = "0 0";
			element.style.fontWeight = "normal";
			break;
		case 7:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = "1em";
			element.style.margin = "0 0";
			element.style.fontWeight = "normal";
			break;
		case 8:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = "1em";
			element.style.margin = "0 0";
			element.style.fontWeight = "normal";
			break;
		}
		switch(this.textAlignment._hx_index) {
		case 0:
			element.style.textAlign = "left";
			break;
		case 1:
			element.style.textAlign = "right";
			break;
		case 2:
			element.style.textAlign = "center";
			break;
		case 3:
			element.style.textAlign = "justify";
			break;
		case 4:
			element.style.textAlign = "inherit";
			break;
		}
		switch(this.fontStyle._hx_index) {
		case 0:
			element.style.fontStyle = "normal";
			break;
		case 1:
			element.style.fontStyle = "italic";
			break;
		case 2:
			element.style.fontStyle = "oblique";
			break;
		case 3:
			element.style.fontStyle = "initial";
			break;
		case 4:
			element.style.fontStyle = "inherit";
			break;
		}
		switch(this.fontWeight._hx_index) {
		case 0:
			element.style.fontWeight = "normal";
			break;
		case 1:
			element.style.fontWeight = "bold";
			break;
		case 2:
			element.style.fontWeight = "bolder";
			break;
		case 3:
			element.style.fontWeight = "lighter";
			break;
		case 4:
			element.style.fontWeight = "100";
			break;
		case 5:
			element.style.fontWeight = "200";
			break;
		case 6:
			element.style.fontWeight = "300";
			break;
		case 7:
			element.style.fontWeight = "400";
			break;
		case 8:
			element.style.fontWeight = "500";
			break;
		case 9:
			element.style.fontWeight = "600";
			break;
		case 10:
			element.style.fontWeight = "700";
			break;
		case 11:
			element.style.fontWeight = "800";
			break;
		case 12:
			element.style.fontWeight = "900";
			break;
		}
		switch(this.textOverflow._hx_index) {
		case 0:
			element.style.textOverflow = "clip";
			break;
		case 1:
			element.style.textOverflow = "ellipsis";
			break;
		case 2:
			element.style.textOverflow = "string";
			break;
		case 3:
			element.style.textOverflow = "initial";
			break;
		case 4:
			element.style.textOverflow = "inherit";
			break;
		}
		switch(this.whiteSpace._hx_index) {
		case 0:
			element.style.whiteSpace = "normal";
			break;
		case 1:
			element.style.whiteSpace = "nowrap";
			break;
		case 2:
			element.style.whiteSpace = "pre";
			break;
		case 3:
			element.style.whiteSpace = "pre-line";
			break;
		case 4:
			element.style.whiteSpace = "pre-wrap";
			break;
		case 5:
			element.style.whiteSpace = "break-space";
			break;
		}
		switch(this.wordBreak._hx_index) {
		case 0:
			element.style.wordBreak = "normal";
			break;
		case 1:
			element.style.wordBreak = "break-all";
			break;
		case 2:
			element.style.wordBreak = "keep-all";
			break;
		case 3:
			element.style.wordBreak = "break-word";
			break;
		}
		if(this.textSize > -1) {
			element.style.fontSize = Std.string(this.textSize);
		}
		if(this.font != null) {
			var tmp = this.font.getFamilyName() + ", ";
			var tmp1 = this.font.getGenericFamily();
			element.style.fontFamily = tmp + tmp1;
		}
		if(this.textIndent != null) {
			element.style.textIndent = Std.string(this.textIndent) + "px";
		}
		if(this.lineHeight != null) {
			element.style.lineHeight = Std.string(this.lineHeight) + "px";
		} else {
			element.style.lineHeight = "normal";
		}
		if(this.letterSpacing != null) {
			element.style.letterSpacing = Std.string(this.letterSpacing) + "px";
		} else {
			element.style.letterSpacing = "normal";
		}
		if(this.wordSpacing != null) {
			element.style.wordSpacing = Std.string(this.wordSpacing) + "px";
		} else {
			element.style.wordSpacing = "normal";
		}
		element.style.color = this.color.getColor();
		element.style.backgroundColor = this.color.getBackgroundColor();
		element.innerText = this.text;
		return element;
	}
	,__class__: com_vige_components_Text
};
var com_vige_core_AssetManagement = function(src) {
	this.src = src;
};
com_vige_core_AssetManagement.__name__ = "com.vige.core.AssetManagement";
com_vige_core_AssetManagement.prototype = {
	getAssetPath: function() {
		var url = window.location.pathname;
		var paths = url.split("/");
		var result = "";
		if(paths.length <= 2) {
			return this.src;
		} else {
			var correctedSrc = "";
			var _g = 0;
			var _g1 = paths.length - 2;
			while(_g < _g1) {
				var i = _g++;
				correctedSrc += "/..";
			}
			var folder = this.src.split(".");
			correctedSrc += folder[1] + "." + folder[2];
			return correctedSrc;
		}
	}
	,__class__: com_vige_core_AssetManagement
};
var com_vige_core_Body = function() {
};
com_vige_core_Body.__name__ = "com.vige.core.Body";
com_vige_core_Body.prototype = {
	to: function(arg) {
	}
	,init: function() {
		window.document.body.style.margin = "0px";
	}
	,font: function(fontFamily,fontWeight) {
		var style = window.document.body.style;
		style.fontFamily = fontFamily;
		style.fontWeight = fontWeight;
	}
	,globalBackgroundColor: function(color) {
		window.document.body.style.backgroundColor = color.getBackgroundColor();
	}
	,setHeader: function(stylesheetUrl) {
		var element = "<link href=\"" + stylesheetUrl + "\", rel=\"stylesheet\">";
		var style = window.document.head;
		var style1 = style.innerHTML += element;
	}
	,setGlobalTitle: function(title) {
		var titleElement = window.document.createElement("title");
		titleElement.text = title;
		var existingTitleElements = window.document.head.getElementsByTagName("title");
		var _g = 0;
		var _g1 = existingTitleElements.length;
		while(_g < _g1) {
			var i = _g++;
			window.document.head.removeChild(existingTitleElements[i]);
		}
		window.document.head.appendChild(titleElement);
	}
	,render: function(widget) {
		window.document.body.appendChild(widget);
	}
	,__class__: com_vige_core_Body
};
var com_vige_core_DynamicComponent = function() {
	this.page = null;
};
com_vige_core_DynamicComponent.__name__ = "com.vige.core.DynamicComponent";
com_vige_core_DynamicComponent.prototype = {
	setState: function(component,callback) {
		var oldComponent;
		if(this.page != null) {
			oldComponent = this.page.render();
		}
		callback();
		com_vige_core_Navigate.updateComponent(component.component().render());
	}
	,init: function() {
	}
	,unload: function() {
	}
	,component: function() {
		return new com_vige_components_Page({ route : "/", child : new com_vige_components_Text("Component function not overwritten")});
	}
	,__class__: com_vige_core_DynamicComponent
};
var com_vige_core_GlobalState = function() {
	this.connections = [];
	this.streams = [];
};
com_vige_core_GlobalState.__name__ = "com.vige.core.GlobalState";
com_vige_core_GlobalState.prototype = {
	openStream: function(stream) {
		this.streams.push(stream);
	}
	,closeAllStreams: function() {
		var _g = 0;
		var _g1 = this.streams.length;
		while(_g < _g1) {
			var i = _g++;
			this.streams[i].getSocket().close(1000);
			this.streams = [];
		}
	}
	,openConnection: function(connection) {
		this.connections.push(connection);
	}
	,isConnectionOpen: function(url) {
		var _g = 0;
		var _g1 = this.connections.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.connections[i].get_url().toString() == url) {
				return true;
			}
		}
		return false;
	}
	,removeConnection: function(url) {
		var _g = 0;
		var _g1 = this.connections.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.connections[i].get_url().toString() == url) {
				return this.connections.splice(i,0)[0];
			}
		}
		return null;
	}
	,__class__: com_vige_core_GlobalState
};
var com_vige_core_Navigate = function() {
};
com_vige_core_Navigate.__name__ = "com.vige.core.Navigate";
com_vige_core_Navigate.to = function(currentPage,arg) {
	var url = arg.url;
	if(arg.main == null) {
		arg.main = false;
	}
	if(arg.hardRefresh == null) {
		arg.hardRefresh = false;
	}
	if(arg.param != null && arg.param.length > 0) {
		url += "?";
		var _g = 0;
		var _g1 = arg.param.length;
		while(_g < _g1) {
			var i = _g++;
			if(i != 0) {
				url += "&";
			}
			url += arg.param[i].param + "=" + arg.param[i].data;
		}
	}
	com_vige_core_GlobalState.instance.closeAllStreams();
	var correctPage = com_vige_core_Navigate.matchRoute(url,com_vige_core_Navigate.routes);
	if(!arg.main) {
		window.history.pushState(null,"Index",url);
		if(arg.hardRefresh) {
			window.location.reload();
		}
	}
	if(currentPage != null) {
		currentPage.unload();
	}
	com_vige_core_Navigate.setComponent(true,correctPage);
};
com_vige_core_Navigate.getParameters = function() {
	var params = [];
	var url = window.location.pathname;
	var correctPage = com_vige_core_Navigate.matchRoute(url,com_vige_core_Navigate.routes);
	var currentRoute = correctPage.component().getRoute();
	var routeParts = currentRoute.split("/");
	var urlParts = url.split("/");
	routeParts.splice(0,1);
	urlParts.splice(0,1);
	var _g = 0;
	var _g1 = routeParts.length;
	while(_g < _g1) {
		var i = _g++;
		if(routeParts[i].indexOf(":") > -1) {
			params.push(urlParts[i]);
		}
	}
	return params;
};
com_vige_core_Navigate.link = function(arg) {
	window.history.pushState(null,"Index",window.location.pathname);
	window.location.replace(arg.url);
};
com_vige_core_Navigate.setComponent = function(newHistoryElement,page) {
	var currentURL = window.location.pathname;
	if(window.document.querySelector("#page") != null) {
		window.document.querySelector("#page").remove();
	}
	window.document.body.appendChild(page.component().render());
	page.init();
};
com_vige_core_Navigate.matchRoute = function(url,routes) {
	var urlParts = url.split("/");
	urlParts.splice(0,1);
	var _g = 0;
	var _g1 = routes.length;
	while(_g < _g1) {
		var i = _g++;
		var route = routes[i].component().getRoute().split("/");
		route.splice(0,1);
		var match = true;
		if(route.length == urlParts.length) {
			var _g2 = 0;
			var _g11 = urlParts.length;
			while(_g2 < _g11) {
				var j = _g2++;
				if(route[j].indexOf(":") == -1) {
					if(route[j] != urlParts[j]) {
						match = false;
					}
				}
			}
		} else {
			match = false;
		}
		if(match) {
			return routes[i];
		}
	}
	var _g21 = 0;
	while(_g21 < routes.length) {
		var route1 = routes[_g21];
		++_g21;
		if(route1.component().getRoute() == "/") {
			return route1;
		}
	}
	return com_vige_core_Navigate.fourOFour;
};
com_vige_core_Navigate.navigationEvent = function() {
	com_vige_core_GlobalState.instance.closeAllStreams();
	var url = window.location.pathname;
	var correctPage = com_vige_core_Navigate.matchRoute(window.location.pathname,com_vige_core_Navigate.routes);
	com_vige_core_Navigate.setComponent(false,correctPage);
};
com_vige_core_Navigate.updateComponent = function(component) {
	if(window.document.querySelector("#page") != null) {
		window.document.querySelector("#page").remove();
	}
	window.document.body.appendChild(component);
};
com_vige_core_Navigate.prototype = {
	__class__: com_vige_core_Navigate
};
var com_vige_core_SingleRequest = function(arg) {
	this.onError = null;
	this.onProgress = null;
	this.onComplete = null;
	this.url = "";
	this.url = arg.url;
	this.method = arg.method != null ? arg.method : "GET";
	this.content = arg.content;
	this.contentType = arg.contentType;
	this.onComplete = arg.onComplete;
	this.onProgress = arg.onProgress;
	this.onError = arg.onError;
};
com_vige_core_SingleRequest.__name__ = "com.vige.core.SingleRequest";
com_vige_core_SingleRequest.prototype = {
	request: function() {
		var _gthis = this;
		this.onProgress();
		var request = new com_akifox_asynchttp_HttpRequest({ url : this.url, method : this.method, content : this.content, contentType : this.contentType, callback : function(response) {
			if(response.get_isOK()) {
				return _gthis.onComplete(response);
			} else {
				return _gthis.onError(response);
			}
		}});
		request.send();
		return request;
	}
	,__class__: com_vige_core_SingleRequest
};
var com_vige_core_StaticComponent = function() { };
com_vige_core_StaticComponent.__name__ = "com.vige.core.StaticComponent";
com_vige_core_StaticComponent.prototype = {
	component: function() {
		return new com_vige_components_Page({ route : "/", child : new com_vige_components_Text("Component function not overwritten")});
	}
	,__class__: com_vige_core_StaticComponent
};
var com_vige_support_MainAxisAlignment = $hxEnums["com.vige.support.MainAxisAlignment"] = { __ename__ : true, __constructs__ : ["TopLeft","TopCenter","TopRight","Left","Center","Right","LowerLeft","LowerCenter","LowerRight","Stretch"]
	,TopLeft: {_hx_index:0,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,TopCenter: {_hx_index:1,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,TopRight: {_hx_index:2,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,Left: {_hx_index:3,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,Center: {_hx_index:4,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,Right: {_hx_index:5,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,LowerLeft: {_hx_index:6,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,LowerCenter: {_hx_index:7,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,LowerRight: {_hx_index:8,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,Stretch: {_hx_index:9,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
};
var com_vige_support_CrossAxisAlignment = $hxEnums["com.vige.support.CrossAxisAlignment"] = { __ename__ : true, __constructs__ : ["Stretch","Center","FlexStart","FlexEnd","Initial","Inherit","SpacedEvenly","SpaceBetween","SpaceAround"]
	,Stretch: {_hx_index:0,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
	,Center: {_hx_index:1,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
	,FlexStart: {_hx_index:2,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
	,FlexEnd: {_hx_index:3,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
	,Initial: {_hx_index:4,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
	,Inherit: {_hx_index:5,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
	,SpacedEvenly: {_hx_index:6,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
	,SpaceBetween: {_hx_index:7,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
	,SpaceAround: {_hx_index:8,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
};
var com_vige_support_DivType = $hxEnums["com.vige.support.DivType"] = { __ename__ : true, __constructs__ : ["Row","Column","Other"]
	,Row: {_hx_index:0,__enum__:"com.vige.support.DivType",toString:$estr}
	,Column: {_hx_index:1,__enum__:"com.vige.support.DivType",toString:$estr}
	,Other: {_hx_index:2,__enum__:"com.vige.support.DivType",toString:$estr}
};
var com_vige_support_Overflow = $hxEnums["com.vige.support.Overflow"] = { __ename__ : true, __constructs__ : ["Visible","Hidden","Scroll","Auto","Initial","Inherit"]
	,Visible: {_hx_index:0,__enum__:"com.vige.support.Overflow",toString:$estr}
	,Hidden: {_hx_index:1,__enum__:"com.vige.support.Overflow",toString:$estr}
	,Scroll: {_hx_index:2,__enum__:"com.vige.support.Overflow",toString:$estr}
	,Auto: {_hx_index:3,__enum__:"com.vige.support.Overflow",toString:$estr}
	,Initial: {_hx_index:4,__enum__:"com.vige.support.Overflow",toString:$estr}
	,Inherit: {_hx_index:5,__enum__:"com.vige.support.Overflow",toString:$estr}
};
var com_vige_support_CenterAlignment = $hxEnums["com.vige.support.CenterAlignment"] = { __ename__ : true, __constructs__ : ["Horizontal","Vertical","Both"]
	,Horizontal: {_hx_index:0,__enum__:"com.vige.support.CenterAlignment",toString:$estr}
	,Vertical: {_hx_index:1,__enum__:"com.vige.support.CenterAlignment",toString:$estr}
	,Both: {_hx_index:2,__enum__:"com.vige.support.CenterAlignment",toString:$estr}
};
var com_vige_support_ResizeModifier = $hxEnums["com.vige.support.ResizeModifier"] = { __ename__ : true, __constructs__ : ["Height","Width","None"]
	,Height: {_hx_index:0,__enum__:"com.vige.support.ResizeModifier",toString:$estr}
	,Width: {_hx_index:1,__enum__:"com.vige.support.ResizeModifier",toString:$estr}
	,None: {_hx_index:2,__enum__:"com.vige.support.ResizeModifier",toString:$estr}
};
var com_vige_support_NavbarPosition = $hxEnums["com.vige.support.NavbarPosition"] = { __ename__ : true, __constructs__ : ["Top","Bottom"]
	,Top: {_hx_index:0,__enum__:"com.vige.support.NavbarPosition",toString:$estr}
	,Bottom: {_hx_index:1,__enum__:"com.vige.support.NavbarPosition",toString:$estr}
};
var com_vige_support_TextFormat = $hxEnums["com.vige.support.TextFormat"] = { __ename__ : true, __constructs__ : ["h1","h2","h3","h4","h5","h6","p","a","pre"]
	,h1: {_hx_index:0,__enum__:"com.vige.support.TextFormat",toString:$estr}
	,h2: {_hx_index:1,__enum__:"com.vige.support.TextFormat",toString:$estr}
	,h3: {_hx_index:2,__enum__:"com.vige.support.TextFormat",toString:$estr}
	,h4: {_hx_index:3,__enum__:"com.vige.support.TextFormat",toString:$estr}
	,h5: {_hx_index:4,__enum__:"com.vige.support.TextFormat",toString:$estr}
	,h6: {_hx_index:5,__enum__:"com.vige.support.TextFormat",toString:$estr}
	,p: {_hx_index:6,__enum__:"com.vige.support.TextFormat",toString:$estr}
	,a: {_hx_index:7,__enum__:"com.vige.support.TextFormat",toString:$estr}
	,pre: {_hx_index:8,__enum__:"com.vige.support.TextFormat",toString:$estr}
};
var com_vige_support_TextAlign = $hxEnums["com.vige.support.TextAlign"] = { __ename__ : true, __constructs__ : ["Left","Right","Center","Justify","Inherit"]
	,Left: {_hx_index:0,__enum__:"com.vige.support.TextAlign",toString:$estr}
	,Right: {_hx_index:1,__enum__:"com.vige.support.TextAlign",toString:$estr}
	,Center: {_hx_index:2,__enum__:"com.vige.support.TextAlign",toString:$estr}
	,Justify: {_hx_index:3,__enum__:"com.vige.support.TextAlign",toString:$estr}
	,Inherit: {_hx_index:4,__enum__:"com.vige.support.TextAlign",toString:$estr}
};
var com_vige_support_FontStyle = $hxEnums["com.vige.support.FontStyle"] = { __ename__ : true, __constructs__ : ["Normal","Italic","Oblique","Initial","Inherit"]
	,Normal: {_hx_index:0,__enum__:"com.vige.support.FontStyle",toString:$estr}
	,Italic: {_hx_index:1,__enum__:"com.vige.support.FontStyle",toString:$estr}
	,Oblique: {_hx_index:2,__enum__:"com.vige.support.FontStyle",toString:$estr}
	,Initial: {_hx_index:3,__enum__:"com.vige.support.FontStyle",toString:$estr}
	,Inherit: {_hx_index:4,__enum__:"com.vige.support.FontStyle",toString:$estr}
};
var com_vige_support_FontWeight = $hxEnums["com.vige.support.FontWeight"] = { __ename__ : true, __constructs__ : ["Normal","Bold","Bolder","Lighter","W100","W200","W300","W400","W500","W600","W700","W800","W900"]
	,Normal: {_hx_index:0,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,Bold: {_hx_index:1,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,Bolder: {_hx_index:2,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,Lighter: {_hx_index:3,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W100: {_hx_index:4,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W200: {_hx_index:5,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W300: {_hx_index:6,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W400: {_hx_index:7,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W500: {_hx_index:8,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W600: {_hx_index:9,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W700: {_hx_index:10,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W800: {_hx_index:11,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W900: {_hx_index:12,__enum__:"com.vige.support.FontWeight",toString:$estr}
};
var com_vige_support_TextOverflow = $hxEnums["com.vige.support.TextOverflow"] = { __ename__ : true, __constructs__ : ["Clip","Ellipsis","String","Initial","Inherit"]
	,Clip: {_hx_index:0,__enum__:"com.vige.support.TextOverflow",toString:$estr}
	,Ellipsis: {_hx_index:1,__enum__:"com.vige.support.TextOverflow",toString:$estr}
	,String: {_hx_index:2,__enum__:"com.vige.support.TextOverflow",toString:$estr}
	,Initial: {_hx_index:3,__enum__:"com.vige.support.TextOverflow",toString:$estr}
	,Inherit: {_hx_index:4,__enum__:"com.vige.support.TextOverflow",toString:$estr}
};
var com_vige_support_WhiteSpace = $hxEnums["com.vige.support.WhiteSpace"] = { __ename__ : true, __constructs__ : ["Normal","Nowrap","Pre","PreLine","PreWrap","BreakSpace"]
	,Normal: {_hx_index:0,__enum__:"com.vige.support.WhiteSpace",toString:$estr}
	,Nowrap: {_hx_index:1,__enum__:"com.vige.support.WhiteSpace",toString:$estr}
	,Pre: {_hx_index:2,__enum__:"com.vige.support.WhiteSpace",toString:$estr}
	,PreLine: {_hx_index:3,__enum__:"com.vige.support.WhiteSpace",toString:$estr}
	,PreWrap: {_hx_index:4,__enum__:"com.vige.support.WhiteSpace",toString:$estr}
	,BreakSpace: {_hx_index:5,__enum__:"com.vige.support.WhiteSpace",toString:$estr}
};
var com_vige_support_WordBreak = $hxEnums["com.vige.support.WordBreak"] = { __ename__ : true, __constructs__ : ["Normal","BreakAll","KeepAll","BreakWord"]
	,Normal: {_hx_index:0,__enum__:"com.vige.support.WordBreak",toString:$estr}
	,BreakAll: {_hx_index:1,__enum__:"com.vige.support.WordBreak",toString:$estr}
	,KeepAll: {_hx_index:2,__enum__:"com.vige.support.WordBreak",toString:$estr}
	,BreakWord: {_hx_index:3,__enum__:"com.vige.support.WordBreak",toString:$estr}
};
var com_vige_support_BorderStyle = $hxEnums["com.vige.support.BorderStyle"] = { __ename__ : true, __constructs__ : ["Dotted","Dashed","Solid","Double","Groove","Ridge","Inset","Outset","None","Hidden"]
	,Dotted: {_hx_index:0,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,Dashed: {_hx_index:1,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,Solid: {_hx_index:2,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,Double: {_hx_index:3,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,Groove: {_hx_index:4,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,Ridge: {_hx_index:5,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,Inset: {_hx_index:6,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,Outset: {_hx_index:7,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,None: {_hx_index:8,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,Hidden: {_hx_index:9,__enum__:"com.vige.support.BorderStyle",toString:$estr}
};
var com_vige_support_BorderSides = $hxEnums["com.vige.support.BorderSides"] = { __ename__ : true, __constructs__ : ["Top","Right","Bottom","Left","All"]
	,Top: {_hx_index:0,__enum__:"com.vige.support.BorderSides",toString:$estr}
	,Right: {_hx_index:1,__enum__:"com.vige.support.BorderSides",toString:$estr}
	,Bottom: {_hx_index:2,__enum__:"com.vige.support.BorderSides",toString:$estr}
	,Left: {_hx_index:3,__enum__:"com.vige.support.BorderSides",toString:$estr}
	,All: {_hx_index:4,__enum__:"com.vige.support.BorderSides",toString:$estr}
};
var com_vige_support_InputType = $hxEnums["com.vige.support.InputType"] = { __ename__ : true, __constructs__ : ["Button","Checkbox","Color","DateTime","DatetimeLocal","Email","File","Hidden","Image","Month","Number","Password","Radio","Range","Reset","Search","Submit","Tel","Text","Time","Url","Week"]
	,Button: {_hx_index:0,__enum__:"com.vige.support.InputType",toString:$estr}
	,Checkbox: {_hx_index:1,__enum__:"com.vige.support.InputType",toString:$estr}
	,Color: {_hx_index:2,__enum__:"com.vige.support.InputType",toString:$estr}
	,DateTime: {_hx_index:3,__enum__:"com.vige.support.InputType",toString:$estr}
	,DatetimeLocal: {_hx_index:4,__enum__:"com.vige.support.InputType",toString:$estr}
	,Email: {_hx_index:5,__enum__:"com.vige.support.InputType",toString:$estr}
	,File: {_hx_index:6,__enum__:"com.vige.support.InputType",toString:$estr}
	,Hidden: {_hx_index:7,__enum__:"com.vige.support.InputType",toString:$estr}
	,Image: {_hx_index:8,__enum__:"com.vige.support.InputType",toString:$estr}
	,Month: {_hx_index:9,__enum__:"com.vige.support.InputType",toString:$estr}
	,Number: {_hx_index:10,__enum__:"com.vige.support.InputType",toString:$estr}
	,Password: {_hx_index:11,__enum__:"com.vige.support.InputType",toString:$estr}
	,Radio: {_hx_index:12,__enum__:"com.vige.support.InputType",toString:$estr}
	,Range: {_hx_index:13,__enum__:"com.vige.support.InputType",toString:$estr}
	,Reset: {_hx_index:14,__enum__:"com.vige.support.InputType",toString:$estr}
	,Search: {_hx_index:15,__enum__:"com.vige.support.InputType",toString:$estr}
	,Submit: {_hx_index:16,__enum__:"com.vige.support.InputType",toString:$estr}
	,Tel: {_hx_index:17,__enum__:"com.vige.support.InputType",toString:$estr}
	,Text: {_hx_index:18,__enum__:"com.vige.support.InputType",toString:$estr}
	,Time: {_hx_index:19,__enum__:"com.vige.support.InputType",toString:$estr}
	,Url: {_hx_index:20,__enum__:"com.vige.support.InputType",toString:$estr}
	,Week: {_hx_index:21,__enum__:"com.vige.support.InputType",toString:$estr}
};
var com_vige_support_Fonts = function(familyName,genericFamily) {
	this.familyName = familyName;
	this.genericFamily = genericFamily;
};
com_vige_support_Fonts.__name__ = "com.vige.support.Fonts";
com_vige_support_Fonts.prototype = {
	getFamilyName: function() {
		return this.familyName;
	}
	,getGenericFamily: function() {
		return this.genericFamily;
	}
	,__class__: com_vige_support_Fonts
};
var com_vige_support_Jsonp = function(url) {
	if(url == null) {
		url = "";
	}
	this.url = url;
};
com_vige_support_Jsonp.__name__ = "com.vige.support.Jsonp";
com_vige_support_Jsonp.requestUrl = function(url,callback,jsonCallbackName) {
	var j = new com_vige_support_Jsonp(url);
	j.onData = callback;
	j.request(jsonCallbackName);
	return j;
};
com_vige_support_Jsonp.prototype = {
	request: function(callbackName) {
		var _gthis = this;
		var name = callbackName != null ? callbackName : "unique_callback_" + com_vige_support_Jsonp._ID++;
		if(this.url.indexOf("?") != -1) {
			this.url += "&callback=" + name;
		} else {
			this.url += "?callback=" + name;
		}
		var script = window.document.createElement("script");
		script.type = "text/javascript";
		script.src = this.url;
		script.id = "jsonp";
		window[name] = function(data) {
			if(_gthis.onData != null) {
				_gthis.onData(data);
			}
			var headerNodes = window.document.getElementsByTagName("head")[0].getElementsByTagName("script");
			var _g = 0;
			var _g1 = headerNodes.length;
			while(_g < _g1) {
				var i = _g++;
				if(headerNodes[i] != null && headerNodes[i].id == "jsonp") {
					window.document.getElementsByTagName("head")[0].getElementsByTagName("script")[i].remove();
				}
			}
			script = null;
			Reflect.deleteField(window,name);
		};
		window.document.getElementsByTagName("head")[0].appendChild(script);
	}
	,__class__: com_vige_support_Jsonp
};
var com_vige_support_StreamConnection = function(url,route) {
	this.socket = new WebSocket(url);
	this.route = route;
};
com_vige_support_StreamConnection.__name__ = "com.vige.support.StreamConnection";
com_vige_support_StreamConnection.prototype = {
	getRoute: function() {
		return this.route;
	}
	,getSocket: function() {
		return this.socket;
	}
	,__class__: com_vige_support_StreamConnection
};
var com_vige_support_StyleManager = function() {
};
com_vige_support_StyleManager.__name__ = "com.vige.support.StyleManager";
com_vige_support_StyleManager.prototype = {
	addStyleToDiv: function(arg) {
		if(arg.type == null) {
			arg.type = com_vige_support_DivType.Other;
		}
		if(arg.size != null) {
			arg.widget.style.minHeight = arg.size.getMinHeight();
			arg.widget.style.minWidth = arg.size.getMinWidth();
			arg.widget.style.height = arg.size.getHeight();
			arg.widget.style.width = arg.size.getWidth();
			arg.widget.style.maxHeight = arg.size.getMaxHeight();
			arg.widget.style.maxWidth = arg.size.getMaxWidth();
		}
		if(arg.color != null) {
			arg.widget.style.backgroundColor = arg.color.getBackgroundColor();
			arg.widget.style.color = arg.color.getColor();
		}
		if(arg.padding != null) {
			arg.widget.style.padding = arg.padding.getPadding();
		}
		if(arg.margin != null) {
			var tmp = arg.margin != null ? arg.margin.getMargin() : com_vige_utils_Margin.all(0.0).getMargin();
			arg.widget.style.margin = tmp;
		}
		if(arg.border != null) {
			switch(arg.border.getSides()._hx_index) {
			case 0:
				var tmp1 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp2 = arg.border.getColor();
				arg.widget.style.borderTop = tmp1 + tmp2;
				break;
			case 1:
				var tmp3 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp4 = arg.border.getColor();
				arg.widget.style.borderRight = tmp3 + tmp4;
				break;
			case 2:
				var tmp5 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp6 = arg.border.getColor();
				arg.widget.style.borderBottom = tmp5 + tmp6;
				break;
			case 3:
				var tmp7 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp8 = arg.border.getColor();
				arg.widget.style.borderLeft = tmp7 + tmp8;
				break;
			case 4:
				var tmp9 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp10 = arg.border.getColor();
				arg.widget.style.border = tmp9 + tmp10;
				break;
			}
			arg.widget.style.borderRadius = arg.border.getCornerRadius();
		}
		if(arg.overflow != null) {
			switch(arg.overflow._hx_index) {
			case 0:
				arg.widget.style.overflow = "visible";
				break;
			case 1:
				arg.widget.style.overflow = "hidden";
				break;
			case 2:
				arg.widget.style.overflow = "scroll";
				break;
			case 3:
				arg.widget.style.overflow = "auto";
				break;
			case 4:
				arg.widget.style.overflow = "initial";
				break;
			case 5:
				arg.widget.style.overflow = "inherit";
				break;
			}
		}
		if(arg.mainAxisAlignment != null) {
			switch(arg.mainAxisAlignment._hx_index) {
			case 0:
				arg.widget.style.placeItems = "start start";
				break;
			case 1:
				arg.widget.style.placeItems = "start center";
				break;
			case 2:
				arg.widget.style.placeItems = "start end";
				break;
			case 3:
				arg.widget.style.placeItems = "center start";
				break;
			case 4:
				arg.widget.style.placeItems = "center center";
				break;
			case 5:
				arg.widget.style.placeItems = "center end";
				break;
			case 6:
				arg.widget.style.placeItems = "end start";
				break;
			case 7:
				arg.widget.style.placeItems = "end center";
				break;
			case 8:
				arg.widget.style.placeItems = "end end";
				break;
			case 9:
				arg.widget.style.placeItems = "stretch";
				break;
			}
		}
		if(arg.type == com_vige_support_DivType.Row) {
			if(arg.crossAxisAlignment != null) {
				switch(arg.crossAxisAlignment._hx_index) {
				case 0:
					arg.widget.style.justifyContent = null;
					break;
				case 1:
					arg.widget.style.justifyContent = "center";
					break;
				case 2:
					arg.widget.style.justifyContent = "flex-start";
					break;
				case 3:
					arg.widget.style.justifyContent = "flex-end";
					break;
				case 4:
					arg.widget.style.justifyContent = "initial";
					break;
				case 5:
					arg.widget.style.justifyContent = "inherit";
					break;
				case 6:
					arg.widget.style.justifyContent = "space-evenly";
					break;
				case 7:
					arg.widget.style.justifyContent = "space-between";
					break;
				case 8:
					arg.widget.style.justifyContent = "space-around";
					break;
				}
			}
		} else if(arg.type == com_vige_support_DivType.Column) {
			if(arg.crossAxisAlignment != null) {
				switch(arg.crossAxisAlignment._hx_index) {
				case 0:
					arg.widget.style.alignContent = "stretch";
					break;
				case 1:
					arg.widget.style.alignContent = "center";
					break;
				case 2:
					arg.widget.style.alignContent = "flex-start";
					break;
				case 3:
					arg.widget.style.alignContent = "flex-end";
					break;
				case 4:
					arg.widget.style.alignContent = "initial";
					break;
				case 5:
					arg.widget.style.alignContent = "inherit";
					break;
				case 6:
					arg.widget.style.alignContent = "space-evenly";
					break;
				case 7:
					arg.widget.style.alignContent = "space-between";
					break;
				case 8:
					arg.widget.style.alignContent = "space-around";
					break;
				}
			}
		}
		if(arg.shadow != null && arg.shadow.length > 0) {
			var joinedString = "";
			var _g = 0;
			var _g1 = arg.shadow.length;
			while(_g < _g1) {
				var i = _g++;
				if(i != 0) {
					joinedString += ", ";
				}
				joinedString += arg.shadow[i].getShadow();
			}
			arg.widget.style.boxShadow = joinedString;
		}
		return arg.widget;
	}
	,addStyleToButton: function(arg) {
		if(arg.size != null) {
			arg.widget.style.minHeight = arg.size.getMinHeight();
			arg.widget.style.minWidth = arg.size.getMinWidth();
			arg.widget.style.height = arg.size.getHeight();
			arg.widget.style.width = arg.size.getWidth();
			arg.widget.style.maxHeight = arg.size.getMaxHeight();
			arg.widget.style.maxWidth = arg.size.getMaxWidth();
		}
		if(arg.color != null) {
			arg.widget.style.backgroundColor = arg.color.getBackgroundColor();
			arg.widget.style.color = arg.color.getColor();
		}
		if(arg.padding != null) {
			arg.widget.style.padding = arg.padding.getPadding();
		}
		if(arg.margin != null) {
			arg.widget.style.margin = arg.margin.getMargin();
		}
		if(arg.overflow != null) {
			switch(arg.overflow._hx_index) {
			case 0:
				arg.widget.style.overflow = "visible";
				break;
			case 1:
				arg.widget.style.overflow = "hidden";
				break;
			case 2:
				arg.widget.style.overflow = "scroll";
				break;
			case 3:
				arg.widget.style.overflow = "auto";
				break;
			case 4:
				arg.widget.style.overflow = "initial";
				break;
			case 5:
				arg.widget.style.overflow = "inherit";
				break;
			}
		}
		if(arg.border != null) {
			switch(arg.border.getSides()._hx_index) {
			case 0:
				var tmp = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp1 = arg.border.getColor();
				arg.widget.style.borderTop = tmp + tmp1;
				break;
			case 1:
				var tmp2 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp3 = arg.border.getColor();
				arg.widget.style.borderRight = tmp2 + tmp3;
				break;
			case 2:
				var tmp4 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp5 = arg.border.getColor();
				arg.widget.style.borderBottom = tmp4 + tmp5;
				break;
			case 3:
				var tmp6 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp7 = arg.border.getColor();
				arg.widget.style.borderLeft = tmp6 + tmp7;
				break;
			case 4:
				var tmp8 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp9 = arg.border.getColor();
				arg.widget.style.border = tmp8 + tmp9;
				break;
			}
			arg.widget.style.borderRadius = arg.border.getCornerRadius();
		}
		if(arg.shadow != null && arg.shadow.length > 0) {
			arg.widget.style.boxShadow = arg.shadow.join(", ");
		}
		return arg.widget;
	}
	,addStyleToAnchor: function(arg) {
		if(arg.size != null) {
			arg.widget.style.minHeight = arg.size.getMinHeight();
			arg.widget.style.minWidth = arg.size.getMinWidth();
			arg.widget.style.height = arg.size.getHeight();
			arg.widget.style.width = arg.size.getWidth();
			arg.widget.style.maxHeight = arg.size.getMaxHeight();
			arg.widget.style.maxWidth = arg.size.getMaxWidth();
		}
		if(arg.color != null) {
			arg.widget.style.backgroundColor = arg.color.getBackgroundColor();
			arg.widget.style.color = arg.color.getColor();
		}
		if(arg.padding != null) {
			arg.widget.style.padding = arg.padding.getPadding();
		}
		if(arg.margin != null) {
			arg.widget.style.margin = arg.margin.getMargin();
		}
		if(arg.overflow != null) {
			switch(arg.overflow._hx_index) {
			case 0:
				arg.widget.style.overflow = "visible";
				break;
			case 1:
				arg.widget.style.overflow = "hidden";
				break;
			case 2:
				arg.widget.style.overflow = "scroll";
				break;
			case 3:
				arg.widget.style.overflow = "auto";
				break;
			case 4:
				arg.widget.style.overflow = "initial";
				break;
			case 5:
				arg.widget.style.overflow = "inherit";
				break;
			}
		}
		if(arg.border != null) {
			switch(arg.border.getSides()._hx_index) {
			case 0:
				var tmp = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp1 = arg.border.getColor();
				arg.widget.style.borderTop = tmp + tmp1;
				break;
			case 1:
				var tmp2 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp3 = arg.border.getColor();
				arg.widget.style.borderRight = tmp2 + tmp3;
				break;
			case 2:
				var tmp4 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp5 = arg.border.getColor();
				arg.widget.style.borderBottom = tmp4 + tmp5;
				break;
			case 3:
				var tmp6 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp7 = arg.border.getColor();
				arg.widget.style.borderLeft = tmp6 + tmp7;
				break;
			case 4:
				var tmp8 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp9 = arg.border.getColor();
				arg.widget.style.border = tmp8 + tmp9;
				break;
			}
			arg.widget.style.borderRadius = arg.border.getCornerRadius();
		}
		if(arg.shadow != null && arg.shadow.length > 0) {
			arg.widget.style.boxShadow = arg.shadow.join(", ");
		}
		return arg.widget;
	}
	,addStyleToImage: function(arg) {
		if(arg.size != null) {
			arg.widget.style.minHeight = arg.size.getMinHeight();
			arg.widget.style.minWidth = arg.size.getMinWidth();
			arg.widget.style.height = arg.size.getHeight();
			arg.widget.style.width = arg.size.getWidth();
			arg.widget.style.maxHeight = arg.size.getMaxHeight();
			arg.widget.style.maxWidth = arg.size.getMaxWidth();
		}
		if(arg.color != null) {
			arg.widget.style.backgroundColor = arg.color.getBackgroundColor();
			arg.widget.style.color = arg.color.getColor();
		}
		if(arg.padding != null) {
			arg.widget.style.padding = arg.padding.getPadding();
		}
		if(arg.margin != null) {
			arg.widget.style.margin = arg.margin.getMargin();
		}
		if(arg.overflow != null) {
			switch(arg.overflow._hx_index) {
			case 0:
				arg.widget.style.overflow = "visible";
				break;
			case 1:
				arg.widget.style.overflow = "hidden";
				break;
			case 2:
				arg.widget.style.overflow = "scroll";
				break;
			case 3:
				arg.widget.style.overflow = "auto";
				break;
			case 4:
				arg.widget.style.overflow = "initial";
				break;
			case 5:
				arg.widget.style.overflow = "inherit";
				break;
			}
		}
		if(arg.border != null) {
			switch(arg.border.getSides()._hx_index) {
			case 0:
				var tmp = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp1 = arg.border.getColor();
				arg.widget.style.borderTop = tmp + tmp1;
				break;
			case 1:
				var tmp2 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp3 = arg.border.getColor();
				arg.widget.style.borderRight = tmp2 + tmp3;
				break;
			case 2:
				var tmp4 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp5 = arg.border.getColor();
				arg.widget.style.borderBottom = tmp4 + tmp5;
				break;
			case 3:
				var tmp6 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp7 = arg.border.getColor();
				arg.widget.style.borderLeft = tmp6 + tmp7;
				break;
			case 4:
				var tmp8 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp9 = arg.border.getColor();
				arg.widget.style.border = tmp8 + tmp9;
				break;
			}
			arg.widget.style.borderRadius = arg.border.getCornerRadius();
		}
		if(arg.shadow != null && arg.shadow.length > 0) {
			arg.widget.style.boxShadow = arg.shadow.join(", ");
		}
		return arg.widget;
	}
	,addStyleToEmbeded: function(arg) {
		if(arg.size != null) {
			arg.widget.style.minHeight = arg.size.getMinHeight();
			arg.widget.style.minWidth = arg.size.getMinWidth();
			arg.widget.style.height = arg.size.getHeight();
			arg.widget.style.width = arg.size.getWidth();
			arg.widget.style.maxHeight = arg.size.getMaxHeight();
			arg.widget.style.maxWidth = arg.size.getMaxWidth();
		}
		if(arg.color != null) {
			arg.widget.style.backgroundColor = arg.color.getBackgroundColor();
			arg.widget.style.color = arg.color.getColor();
		}
		if(arg.padding != null) {
			arg.widget.style.padding = arg.padding.getPadding();
		}
		if(arg.margin != null) {
			var tmp = arg.margin != null ? arg.margin.getMargin() : com_vige_utils_Margin.all(0.0).getMargin();
			arg.widget.style.margin = tmp;
		}
		if(arg.overflow != null) {
			switch(arg.overflow._hx_index) {
			case 0:
				arg.widget.style.overflow = "visible";
				break;
			case 1:
				arg.widget.style.overflow = "hidden";
				break;
			case 2:
				arg.widget.style.overflow = "scroll";
				break;
			case 3:
				arg.widget.style.overflow = "auto";
				break;
			case 4:
				arg.widget.style.overflow = "initial";
				break;
			case 5:
				arg.widget.style.overflow = "inherit";
				break;
			}
		}
		if(arg.border != null) {
			switch(arg.border.getSides()._hx_index) {
			case 0:
				var tmp1 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp2 = arg.border.getColor();
				arg.widget.style.borderTop = tmp1 + tmp2;
				break;
			case 1:
				var tmp3 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp4 = arg.border.getColor();
				arg.widget.style.borderRight = tmp3 + tmp4;
				break;
			case 2:
				var tmp5 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp6 = arg.border.getColor();
				arg.widget.style.borderBottom = tmp5 + tmp6;
				break;
			case 3:
				var tmp7 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp8 = arg.border.getColor();
				arg.widget.style.borderLeft = tmp7 + tmp8;
				break;
			case 4:
				var tmp9 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp10 = arg.border.getColor();
				arg.widget.style.border = tmp9 + tmp10;
				break;
			}
			arg.widget.style.borderRadius = arg.border.getCornerRadius();
		}
		if(arg.mainAxisAlignment != null) {
			switch(arg.mainAxisAlignment._hx_index) {
			case 0:
				arg.widget.style.placeItems = "start start";
				break;
			case 1:
				arg.widget.style.placeItems = "start center";
				break;
			case 2:
				arg.widget.style.placeItems = "start end";
				break;
			case 3:
				arg.widget.style.placeItems = "center start";
				break;
			case 4:
				arg.widget.style.placeItems = "center center";
				break;
			case 5:
				arg.widget.style.placeItems = "center end";
				break;
			case 6:
				arg.widget.style.placeItems = "end start";
				break;
			case 7:
				arg.widget.style.placeItems = "end center";
				break;
			case 8:
				arg.widget.style.placeItems = "end end";
				break;
			case 9:
				arg.widget.style.placeItems = "stretch";
				break;
			}
		}
		if(arg.shadow != null && arg.shadow.length > 0) {
			arg.widget.style.boxShadow = arg.shadow.join(", ");
		}
		return arg.widget;
	}
	,addStyleToInput: function(arg) {
		if(arg.size != null) {
			arg.widget.style.minHeight = arg.size.getMinHeight();
			arg.widget.style.minWidth = arg.size.getMinWidth();
			arg.widget.style.height = arg.size.getHeight();
			arg.widget.style.width = arg.size.getWidth();
			arg.widget.style.maxHeight = arg.size.getMaxHeight();
			arg.widget.style.maxWidth = arg.size.getMaxWidth();
		}
		if(arg.color != null) {
			arg.widget.style.backgroundColor = arg.color.getBackgroundColor();
			arg.widget.style.color = arg.color.getColor();
		}
		if(arg.padding != null) {
			arg.widget.style.padding = arg.padding.getPadding();
		}
		if(arg.margin != null) {
			var tmp = arg.margin != null ? arg.margin.getMargin() : com_vige_utils_Margin.all(0.0).getMargin();
			arg.widget.style.margin = tmp;
		}
		if(arg.overflow != null) {
			switch(arg.overflow._hx_index) {
			case 0:
				arg.widget.style.overflow = "visible";
				break;
			case 1:
				arg.widget.style.overflow = "hidden";
				break;
			case 2:
				arg.widget.style.overflow = "scroll";
				break;
			case 3:
				arg.widget.style.overflow = "auto";
				break;
			case 4:
				arg.widget.style.overflow = "initial";
				break;
			case 5:
				arg.widget.style.overflow = "inherit";
				break;
			}
		}
		if(arg.border != null) {
			switch(arg.border.getSides()._hx_index) {
			case 0:
				var tmp1 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp2 = arg.border.getColor();
				arg.widget.style.borderTop = tmp1 + tmp2;
				break;
			case 1:
				var tmp3 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp4 = arg.border.getColor();
				arg.widget.style.borderRight = tmp3 + tmp4;
				break;
			case 2:
				var tmp5 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp6 = arg.border.getColor();
				arg.widget.style.borderBottom = tmp5 + tmp6;
				break;
			case 3:
				var tmp7 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp8 = arg.border.getColor();
				arg.widget.style.borderLeft = tmp7 + tmp8;
				break;
			case 4:
				var tmp9 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp10 = arg.border.getColor();
				arg.widget.style.border = tmp9 + tmp10;
				break;
			}
			arg.widget.style.borderRadius = arg.border.getCornerRadius();
		}
		if(arg.mainAxisAlignment != null) {
			switch(arg.mainAxisAlignment._hx_index) {
			case 0:
				arg.widget.style.placeItems = "start start";
				break;
			case 1:
				arg.widget.style.placeItems = "start center";
				break;
			case 2:
				arg.widget.style.placeItems = "start end";
				break;
			case 3:
				arg.widget.style.placeItems = "center start";
				break;
			case 4:
				arg.widget.style.placeItems = "center center";
				break;
			case 5:
				arg.widget.style.placeItems = "center end";
				break;
			case 6:
				arg.widget.style.placeItems = "end start";
				break;
			case 7:
				arg.widget.style.placeItems = "end center";
				break;
			case 8:
				arg.widget.style.placeItems = "end end";
				break;
			case 9:
				arg.widget.style.placeItems = "stretch";
				break;
			}
		}
		if(arg.shadow != null && arg.shadow.length > 0) {
			arg.widget.style.boxShadow = arg.shadow.join(", ");
		}
		return arg.widget;
	}
	,__class__: com_vige_support_StyleManager
};
var com_vige_utils_CornerRadius = function(arg) {
	this.top = arg.top;
	this.right = arg.right;
	this.bottom = arg.bottom;
	this.left = arg.left;
};
com_vige_utils_CornerRadius.__name__ = "com.vige.utils.CornerRadius";
com_vige_utils_CornerRadius.fromTRBL = function(top,right,bottom,left) {
	return new com_vige_utils_CornerRadius({ top : top, right : right, bottom : bottom, left : left});
};
com_vige_utils_CornerRadius.all = function(radius) {
	return new com_vige_utils_CornerRadius({ top : radius, right : radius, bottom : radius, left : radius});
};
com_vige_utils_CornerRadius.prototype = {
	getCornerRadius: function() {
		return this.top + "px " + this.right + "px " + this.bottom + "px " + this.left + "px";
	}
	,__class__: com_vige_utils_CornerRadius
};
var com_vige_utils_Border = function(arg) {
	this.style = arg.style != null ? arg.style : com_vige_support_BorderStyle.Solid;
	this.width = arg.width != null ? arg.width : 5;
	this.color = arg.color != null ? arg.color : -16777216;
	this.cornerRadius = arg.cornerRadius != null ? arg.cornerRadius : com_vige_utils_CornerRadius.all(0.0);
	this.sides = arg.sides != null ? arg.sides : com_vige_support_BorderSides.All;
};
com_vige_utils_Border.__name__ = "com.vige.utils.Border";
com_vige_utils_Border.prototype = {
	getStyle: function() {
		var styleString = "";
		switch(this.style._hx_index) {
		case 0:
			styleString = "dotted";
			break;
		case 1:
			styleString = "dashed";
			break;
		case 2:
			styleString = "solid";
			break;
		case 3:
			styleString = "double";
			break;
		case 4:
			styleString = "groove";
			break;
		case 5:
			styleString = "ridge";
			break;
		case 6:
			styleString = "inset";
			break;
		case 7:
			styleString = "outset";
			break;
		case 8:
			styleString = "none";
			break;
		case 9:
			styleString = "hidden";
			break;
		}
		return styleString;
	}
	,getWidth: function() {
		return Std.string(this.width) + "px";
	}
	,getColor: function() {
		return "rgba(" + (this.color >> 16 & 255) + ", " + (this.color >> 8 & 255) + ", " + (this.color & 255) + ", " + (this.color >> 24 & 255) + ")";
	}
	,getCornerRadius: function() {
		return this.cornerRadius.getCornerRadius();
	}
	,getSides: function() {
		return this.sides;
	}
	,__class__: com_vige_utils_Border
};
var com_vige_utils_Color = function(arg) {
	this.color = arg.color;
	this.backgroundColor = arg.backgroundColor;
};
com_vige_utils_Color.__name__ = "com.vige.utils.Color";
com_vige_utils_Color.prototype = {
	getColor: function() {
		if(this.color == null) {
			return "";
		}
		return "rgba(" + (this.color >> 16 & 255) + ", " + (this.color >> 8 & 255) + ", " + (this.color & 255) + ", " + (this.color >> 24 & 255) + ")";
	}
	,getBackgroundColor: function() {
		if(this.backgroundColor == null) {
			return "";
		}
		return "rgba(" + (this.backgroundColor >> 16 & 255) + ", " + (this.backgroundColor >> 8 & 255) + ", " + (this.backgroundColor & 255) + ", " + (this.backgroundColor >> 24 & 255) / 255 + ")";
	}
	,__class__: com_vige_utils_Color
};
var com_vige_utils__$Colors_Colors_$Impl_$ = {};
com_vige_utils__$Colors_Colors_$Impl_$.__name__ = "com.vige.utils._Colors.Colors_Impl_";
com_vige_utils__$Colors_Colors_$Impl_$.__properties__ = {set_bf:"set_bf",get_bf:"get_bf",set_gf:"set_gf",get_gf:"get_gf",set_rf:"set_rf",get_rf:"get_rf",set_af:"set_af",get_af:"get_af",set_bi:"set_bi",get_bi:"get_bi",set_gi:"set_gi",get_gi:"get_gi",set_ri:"set_ri",get_ri:"get_ri",set_ai:"set_ai",get_ai:"get_ai"};
com_vige_utils__$Colors_Colors_$Impl_$.fromString = function(rgba) {
	var this1 = Std.parseInt("0xff" + HxOverrides.substr(rgba,1,null));
	return this1;
};
com_vige_utils__$Colors_Colors_$Impl_$.fromRGBAi = function(r,g,b,a) {
	var this1 = r << 16 | g << 8 | b | a << 24;
	return this1;
};
com_vige_utils__$Colors_Colors_$Impl_$.fromRGBAf = function(r,g,b,a) {
	var this1 = (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0) | (a * 255 | 0) << 24;
	return this1;
};
com_vige_utils__$Colors_Colors_$Impl_$._new = function(rgba) {
	var this1 = rgba;
	return this1;
};
com_vige_utils__$Colors_Colors_$Impl_$.get_ai = function(this1) {
	return this1 >> 24 & 255;
};
com_vige_utils__$Colors_Colors_$Impl_$.set_ai = function(this1,ai) {
	var this2 = (this1 >> 16 & 255) << 16 | (this1 >> 8 & 255) << 8 | this1 & 255 | ai << 24;
	this1 = this2;
	return ai;
};
com_vige_utils__$Colors_Colors_$Impl_$.get_ri = function(this1) {
	return this1 >> 16 & 255;
};
com_vige_utils__$Colors_Colors_$Impl_$.set_ri = function(this1,ri) {
	var this2 = ri << 16 | (this1 >> 8 & 255) << 8 | this1 & 255 | (this1 >> 24 & 255) << 24;
	this1 = this2;
	return ri;
};
com_vige_utils__$Colors_Colors_$Impl_$.get_gi = function(this1) {
	return this1 >> 8 & 255;
};
com_vige_utils__$Colors_Colors_$Impl_$.set_gi = function(this1,gi) {
	var this2 = (this1 >> 16 & 255) << 16 | gi << 8 | this1 & 255 | (this1 >> 24 & 255) << 24;
	this1 = this2;
	return gi;
};
com_vige_utils__$Colors_Colors_$Impl_$.get_bi = function(this1) {
	return this1 & 255;
};
com_vige_utils__$Colors_Colors_$Impl_$.set_bi = function(this1,bi) {
	var this2 = (this1 >> 16 & 255) << 16 | (this1 >> 8 & 255) << 8 | bi | (this1 >> 24 & 255) << 24;
	this1 = this2;
	return bi;
};
com_vige_utils__$Colors_Colors_$Impl_$.get_af = function(this1) {
	return (this1 >> 24 & 255) / 255;
};
com_vige_utils__$Colors_Colors_$Impl_$.set_af = function(this1,af) {
	var this2 = ((this1 >> 16 & 255) / 255 * 255 | 0) << 16 | ((this1 >> 8 & 255) / 255 * 255 | 0) << 8 | ((this1 & 255) / 255 * 255 | 0) | (af * 255 | 0) << 24;
	this1 = this2;
	return af;
};
com_vige_utils__$Colors_Colors_$Impl_$.get_rf = function(this1) {
	return (this1 >> 16 & 255) / 255;
};
com_vige_utils__$Colors_Colors_$Impl_$.set_rf = function(this1,rf) {
	var this2 = (rf * 255 | 0) << 16 | ((this1 >> 8 & 255) / 255 * 255 | 0) << 8 | ((this1 & 255) / 255 * 255 | 0) | ((this1 >> 24 & 255) / 255 * 255 | 0) << 24;
	this1 = this2;
	return rf;
};
com_vige_utils__$Colors_Colors_$Impl_$.get_gf = function(this1) {
	return (this1 >> 8 & 255) / 255;
};
com_vige_utils__$Colors_Colors_$Impl_$.set_gf = function(this1,gf) {
	var this2 = ((this1 >> 16 & 255) / 255 * 255 | 0) << 16 | (gf * 255 | 0) << 8 | ((this1 & 255) / 255 * 255 | 0) | ((this1 >> 24 & 255) / 255 * 255 | 0) << 24;
	this1 = this2;
	return gf;
};
com_vige_utils__$Colors_Colors_$Impl_$.get_bf = function(this1) {
	return (this1 & 255) / 255;
};
com_vige_utils__$Colors_Colors_$Impl_$.set_bf = function(this1,bf) {
	var this2 = ((this1 >> 16 & 255) / 255 * 255 | 0) << 16 | ((this1 >> 8 & 255) / 255 * 255 | 0) << 8 | (bf * 255 | 0) | ((this1 >> 24 & 255) / 255 * 255 | 0) << 24;
	this1 = this2;
	return bf;
};
var com_vige_utils_Margin = function(arg) {
	this.top = arg.top;
	this.right = arg.right;
	this.bottom = arg.bottom;
	this.left = arg.left;
};
com_vige_utils_Margin.__name__ = "com.vige.utils.Margin";
com_vige_utils_Margin.fromTRBL = function(top,right,bottom,left) {
	return new com_vige_utils_Margin({ top : top, right : right, bottom : bottom, left : left});
};
com_vige_utils_Margin.all = function(margin) {
	return new com_vige_utils_Margin({ top : margin, right : margin, bottom : margin, left : margin});
};
com_vige_utils_Margin.prototype = {
	getMargin: function() {
		return this.top + "px " + this.right + "px " + this.bottom + "px " + this.left + "px";
	}
	,__class__: com_vige_utils_Margin
};
var com_vige_utils_Padding = function(arg) {
	this.top = arg.top;
	this.right = arg.right;
	this.bottom = arg.bottom;
	this.left = arg.left;
};
com_vige_utils_Padding.__name__ = "com.vige.utils.Padding";
com_vige_utils_Padding.fromTRBL = function(top,right,bottom,left) {
	return new com_vige_utils_Padding({ top : top, right : right, bottom : bottom, left : left});
};
com_vige_utils_Padding.all = function(padding) {
	return new com_vige_utils_Padding({ top : padding, right : padding, bottom : padding, left : padding});
};
com_vige_utils_Padding.prototype = {
	getPadding: function() {
		return this.top + "px " + this.right + "px " + this.bottom + "px " + this.left + "px";
	}
	,__class__: com_vige_utils_Padding
};
var com_vige_utils_Shadow = function(arg) {
	this.horizontal = arg.horizontal != null ? arg.horizontal : "";
	this.vertical = arg.vertical != null ? arg.vertical : "";
	this.blur = arg.blur != null ? arg.blur : "";
	this.spread = arg.spread != null ? arg.spread + " " : "0px ";
	this.color = arg.color;
};
com_vige_utils_Shadow.__name__ = "com.vige.utils.Shadow";
com_vige_utils_Shadow.prototype = {
	getShadow: function() {
		if(this.color != null) {
			return this.horizontal + " " + this.vertical + " " + this.blur + " " + this.spread + "" + this.color.getBackgroundColor();
		} else {
			return "";
		}
	}
	,__class__: com_vige_utils_Shadow
};
var com_vige_utils_Size = function(arg) {
	this.minHeight = arg.minHeight != null ? arg.minHeight : Std.string(-Infinity) + "px";
	this.minWidth = arg.minWidth != null ? arg.minWidth : Std.string(-Infinity) + "px";
	this.height = arg.height != null ? arg.height : Std.string(-Infinity) + "px";
	this.width = arg.width != null ? arg.width : Std.string(-Infinity) + "px";
	this.maxHeight = arg.maxHeight != null ? arg.maxHeight : Std.string(-Infinity) + "px";
	this.maxWidth = arg.maxWidth != null ? arg.maxWidth : Std.string(-Infinity) + "px";
};
com_vige_utils_Size.__name__ = "com.vige.utils.Size";
com_vige_utils_Size.prototype = {
	getMinHeight: function() {
		return this.minHeight;
	}
	,getMinWidth: function() {
		return this.minWidth;
	}
	,getHeight: function() {
		return this.height;
	}
	,getWidth: function() {
		return this.width;
	}
	,getMaxHeight: function() {
		return this.maxHeight;
	}
	,getMaxWidth: function() {
		return this.maxWidth;
	}
	,__class__: com_vige_utils_Size
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = "haxe.CallStack";
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			var fileName = site.getFileName();
			var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
				fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				var column = Std.parseInt(rie10.matched(4));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	__class__: haxe_ds_IntMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var keys = this.arrayKeys();
		var _g = 0;
		var _g1 = keys.length;
		while(_g < _g1) {
			var i = _g++;
			var k = keys[i];
			s_b += k == null ? "null" : "" + k;
			s_b += " => ";
			s_b += Std.string(Std.string(__map_reserved[k] != null ? this.getReserved(k) : this.h[k]));
			if(i < keys.length - 1) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
haxe_http_HttpBase.__name__ = "haxe.http.HttpBase";
haxe_http_HttpBase.prototype = {
	setHeader: function(name,value) {
		var _g = 0;
		var _g1 = this.headers.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.headers[i].name == name) {
				this.headers[i] = { name : name, value : value};
				return;
			}
		}
		this.headers.push({ name : name, value : value});
	}
	,setPostData: function(data) {
		this.postData = data;
		this.postBytes = null;
	}
	,onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return !Reflect.compareMethods($bind(this,this.onData),this.emptyOnData);
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
	,__class__: haxe_http_HttpBase
	,__properties__: {get_responseData:"get_responseData"}
};
var haxe_http_HttpNodeJs = function(url) {
	haxe_http_HttpBase.call(this,url);
};
haxe_http_HttpNodeJs.__name__ = "haxe.http.HttpNodeJs";
haxe_http_HttpNodeJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpNodeJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		var parsedUrl = js_node_Url.parse(this.url);
		var secure = parsedUrl.protocol == "https:";
		var host = parsedUrl.hostname;
		var path = parsedUrl.path;
		var port = parsedUrl.port != null ? Std.parseInt(parsedUrl.port) : secure ? 443 : 80;
		var h = { };
		var _g = 0;
		var _g1 = this.headers;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var arr = Reflect.field(h,i.name);
			if(arr == null) {
				arr = [];
				h[i.name] = arr;
			}
			arr.push(i.value);
		}
		if(this.postData != null || this.postBytes != null) {
			post = true;
		}
		var uri = null;
		var _g2 = 0;
		var _g3 = this.params;
		while(_g2 < _g3.length) {
			var p = _g3[_g2];
			++_g2;
			if(uri == null) {
				uri = "";
			} else {
				uri += "&";
			}
			var s = p.name;
			var uri1 = encodeURIComponent(s) + "=";
			var s1 = p.value;
			uri += uri1 + encodeURIComponent(s1);
		}
		var question = path.split("?").length <= 1;
		if(uri != null) {
			path += (question ? "?" : "&") + uri;
		}
		var opts = { protocol : parsedUrl.protocol, hostname : host, port : port, method : post ? "POST" : "GET", path : path, headers : h};
		var httpResponse = function(res) {
			res.setEncoding("binary");
			var s2 = res.statusCode;
			if(s2 != null) {
				_gthis.onStatus(s2);
			}
			var data = [];
			res.on("data",function(chunk) {
				var httpResponse1 = js_node_buffer_Buffer.from(chunk,"binary");
				data.push(httpResponse1);
			});
			res.on("end",function(_) {
				var buf = data.length == 1 ? data[0] : js_node_buffer_Buffer.concat(data);
				var httpResponse2 = buf.buffer.slice(buf.byteOffset,buf.byteOffset + buf.byteLength);
				_gthis.responseBytes = haxe_io_Bytes.ofData(httpResponse2);
				_gthis.req = null;
				if(s2 != null && s2 >= 200 && s2 < 400) {
					_gthis.success(_gthis.responseBytes);
				} else {
					_gthis.onError("Http Error #" + s2);
				}
			});
		};
		this.req = secure ? js_node_Https.request(opts,httpResponse) : js_node_Http.request(opts,httpResponse);
		if(post) {
			if(this.postData != null) {
				this.req.write(this.postData);
			} else if(this.postBytes != null) {
				this.req.setHeader("Content-Length","" + this.postBytes.length);
				this.req.write(js_node_buffer_Buffer.from(this.postBytes.b.bufferValue));
			}
		}
		this.req.end();
	}
	,__class__: haxe_http_HttpNodeJs
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_rtti_Meta = function() { };
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
			}
			throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input2 = StringTools.trim(commentContent);
			this.output.b += Std.string(input2);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			switch(child1.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(child1.nodeType));
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var js_node_Http = require("http");
var js_node_Https = require("https");
var js_node__$KeyValue_KeyValue_$Impl_$ = {};
js_node__$KeyValue_KeyValue_$Impl_$.__name__ = "js.node._KeyValue.KeyValue_Impl_";
js_node__$KeyValue_KeyValue_$Impl_$.__properties__ = {get_value:"get_value",get_key:"get_key"};
js_node__$KeyValue_KeyValue_$Impl_$.get_key = function(this1) {
	return this1[0];
};
js_node__$KeyValue_KeyValue_$Impl_$.get_value = function(this1) {
	return this1[1];
};
var js_node_Url = require("url");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_stream__$Writable_WritableNewOptionsAdapter_$Impl_$ = {};
js_node_stream__$Writable_WritableNewOptionsAdapter_$Impl_$.__name__ = "js.node.stream._Writable.WritableNewOptionsAdapter_Impl_";
js_node_stream__$Writable_WritableNewOptionsAdapter_$Impl_$.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url__$URLSearchParams_URLSearchParamsEntry_$Impl_$ = {};
js_node_url__$URLSearchParams_URLSearchParamsEntry_$Impl_$.__name__ = "js.node.url._URLSearchParams.URLSearchParamsEntry_Impl_";
js_node_url__$URLSearchParams_URLSearchParamsEntry_$Impl_$.__properties__ = {get_value:"get_value",get_name:"get_name"};
js_node_url__$URLSearchParams_URLSearchParamsEntry_$Impl_$._new = function(name,value) {
	var this1 = [name,value];
	return this1;
};
js_node_url__$URLSearchParams_URLSearchParamsEntry_$Impl_$.get_name = function(this1) {
	return this1[0];
};
js_node_url__$URLSearchParams_URLSearchParamsEntry_$Impl_$.get_value = function(this1) {
	return this1[1];
};
var massive_haxe_Exception = function(message,info) {
	this.message = message;
	this.info = info;
	this.type = massive_haxe_util_ReflectUtil.here({ fileName : "massive/haxe/Exception.hx", lineNumber : 70, className : "massive.haxe.Exception", methodName : "new"}).className;
};
massive_haxe_Exception.__name__ = "massive.haxe.Exception";
massive_haxe_Exception.prototype = {
	toString: function() {
		var str = this.type + ": " + this.message;
		if(this.info != null) {
			str += " at " + this.info.className + "#" + this.info.methodName + " (" + this.info.lineNumber + ")";
		}
		return str;
	}
	,__class__: massive_haxe_Exception
};
var massive_haxe_util_ReflectUtil = function() { };
massive_haxe_util_ReflectUtil.__name__ = "massive.haxe.util.ReflectUtil";
massive_haxe_util_ReflectUtil.here = function(info) {
	return info;
};
var massive_munit_Assert = function() { };
massive_munit_Assert.__name__ = "massive.munit.Assert";
massive_munit_Assert.isTrue = function(value,message,info) {
	massive_munit_Assert.assertionCount++;
	if(value) {
		return;
	}
	if(message == null) {
		message = "Expected TRUE but was [" + (value == null ? "null" : "" + value) + "]";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.isFalse = function(value,message,info) {
	massive_munit_Assert.assertionCount++;
	if(!value) {
		return;
	}
	if(message == null) {
		message = "Expected FALSE but was [" + (value == null ? "null" : "" + value) + "]";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.isNull = function(value,message,info) {
	massive_munit_Assert.assertionCount++;
	if(value == null) {
		return;
	}
	if(message == null) {
		message = "Value [" + Std.string(value) + "] was not NULL";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.isNotNull = function(value,message,info) {
	massive_munit_Assert.assertionCount++;
	if(value != null) {
		return;
	}
	if(message == null) {
		message = "Value [" + Std.string(value) + "] was NULL";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.isNaN = function(value,message,info) {
	massive_munit_Assert.assertionCount++;
	if(isNaN(value)) {
		return;
	}
	if(message == null) {
		message = "Value [" + value + "]  was not NaN";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.isNotNaN = function(value,message,info) {
	massive_munit_Assert.assertionCount++;
	if(!isNaN(value)) {
		return;
	}
	if(message == null) {
		message = "Value [" + value + "] was NaN";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.isType = function(value,type,message,info) {
	massive_munit_Assert.assertionCount++;
	if(js_Boot.__instanceof(value,type)) {
		return;
	}
	if(message == null) {
		message = "Value [" + Std.string(value) + "] was not of type: " + type.__name__;
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.isNotType = function(value,type,message,info) {
	massive_munit_Assert.assertionCount++;
	if(!js_Boot.__instanceof(value,type)) {
		return;
	}
	if(message == null) {
		message = "Value [" + Std.string(value) + "] was of type: " + type.__name__;
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.areEqual = function(expected,actual,message,info) {
	massive_munit_Assert.assertionCount++;
	var a = expected;
	var b = actual;
	var tmp;
	var _g = Type.typeof(a);
	switch(_g._hx_index) {
	case 5:
		tmp = Reflect.compareMethods(a,b);
		break;
	case 7:
		var _g1 = _g.e;
		tmp = Type.enumEq(a,b);
		break;
	default:
		tmp = ((a) === b);
	}
	if(tmp) {
		return;
	}
	if(message == null) {
		message = "Value [" + Std.string(actual) + "] was not equal to expected value [" + Std.string(expected) + "]";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.areNotEqual = function(expected,actual,message,info) {
	massive_munit_Assert.assertionCount++;
	var a = expected;
	var b = actual;
	var tmp;
	var _g = Type.typeof(a);
	switch(_g._hx_index) {
	case 5:
		tmp = Reflect.compareMethods(a,b);
		break;
	case 7:
		var _g1 = _g.e;
		tmp = Type.enumEq(a,b);
		break;
	default:
		tmp = ((a) === b);
	}
	if(!tmp) {
		return;
	}
	if(message == null) {
		message = "Value [" + Std.string(actual) + "] was equal to value [" + Std.string(expected) + "]";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.areSame = function(expected,actual,message,info) {
	massive_munit_Assert.assertionCount++;
	if(expected == actual) {
		return;
	}
	if(message == null) {
		message = "Value [" + Std.string(actual) + "] was not the same as expected value [" + Std.string(expected) + "]";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.areNotSame = function(expected,actual,message,info) {
	massive_munit_Assert.assertionCount++;
	if(expected != actual) {
		return;
	}
	if(message == null) {
		message = "Value [" + Std.string(actual) + "] was the same as expected value [" + Std.string(expected) + "]";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.doesMatch = function(string,regexp,message,info) {
	massive_munit_Assert.assertionCount++;
	if(regexp.match(string)) {
		return;
	}
	if(message == null) {
		message = "Value [" + string + "] was expected to match [" + Std.string(regexp) + "]";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.doesNotMatch = function(string,regexp,message,info) {
	massive_munit_Assert.assertionCount++;
	if(!regexp.match(string)) {
		return;
	}
	if(message == null) {
		message = "Value [" + string + "] was expected to not match [" + Std.string(regexp) + "], and matched at [" + regexp.matchedPos().pos + "]";
	}
	massive_munit_Assert.fail(message,info);
};
massive_munit_Assert.throws = function(expectedType,code,info) {
	try {
		code();
		massive_munit_Assert.fail("Expected exception wasn't thrown!",info);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		if(js_Boot.__instanceof(e1,expectedType)) {
			return e1;
		}
		var tmp = "Expected exception of type " + expectedType.__name__ + " but got ";
		var c = js_Boot.getClass(e1);
		massive_munit_Assert.fail(tmp + c.__name__ + ": " + Std.string(e1),{ fileName : "massive/munit/Assert.hx", lineNumber : 287, className : "massive.munit.Assert", methodName : "throws"});
	}
	return null;
};
massive_munit_Assert.fail = function(message,info) {
	throw new js__$Boot_HaxeError(new massive_munit_AssertionException(message,info));
};
massive_munit_Assert.equals = function(a,b) {
	var _g = Type.typeof(a);
	switch(_g._hx_index) {
	case 5:
		return Reflect.compareMethods(a,b);
	case 7:
		var _g1 = _g.e;
		return Type.enumEq(a,b);
	default:
		return ((a) === b);
	}
};
var massive_munit_MUnitException = function(message,info) {
	massive_haxe_Exception.call(this,message,info);
	this.type = massive_haxe_util_ReflectUtil.here({ fileName : "massive/munit/MUnitException.hx", lineNumber : 52, className : "massive.munit.MUnitException", methodName : "new"}).className;
};
massive_munit_MUnitException.__name__ = "massive.munit.MUnitException";
massive_munit_MUnitException.__super__ = massive_haxe_Exception;
massive_munit_MUnitException.prototype = $extend(massive_haxe_Exception.prototype,{
	__class__: massive_munit_MUnitException
});
var massive_munit_AssertionException = function(msg,info) {
	massive_munit_MUnitException.call(this,msg,info);
	this.type = massive_haxe_util_ReflectUtil.here({ fileName : "massive/munit/AssertionException.hx", lineNumber : 51, className : "massive.munit.AssertionException", methodName : "new"}).className;
};
massive_munit_AssertionException.__name__ = "massive.munit.AssertionException";
massive_munit_AssertionException.__super__ = massive_munit_MUnitException;
massive_munit_AssertionException.prototype = $extend(massive_munit_MUnitException.prototype,{
	__class__: massive_munit_AssertionException
});
var massive_munit_ITestResultClient = function() { };
massive_munit_ITestResultClient.__name__ = "massive.munit.ITestResultClient";
massive_munit_ITestResultClient.__isInterface__ = true;
massive_munit_ITestResultClient.prototype = {
	__class__: massive_munit_ITestResultClient
	,__properties__: {set_completionHandler:"set_completionHandler",get_completionHandler:"get_completionHandler"}
};
var massive_munit_IAdvancedTestResultClient = function() { };
massive_munit_IAdvancedTestResultClient.__name__ = "massive.munit.IAdvancedTestResultClient";
massive_munit_IAdvancedTestResultClient.__isInterface__ = true;
massive_munit_IAdvancedTestResultClient.__interfaces__ = [massive_munit_ITestResultClient];
massive_munit_IAdvancedTestResultClient.prototype = {
	__class__: massive_munit_IAdvancedTestResultClient
};
var massive_munit_ICoverageTestResultClient = function() { };
massive_munit_ICoverageTestResultClient.__name__ = "massive.munit.ICoverageTestResultClient";
massive_munit_ICoverageTestResultClient.__isInterface__ = true;
massive_munit_ICoverageTestResultClient.__interfaces__ = [massive_munit_IAdvancedTestResultClient];
massive_munit_ICoverageTestResultClient.prototype = {
	__class__: massive_munit_ICoverageTestResultClient
};
var massive_munit_TestClassHelper = function(type,isDebug) {
	if(isDebug == null) {
		isDebug = false;
	}
	this.index = 0;
	this.tests = [];
	this.type = type;
	this.isDebug = isDebug;
	this.className = type.__name__;
	this.beforeClass = massive_munit_TestClassHelper.nullFunc;
	this.afterClass = massive_munit_TestClassHelper.nullFunc;
	this.before = massive_munit_TestClassHelper.nullFunc;
	this.after = massive_munit_TestClassHelper.nullFunc;
	this.parse(type);
};
massive_munit_TestClassHelper.__name__ = "massive.munit.TestClassHelper";
massive_munit_TestClassHelper.nullFunc = function() {
};
massive_munit_TestClassHelper.prototype = {
	hasNext: function() {
		return this.index < this.tests.length;
	}
	,next: function() {
		if(this.hasNext()) {
			return this.tests[this.index++];
		} else {
			return null;
		}
	}
	,current: function() {
		if(this.index <= 0) {
			return this.tests[0];
		} else {
			return this.tests[this.index - 1];
		}
	}
	,parse: function(type) {
		this.test = Object.create(type.prototype);
		var inherintanceChain = this.getInheritanceChain(type);
		var fieldMeta = this.collateFieldMeta(inherintanceChain);
		this.scanForTests(fieldMeta);
		this.tests.sort($bind(this,this.sortTestsByName));
	}
	,getInheritanceChain: function(clazz) {
		var inherintanceChain = [clazz];
		while(true) {
			clazz = clazz.__super__;
			if(!(clazz != null)) {
				break;
			}
			inherintanceChain.push(clazz);
		}
		return inherintanceChain;
	}
	,collateFieldMeta: function(inherintanceChain) {
		var meta = { };
		var i = inherintanceChain.length;
		while(i-- > 0) {
			var clazz = inherintanceChain[i];
			var newMeta = haxe_rtti_Meta.getFields(clazz);
			var markedFieldNames = Reflect.fields(newMeta);
			var _g = 0;
			while(_g < markedFieldNames.length) {
				var fieldName = markedFieldNames[_g];
				++_g;
				var recordedFieldTags = Reflect.field(meta,fieldName);
				var newFieldTags = Reflect.field(newMeta,fieldName);
				var newTagNames = Reflect.fields(newFieldTags);
				if(recordedFieldTags == null) {
					var tagsCopy = { };
					var _g1 = 0;
					while(_g1 < newTagNames.length) {
						var tagName = newTagNames[_g1];
						++_g1;
						tagsCopy[tagName] = Reflect.field(newFieldTags,tagName);
					}
					meta[fieldName] = tagsCopy;
				} else {
					var ignored = false;
					var _g2 = 0;
					while(_g2 < newTagNames.length) {
						var tagName1 = newTagNames[_g2];
						++_g2;
						if(tagName1 == "Ignore") {
							ignored = true;
						}
						if(!ignored && (tagName1 == "Test" || tagName1 == "AsyncTest") && Object.prototype.hasOwnProperty.call(recordedFieldTags,"Ignore")) {
							Reflect.deleteField(recordedFieldTags,"Ignore");
						}
						var tagValue = Reflect.field(newFieldTags,tagName1);
						recordedFieldTags[tagName1] = tagValue;
					}
				}
			}
		}
		return meta;
	}
	,scanForTests: function(fieldMeta) {
		var fieldNames = Reflect.fields(fieldMeta);
		var _g = 0;
		while(_g < fieldNames.length) {
			var fieldName = fieldNames[_g];
			++_g;
			var f = Reflect.field(this.test,fieldName);
			if(!Reflect.isFunction(f)) {
				continue;
			}
			var funcMeta = Reflect.field(fieldMeta,fieldName);
			this.searchForMatchingTags(fieldName,f,funcMeta);
		}
	}
	,searchForMatchingTags: function(fieldName,func,funcMeta) {
		var _g = 0;
		var _g1 = massive_munit_TestClassHelper.META_TAGS;
		while(_g < _g1.length) {
			var tag = _g1[_g];
			++_g;
			if(!Object.prototype.hasOwnProperty.call(funcMeta,tag)) {
				continue;
			}
			var args = Reflect.field(funcMeta,tag);
			var description = args != null ? args[0] : "";
			var isAsync = args != null && description == "Async";
			var isIgnored = Object.prototype.hasOwnProperty.call(funcMeta,"Ignore");
			if(isAsync) {
				description = "";
			} else if(isIgnored) {
				args = Reflect.field(funcMeta,"Ignore");
				description = args != null ? args[0] : "";
			}
			switch(tag) {
			case "After":
				this.after = func;
				break;
			case "AfterClass":
				this.afterClass = func;
				break;
			case "AsyncTest":
				if(!this.isDebug) {
					this.addTest(fieldName,func,this.test,true,isIgnored,description);
				}
				break;
			case "Before":
				this.before = func;
				break;
			case "BeforeClass":
				this.beforeClass = func;
				break;
			case "Test":
				if(!this.isDebug) {
					this.addTest(fieldName,func,this.test,isAsync,isIgnored,description);
				}
				break;
			case "TestDebug":
				if(this.isDebug) {
					this.addTest(fieldName,func,this.test,isAsync,isIgnored,description);
				}
				break;
			}
		}
	}
	,addTest: function(field,testFunction,testInstance,isAsync,isIgnored,description) {
		var result = new massive_munit_TestResult();
		result.async = isAsync;
		result.ignore = isIgnored;
		result.className = this.className;
		result.description = description;
		result.name = field;
		this.tests.push({ scope : testInstance, test : testFunction, result : result});
	}
	,sortTestsByName: function(x,y) {
		var xName = x.result.name;
		var yName = y.result.name;
		if(xName == yName) {
			return 0;
		}
		if(xName > yName) {
			return 1;
		}
		return -1;
	}
	,__class__: massive_munit_TestClassHelper
};
var massive_munit_TestResult = function() {
	this.ignore = false;
	this.async = false;
	this.description = "";
	this.className = "";
	this.name = "";
	this.executionTime = 0.0;
	this.passed = false;
};
massive_munit_TestResult.__name__ = "massive.munit.TestResult";
massive_munit_TestResult.prototype = {
	get_location: function() {
		if(this.name == "" && this.className == "") {
			return "";
		} else {
			return this.className + "#" + this.name;
		}
	}
	,get_type: function() {
		if(this.error != null) {
			return "ERROR";
		}
		if(this.failure != null) {
			return "FAIL";
		}
		if(this.ignore) {
			return "IGNORE";
		}
		if(this.passed) {
			return "PASS";
		}
		return "UNKNOWN";
	}
	,__class__: massive_munit_TestResult
	,__properties__: {get_type:"get_type",get_location:"get_location"}
};
var massive_munit_async_IAsyncDelegateObserver = function() { };
massive_munit_async_IAsyncDelegateObserver.__name__ = "massive.munit.async.IAsyncDelegateObserver";
massive_munit_async_IAsyncDelegateObserver.__isInterface__ = true;
massive_munit_async_IAsyncDelegateObserver.prototype = {
	__class__: massive_munit_async_IAsyncDelegateObserver
};
var massive_munit_TestRunner = function(resultClient) {
	this.clients = [];
	this.running = false;
	this.addResultClient(resultClient);
	this.set_asyncFactory(new massive_munit_async_AsyncFactory(this));
	this.isDebug = false;
};
massive_munit_TestRunner.__name__ = "massive.munit.TestRunner";
massive_munit_TestRunner.__interfaces__ = [massive_munit_async_IAsyncDelegateObserver];
massive_munit_TestRunner.tryCallMethod = function(o,func,args) {
	if(Reflect.compareMethods(func,massive_munit_TestClassHelper.nullFunc)) {
		return null;
	}
	return func.apply(o,args);
};
massive_munit_TestRunner.prototype = {
	get_clientCount: function() {
		return this.clients.length;
	}
	,set_asyncFactory: function(value) {
		if(value == this.asyncFactory) {
			return value;
		}
		if(this.running) {
			throw new js__$Boot_HaxeError(new massive_munit_MUnitException("Can't change AsyncFactory while tests are running",{ fileName : "massive/munit/TestRunner.hx", lineNumber : 120, className : "massive.munit.TestRunner", methodName : "set_asyncFactory"}));
		}
		value.observer = this;
		return this.asyncFactory = value;
	}
	,addResultClient: function(resultClient) {
		var _g = 0;
		var _g1 = this.clients;
		while(_g < _g1.length) {
			var client = _g1[_g];
			++_g;
			if(client == resultClient) {
				return;
			}
		}
		resultClient.set_completionHandler($bind(this,this.clientCompletionHandler));
		this.clients.push(resultClient);
	}
	,debug: function(testSuiteClasses) {
		this.isDebug = true;
		this.run(testSuiteClasses);
	}
	,run: function(testSuiteClasses) {
		if(this.running) {
			return;
		}
		this.running = true;
		this.asyncPending = false;
		this.asyncDelegate = null;
		this.testCount = 0;
		this.failCount = 0;
		this.errorCount = 0;
		this.passCount = 0;
		this.ignoreCount = 0;
		this.suiteIndex = 0;
		this.clientCompleteCount = 0;
		massive_munit_Assert.assertionCount = 0;
		var _g = [];
		var _g1 = 0;
		while(_g1 < testSuiteClasses.length) {
			var suiteType = testSuiteClasses[_g1];
			++_g1;
			_g.push(Type.createInstance(suiteType,massive_munit_TestRunner.emptyParams));
		}
		this.testSuites = _g;
		this.startTime = Date.now() / 1000;
		this.execute();
	}
	,execute: function() {
		var _g = this.suiteIndex;
		var _g1 = this.testSuites.length;
		while(_g < _g1) {
			var i = _g++;
			var suite = this.testSuites[i];
			var testClass = suite;
			while(testClass.hasNext()) {
				var testClass1 = testClass.next();
				if(this.activeHelper == null || this.activeHelper.type != testClass1) {
					this.activeHelper = new massive_munit_TestClassHelper(testClass1,this.isDebug);
					var o = this.activeHelper.test;
					var func = this.activeHelper.beforeClass;
					var args = massive_munit_TestRunner.emptyParams;
					if(!Reflect.compareMethods(func,massive_munit_TestClassHelper.nullFunc)) {
						func.apply(o,args);
					}
				}
				this.executeTestCases();
				if(!this.asyncPending) {
					var o1 = this.activeHelper.test;
					var func1 = this.activeHelper.afterClass;
					var args1 = massive_munit_TestRunner.emptyParams;
					if(!Reflect.compareMethods(func1,massive_munit_TestClassHelper.nullFunc)) {
						func1.apply(o1,args1);
					}
				} else {
					suite.repeat();
					this.suiteIndex = i;
					return;
				}
			}
			this.testSuites[i] = null;
		}
		if(!this.asyncPending) {
			var time = Date.now() / 1000 - this.startTime;
			var _g2 = 0;
			var _g3 = this.clients;
			while(_g2 < _g3.length) {
				var client = _g3[_g2];
				++_g2;
				if(js_Boot.__implements(client,massive_munit_IAdvancedTestResultClient)) {
					var cl = client;
					cl.setCurrentTestClass(null);
				}
				client.reportFinalStatistics(this.testCount,this.passCount,this.failCount,this.errorCount,this.ignoreCount,time);
			}
		}
	}
	,executeTestCases: function() {
		var _g = 0;
		var _g1 = this.clients;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(js_Boot.__implements(c,massive_munit_IAdvancedTestResultClient) && this.activeHelper.hasNext()) {
				var cl = c;
				cl.setCurrentTestClass(this.activeHelper.className);
			}
		}
		var testCaseData = this.activeHelper;
		while(testCaseData.hasNext()) {
			var testCaseData1 = testCaseData.next();
			if(testCaseData1.result.ignore) {
				this.ignoreCount++;
				var _g2 = 0;
				var _g3 = this.clients;
				while(_g2 < _g3.length) {
					var c1 = _g3[_g2];
					++_g2;
					c1.addIgnore(testCaseData1.result);
				}
			} else {
				this.testCount++;
				var o = this.activeHelper.test;
				var func = this.activeHelper.before;
				var args = massive_munit_TestRunner.emptyParams;
				if(!Reflect.compareMethods(func,massive_munit_TestClassHelper.nullFunc)) {
					func.apply(o,args);
				}
				this.testStartTime = Date.now() / 1000;
				this.executeTestCase(testCaseData1,testCaseData1.result.async);
				if(!this.asyncPending) {
					var o1 = this.activeHelper.test;
					var func1 = this.activeHelper.after;
					var args1 = massive_munit_TestRunner.emptyParams;
					if(!Reflect.compareMethods(func1,massive_munit_TestClassHelper.nullFunc)) {
						func1.apply(o1,args1);
					}
				} else {
					break;
				}
			}
		}
	}
	,executeTestCase: function(testCaseData,async) {
		var result = testCaseData.result;
		try {
			var assertionCount = massive_munit_Assert.assertionCount;
			if(async) {
				testCaseData.test.apply(testCaseData.scope,[this.asyncFactory]);
				if(this.asyncDelegate == null) {
					throw new js__$Boot_HaxeError(new massive_munit_async_MissingAsyncDelegateException("No AsyncDelegate was created in async test at " + result.get_location(),null));
				}
				this.asyncPending = true;
			} else {
				testCaseData.test.apply(testCaseData.scope,massive_munit_TestRunner.emptyParams);
				result.passed = true;
				result.executionTime = Date.now() / 1000 - this.testStartTime;
				this.passCount++;
				var _g = 0;
				var _g1 = this.clients;
				while(_g < _g1.length) {
					var c = _g1[_g];
					++_g;
					c.addPass(result);
				}
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(async && this.asyncDelegate != null) {
				this.asyncDelegate.cancelTest();
				this.asyncDelegate = null;
			}
			if(((e1) instanceof org_hamcrest_AssertionException)) {
				e1 = new massive_munit_AssertionException(e1.message,e1.info);
			}
			if(((e1) instanceof massive_munit_AssertionException)) {
				result.executionTime = Date.now() / 1000 - this.testStartTime;
				result.failure = e1;
				this.failCount++;
				var _g2 = 0;
				var _g11 = this.clients;
				while(_g2 < _g11.length) {
					var c1 = _g11[_g2];
					++_g2;
					c1.addFail(result);
				}
			} else {
				result.executionTime = Date.now() / 1000 - this.testStartTime;
				if(!((e1) instanceof massive_munit_MUnitException)) {
					e1 = new massive_munit_UnhandledException(e1,result.get_location());
				}
				result.error = e1;
				this.errorCount++;
				var _g3 = 0;
				var _g12 = this.clients;
				while(_g3 < _g12.length) {
					var c2 = _g12[_g3];
					++_g3;
					c2.addError(result);
				}
			}
		}
	}
	,clientCompletionHandler: function(resultClient) {
		if(++this.clientCompleteCount == this.clients.length) {
			if(this.completionHandler != null) {
				var f = this.completionHandler;
				var a1 = this.passCount == this.testCount;
				haxe_Timer.delay(function() {
					f(a1);
				},10);
			}
			this.running = false;
		}
	}
	,asyncResponseHandler: function(delegate) {
		var testCaseData = this.activeHelper.current();
		testCaseData.scope = delegate;
		testCaseData.test = $bind(delegate,delegate.runTest);
		this.asyncPending = false;
		this.asyncDelegate = null;
		this.executeTestCase(testCaseData,false);
		var o = this.activeHelper.test;
		var func = this.activeHelper.after;
		var args = massive_munit_TestRunner.emptyParams;
		if(!Reflect.compareMethods(func,massive_munit_TestClassHelper.nullFunc)) {
			func.apply(o,args);
		}
		this.execute();
	}
	,asyncTimeoutHandler: function(delegate) {
		var testCaseData = this.activeHelper.current();
		var result = testCaseData.result;
		result.executionTime = Date.now() / 1000 - this.testStartTime;
		result.error = new massive_munit_async_AsyncTimeoutException("",delegate.info);
		this.asyncPending = false;
		this.asyncDelegate = null;
		this.errorCount++;
		var _g = 0;
		var _g1 = this.clients;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.addError(result);
		}
		var o = this.activeHelper.test;
		var func = this.activeHelper.after;
		var args = massive_munit_TestRunner.emptyParams;
		if(!Reflect.compareMethods(func,massive_munit_TestClassHelper.nullFunc)) {
			func.apply(o,args);
		}
		this.execute();
	}
	,asyncDelegateCreatedHandler: function(delegate) {
		this.asyncDelegate = delegate;
	}
	,createAsyncFactory: function() {
		return new massive_munit_async_AsyncFactory(this);
	}
	,__class__: massive_munit_TestRunner
	,__properties__: {set_asyncFactory:"set_asyncFactory",get_clientCount:"get_clientCount"}
};
var massive_munit_UnhandledException = function(source,testLocation) {
	massive_munit_MUnitException.call(this,Std.string(source) + this.formatLocation(source,testLocation),null);
	this.type = massive_haxe_util_ReflectUtil.here({ fileName : "massive/munit/UnhandledException.hx", lineNumber : 50, className : "massive.munit.UnhandledException", methodName : "new"}).className;
};
massive_munit_UnhandledException.__name__ = "massive.munit.UnhandledException";
massive_munit_UnhandledException.__super__ = massive_munit_MUnitException;
massive_munit_UnhandledException.prototype = $extend(massive_munit_MUnitException.prototype,{
	formatLocation: function(source,testLocation) {
		var stackTrace = " at " + testLocation;
		var stack = this.getStackTrace(source);
		if(stack != null && stack.length > 1) {
			stackTrace += " " + HxOverrides.substr(stack,1,null);
		}
		return stackTrace;
	}
	,getStackTrace: function(source) {
		var s = "";
		if(s == "") {
			var stack = haxe_CallStack.exceptionStack();
			while(stack.length > 0) {
				var _g = stack.shift();
				if(_g != null) {
					switch(_g._hx_index) {
					case 2:
						var _g4 = _g.column;
						var _g1 = _g.s;
						var line = _g.line;
						var file = _g.file;
						s += "\tat " + file + " (" + line + ")\n";
						break;
					case 3:
						var method = _g.method;
						var classname = _g.classname;
						s += "\tat " + classname + "#" + method + "\n";
						break;
					default:
					}
				}
			}
		}
		if(s == "") {
			s = source.stack;
		}
		return s;
	}
	,__class__: massive_munit_UnhandledException
});
var massive_munit_async_AsyncDelegate = function(testCase,handler,timeout,info) {
	this.params = [];
	this.canceled = false;
	this.timedOut = false;
	this.testCase = testCase;
	this.handler = handler;
	this.delegateHandler = Reflect.makeVarArgs($bind(this,this.responseHandler));
	this.info = info;
	if(timeout == null || timeout <= 0) {
		timeout = 400;
	}
	this.timeoutDelay = timeout;
	this.timer = haxe_Timer.delay($bind(this,this.timeoutHandler),this.timeoutDelay);
};
massive_munit_async_AsyncDelegate.__name__ = "massive.munit.async.AsyncDelegate";
massive_munit_async_AsyncDelegate.prototype = {
	runTest: function() {
		this.handler.apply(this.testCase,this.params);
	}
	,cancelTest: function() {
		this.canceled = true;
		this.timer.stop();
		if(this.deferredTimer != null) {
			this.deferredTimer.stop();
		}
	}
	,responseHandler: function(params) {
		if(this.timedOut || this.canceled) {
			return null;
		}
		this.timer.stop();
		if(this.deferredTimer != null) {
			this.deferredTimer.stop();
		}
		this.params = params != null ? params.slice() : [];
		if(this.observer != null) {
			haxe_Timer.delay($bind(this,this.delayActualResponseHandler),1);
		}
		return null;
	}
	,delayActualResponseHandler: function() {
		this.observer.asyncResponseHandler(this);
		this.observer = null;
	}
	,timeoutHandler: function() {
		this.actualTimeoutHandler();
	}
	,actualTimeoutHandler: function() {
		this.deferredTimer = null;
		this.handler = null;
		this.delegateHandler = null;
		this.timedOut = true;
		if(this.observer != null) {
			this.observer.asyncTimeoutHandler(this);
			this.observer = null;
		}
	}
	,__class__: massive_munit_async_AsyncDelegate
};
var massive_munit_async_AsyncFactory = function(observer) {
	this.observer = observer;
	this.asyncDelegateCount = 0;
};
massive_munit_async_AsyncFactory.__name__ = "massive.munit.async.AsyncFactory";
massive_munit_async_AsyncFactory.prototype = {
	createHandler: function(testCase,handler,timeout,info) {
		var delegate = new massive_munit_async_AsyncDelegate(testCase,handler,timeout,info);
		delegate.observer = this.observer;
		this.asyncDelegateCount++;
		this.observer.asyncDelegateCreatedHandler(delegate);
		return delegate.delegateHandler;
	}
	,__class__: massive_munit_async_AsyncFactory
};
var massive_munit_async_AsyncTimeoutException = function(message,info) {
	massive_munit_MUnitException.call(this,message,info);
	this.type = massive_haxe_util_ReflectUtil.here({ fileName : "massive/munit/async/AsyncTimeoutException.hx", lineNumber : 49, className : "massive.munit.async.AsyncTimeoutException", methodName : "new"}).className;
};
massive_munit_async_AsyncTimeoutException.__name__ = "massive.munit.async.AsyncTimeoutException";
massive_munit_async_AsyncTimeoutException.__super__ = massive_munit_MUnitException;
massive_munit_async_AsyncTimeoutException.prototype = $extend(massive_munit_MUnitException.prototype,{
	__class__: massive_munit_async_AsyncTimeoutException
});
var massive_munit_async_MissingAsyncDelegateException = function(message,info) {
	massive_munit_MUnitException.call(this,message,info);
	this.type = massive_haxe_util_ReflectUtil.here({ fileName : "massive/munit/async/MissingAsyncDelegateException.hx", lineNumber : 49, className : "massive.munit.async.MissingAsyncDelegateException", methodName : "new"}).className;
};
massive_munit_async_MissingAsyncDelegateException.__name__ = "massive.munit.async.MissingAsyncDelegateException";
massive_munit_async_MissingAsyncDelegateException.__super__ = massive_munit_MUnitException;
massive_munit_async_MissingAsyncDelegateException.prototype = $extend(massive_munit_MUnitException.prototype,{
	__class__: massive_munit_async_MissingAsyncDelegateException
});
var massive_munit_client_AbstractTestResultClient = function() {
	this.init();
};
massive_munit_client_AbstractTestResultClient.__name__ = "massive.munit.client.AbstractTestResultClient";
massive_munit_client_AbstractTestResultClient.__interfaces__ = [massive_munit_ICoverageTestResultClient,massive_munit_IAdvancedTestResultClient];
massive_munit_client_AbstractTestResultClient.prototype = {
	get_completionHandler: function() {
		return this.completionHandler;
	}
	,set_completionHandler: function(value) {
		return this.completionHandler = value;
	}
	,get_output: function() {
		return this.output;
	}
	,init: function() {
		this.currentTestClass = null;
		this.currentClassResults = [];
		massive_munit_client_AbstractTestResultClient.traces = [];
		this.passCount = 0;
		this.failCount = 0;
		this.errorCount = 0;
		this.ignoreCount = 0;
		this.currentCoverageResult = null;
		this.totalResults = [];
		this.totalCoveragePercent = 0;
		this.totalCoverageReport = null;
		this.totalCoverageResults = null;
	}
	,setCurrentTestClass: function(className) {
		if(this.currentTestClass == className) {
			return;
		}
		if(this.currentTestClass != null) {
			this.finalizeTestClass();
		}
		this.currentTestClass = className;
		if(this.currentTestClass != null) {
			this.initializeTestClass();
		}
	}
	,addPass: function(result) {
		this.passCount++;
		this.updateTestClass(result);
	}
	,addFail: function(result) {
		this.failCount++;
		this.updateTestClass(result);
	}
	,addError: function(result) {
		this.errorCount++;
		this.updateTestClass(result);
	}
	,addIgnore: function(result) {
		this.ignoreCount++;
		this.updateTestClass(result);
	}
	,setCurrentTestClassCoverage: function(result) {
		this.currentCoverageResult = result;
	}
	,reportFinalCoverage: function(percent,missingCoverageResults,summary,classBreakdown,packageBreakdown,executionFrequency) {
		if(percent == null) {
			percent = 0;
		}
		this.totalCoveragePercent = percent;
		this.totalCoverageResults = missingCoverageResults;
		this.totalCoverageReport = summary;
	}
	,reportFinalStatistics: function(testCount,passCount,failCount,errorCount,ignoreCount,time) {
		this.finalResult = passCount == testCount;
		this.printReports();
		this.printFinalStatistics(this.finalResult,testCount,passCount,failCount,errorCount,ignoreCount,time);
		this.printOverallResult(this.finalResult);
		haxe_Log.trace = this.originalTrace;
		if(this.get_completionHandler() != null) {
			(this.get_completionHandler())(this);
		}
		return this.get_output();
	}
	,initializeTestClass: function() {
		this.currentClassResults = [];
		massive_munit_client_AbstractTestResultClient.traces = [];
		this.passCount = 0;
		this.failCount = 0;
		this.errorCount = 0;
		this.ignoreCount = 0;
	}
	,updateTestClass: function(result) {
		this.currentClassResults.push(result);
		this.totalResults.push(result);
	}
	,finalizeTestClass: function() {
		this.currentClassResults.sort($bind(this,this.sortTestResults));
	}
	,printReports: function() {
	}
	,printFinalStatistics: function(result,testCount,passCount,failCount,errorCount,ignoreCount,time) {
	}
	,printOverallResult: function(result) {
	}
	,addTrace: function(value,info) {
		massive_munit_client_AbstractTestResultClient.traces.push(info.fileName + "|" + info.lineNumber + "| " + Std.string(value));
	}
	,getTraces: function() {
		return massive_munit_client_AbstractTestResultClient.traces.slice();
	}
	,sortTestResults: function(a,b) {
		var aInt;
		switch(a.get_type()) {
		case "ERROR":
			aInt = 2;
			break;
		case "FAIL":
			aInt = 1;
			break;
		case "IGNORE":
			aInt = 0;
			break;
		case "PASS":
			aInt = -1;
			break;
		default:
			aInt = -2;
		}
		var bInt;
		switch(b.get_type()) {
		case "ERROR":
			bInt = 2;
			break;
		case "FAIL":
			bInt = 1;
			break;
		case "IGNORE":
			bInt = 0;
			break;
		case "PASS":
			bInt = -1;
			break;
		default:
			bInt = -2;
		}
		return aInt - bInt;
	}
	,__class__: massive_munit_client_AbstractTestResultClient
	,__properties__: {get_output:"get_output",set_completionHandler:"set_completionHandler",get_completionHandler:"get_completionHandler"}
};
var massive_munit_client_HTTPClient = function(client,url,queueRequest) {
	if(queueRequest == null) {
		queueRequest = true;
	}
	if(url == null) {
		url = "http://localhost:2000";
	}
	this.id = "HTTPClient";
	this.client = client;
	this.url = url;
	this.queueRequest = queueRequest;
};
massive_munit_client_HTTPClient.__name__ = "massive.munit.client.HTTPClient";
massive_munit_client_HTTPClient.__interfaces__ = [massive_munit_IAdvancedTestResultClient];
massive_munit_client_HTTPClient.dispatchNextRequest = function() {
	if(massive_munit_client_HTTPClient.responsePending || massive_munit_client_HTTPClient.queue.length == 0) {
		return;
	}
	massive_munit_client_HTTPClient.responsePending = true;
	var request = massive_munit_client_HTTPClient.queue.pop();
	request.send();
};
massive_munit_client_HTTPClient.prototype = {
	get_completionHandler: function() {
		return this.completionHandler;
	}
	,set_completionHandler: function(value) {
		return this.completionHandler = value;
	}
	,setCurrentTestClass: function(className) {
		if(js_Boot.__implements(this.client,massive_munit_IAdvancedTestResultClient)) {
			(js_Boot.__cast(this.client , massive_munit_IAdvancedTestResultClient)).setCurrentTestClass(className);
		}
	}
	,addPass: function(result) {
		this.client.addPass(result);
	}
	,addFail: function(result) {
		this.client.addFail(result);
	}
	,addError: function(result) {
		this.client.addError(result);
	}
	,addIgnore: function(result) {
		this.client.addIgnore(result);
	}
	,reportFinalStatistics: function(testCount,passCount,failCount,errorCount,ignoreCount,time) {
		var result = this.client.reportFinalStatistics(testCount,passCount,failCount,errorCount,ignoreCount,time);
		this.sendResult(result);
		return result;
	}
	,sendResult: function(result) {
		this.request = new massive_munit_client_URLRequest(this.url);
		this.request.setHeader("munit-clientId",this.client.id);
		this.request.setHeader("munit-platformId",this.platform());
		this.request.onData = $bind(this,this.onData);
		this.request.onError = $bind(this,this.onError);
		this.request.data = result;
		if(this.queueRequest) {
			massive_munit_client_HTTPClient.queue.unshift(this.request);
			massive_munit_client_HTTPClient.dispatchNextRequest();
		} else {
			this.request.send();
		}
	}
	,platform: function() {
		return "js";
	}
	,onData: function(data) {
		if(this.queueRequest) {
			massive_munit_client_HTTPClient.responsePending = false;
			massive_munit_client_HTTPClient.dispatchNextRequest();
		}
		if(this.get_completionHandler() != null) {
			(this.get_completionHandler())(this);
		}
	}
	,onError: function(msg) {
		if(this.queueRequest) {
			massive_munit_client_HTTPClient.responsePending = false;
			massive_munit_client_HTTPClient.dispatchNextRequest();
		}
		if(this.get_completionHandler() != null) {
			(this.get_completionHandler())(this);
		}
	}
	,__class__: massive_munit_client_HTTPClient
	,__properties__: {set_completionHandler:"set_completionHandler",get_completionHandler:"get_completionHandler"}
};
var massive_munit_client_URLRequest = function(url) {
	this.url = url;
	this.createClient(url);
	this.setHeader("Content-Type","text/plain");
};
massive_munit_client_URLRequest.__name__ = "massive.munit.client.URLRequest";
massive_munit_client_URLRequest.prototype = {
	createClient: function(url) {
		this.client = new haxe_http_HttpNodeJs(url);
	}
	,setHeader: function(name,value) {
		this.client.setHeader(name,value);
	}
	,send: function() {
		var body = Std.string(this.data);
		this.client.onData = this.onData;
		this.client.onError = this.onError;
		this.client.setHeader("Content-Length",Std.string(haxe_io_Bytes.ofString(body).length));
		this.client.setPostData(body);
		this.client.request(true);
	}
	,__class__: massive_munit_client_URLRequest
};
var massive_munit_client_JUnitReportClient = function() {
	this.id = "junit";
	this.currentTestClass = "";
	this.newline = "\n";
	this.testSuiteXML = null;
	this.xml = new StringBuf();
	this.xml.b += Std.string("<testsuites>" + this.newline);
};
massive_munit_client_JUnitReportClient.__name__ = "massive.munit.client.JUnitReportClient";
massive_munit_client_JUnitReportClient.__interfaces__ = [massive_munit_IAdvancedTestResultClient];
massive_munit_client_JUnitReportClient.prototype = {
	get_completionHandler: function() {
		return this.completionHandler;
	}
	,set_completionHandler: function(value) {
		return this.completionHandler = value;
	}
	,setCurrentTestClass: function(className) {
		if(this.currentTestClass == className) {
			return;
		}
		if(this.currentTestClass != null) {
			this.endTestSuite();
		}
		this.currentTestClass = className;
		if(this.currentTestClass != null) {
			this.startTestSuite();
		}
	}
	,addPass: function(result) {
		this.suitePassCount++;
		var _this = this.testSuiteXML;
		var x = "<testcase classname=\"" + result.className + "\" name=\"" + result.name + "\" time=\"" + massive_munit_util_MathUtil.round(result.executionTime,5) + "\"/>";
		_this.b += Std.string(x);
		this.testSuiteXML.b += Std.string(this.newline);
	}
	,addFail: function(result) {
		this.suiteFailCount++;
		var _this = this.testSuiteXML;
		var x = "<testcase classname=\"" + result.className + "\" name=\"" + result.name + "\" time=\"" + massive_munit_util_MathUtil.round(result.executionTime,5) + "\">";
		_this.b += Std.string(x);
		this.testSuiteXML.b += Std.string(this.newline);
		this.testSuiteXML.b += Std.string("<failure message=\"" + result.failure.message + "\" type=\"" + result.failure.type + "\">" + Std.string(result.failure) + "</failure>");
		this.testSuiteXML.b += Std.string(this.newline);
		this.testSuiteXML.b += "</testcase>";
		this.testSuiteXML.b += Std.string(this.newline);
	}
	,addError: function(result) {
		this.suiteErrorCount++;
		var _this = this.testSuiteXML;
		var x = "<testcase classname=\"" + result.className + "\" name=\"" + result.name + "\" time=\"" + massive_munit_util_MathUtil.round(result.executionTime,5) + "\">";
		_this.b += Std.string(x);
		this.testSuiteXML.b += Std.string(this.newline);
		this.testSuiteXML.b += Std.string("<error message=\"" + Std.string(result.error.message) + "\" type=\"" + Std.string(result.error.type) + "\">" + Std.string(result.error) + "</error>");
		this.testSuiteXML.b += Std.string(this.newline);
		this.testSuiteXML.b += "</testcase>";
		this.testSuiteXML.b += Std.string(this.newline);
	}
	,addIgnore: function(result) {
	}
	,reportFinalStatistics: function(testCount,passCount,failCount,errorCount,ignoreCount,time) {
		this.xml.b += "</testsuites>";
		if(this.get_completionHandler() != null) {
			(this.get_completionHandler())(this);
		}
		return this.xml.b;
	}
	,startTestSuite: function() {
		this.suitePassCount = 0;
		this.suiteFailCount = 0;
		this.suiteErrorCount = 0;
		this.suiteExecutionTime = Date.now() / 1000;
		this.testSuiteXML = new StringBuf();
	}
	,endTestSuite: function() {
		if(this.testSuiteXML == null) {
			return;
		}
		var suiteTestCount = this.suitePassCount + this.suiteFailCount + this.suiteErrorCount;
		this.suiteExecutionTime = Date.now() / 1000 - this.suiteExecutionTime;
		var time = massive_munit_util_MathUtil.round(this.suiteExecutionTime,5);
		var _this = this.xml;
		var x = "<testsuite errors=\"" + this.suiteErrorCount + "\" failures=\"" + this.suiteFailCount + "\" hostname=\"\" name=\"" + this.currentTestClass + "\" tests=\"" + suiteTestCount + "\" time=\"" + time + "\" timestamp=\"" + Std.string(new Date()) + "\">";
		_this.b += Std.string(x);
		this.xml.b += Std.string(this.newline);
		this.testSuiteXML.b += "<system-out></system-out>";
		this.testSuiteXML.b += Std.string(this.newline);
		this.testSuiteXML.b += "<system-err></system-err>";
		this.testSuiteXML.b += Std.string(this.newline);
		this.xml.b += Std.string(this.testSuiteXML.b);
		this.xml.b += "</testsuite>";
		this.xml.b += Std.string(this.newline);
	}
	,__class__: massive_munit_client_JUnitReportClient
	,__properties__: {set_completionHandler:"set_completionHandler",get_completionHandler:"get_completionHandler"}
};
var massive_munit_client_PrintClientBase = function(includeIgnoredReport) {
	if(includeIgnoredReport == null) {
		includeIgnoredReport = true;
	}
	this.divider2 = "==============================";
	this.divider1 = "------------------------------";
	massive_munit_client_AbstractTestResultClient.call(this);
	this.id = "simple";
	this.verbose = false;
	this.includeIgnoredReport = includeIgnoredReport;
	this.printLine("MUnit Results");
	this.printLine(this.divider1);
};
massive_munit_client_PrintClientBase.__name__ = "massive.munit.client.PrintClientBase";
massive_munit_client_PrintClientBase.__super__ = massive_munit_client_AbstractTestResultClient;
massive_munit_client_PrintClientBase.prototype = $extend(massive_munit_client_AbstractTestResultClient.prototype,{
	initializeTestClass: function() {
		massive_munit_client_AbstractTestResultClient.prototype.initializeTestClass.call(this);
		this.printLine("Class: " + this.currentTestClass + " ");
	}
	,updateTestClass: function(result) {
		massive_munit_client_AbstractTestResultClient.prototype.updateTestClass.call(this,result);
		if(this.verbose) {
			this.printLine(" " + result.name + ": " + result.get_type() + " ");
		} else {
			switch(result.get_type()) {
			case "ERROR":
				this.print("x");
				break;
			case "FAIL":
				this.print("!");
				break;
			case "IGNORE":
				this.print(",");
				break;
			case "PASS":
				this.print(".");
				break;
			case "UNKNOWN":
				break;
			}
		}
	}
	,finalizeTestClass: function() {
		massive_munit_client_AbstractTestResultClient.prototype.finalizeTestClass.call(this);
		var _g = 0;
		var _g1 = this.getTraces();
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			this.printLine("TRACE: " + item,1);
		}
		var _g2 = 0;
		var _g3 = this.currentClassResults;
		while(_g2 < _g3.length) {
			var result = _g3[_g2];
			++_g2;
			switch(result.get_type()) {
			case "ERROR":
				this.printLine("ERROR: " + Std.string(result.error),1);
				break;
			case "FAIL":
				this.printLine("FAIL: " + Std.string(result.failure),1);
				break;
			case "IGNORE":
				var ingoredString = result.get_location();
				if(result.description != null) {
					ingoredString += " - " + result.description;
				}
				this.printLine("IGNORE: " + ingoredString,1);
				break;
			case "PASS":case "UNKNOWN":
				break;
			}
		}
	}
	,setCurrentTestClassCoverage: function(result) {
		massive_munit_client_AbstractTestResultClient.prototype.setCurrentTestClassCoverage.call(this,result);
		this.print(" [" + result.percent + "%]");
	}
	,reportFinalCoverage: function(percent,missingCoverageResults,summary,classBreakdown,packageBreakdown,executionFrequency) {
		if(percent == null) {
			percent = 0;
		}
		massive_munit_client_AbstractTestResultClient.prototype.reportFinalCoverage.call(this,percent,missingCoverageResults,summary,classBreakdown,packageBreakdown,executionFrequency);
		this.printLine("");
		this.printLine(this.divider1);
		this.printLine("COVERAGE REPORT");
		this.printLine(this.divider1);
		if(missingCoverageResults != null && missingCoverageResults.length > 0) {
			this.printLine("MISSING CODE BLOCKS:");
			var _g = 0;
			while(_g < missingCoverageResults.length) {
				var result = missingCoverageResults[_g];
				++_g;
				this.printLine(result.className + " [" + result.percent + "%]",1);
				var _g1 = 0;
				var _g11 = result.blocks;
				while(_g1 < _g11.length) {
					var item = _g11[_g1];
					++_g1;
					this.printIndentedLines(item,2);
				}
				this.printLine("");
			}
		}
		if(executionFrequency != null) {
			this.printLine("CODE EXECUTION FREQUENCY:");
			this.printIndentedLines(executionFrequency,1);
			this.printLine("");
		}
		if(classBreakdown != null) {
			this.printIndentedLines(classBreakdown,0);
		}
		if(packageBreakdown != null) {
			this.printIndentedLines(packageBreakdown,0);
		}
		if(summary != null) {
			this.printIndentedLines(summary,0);
		}
	}
	,printIndentedLines: function(value,indent) {
		if(indent == null) {
			indent = 1;
		}
		var lines = value.split("\n");
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			this.printLine(line,indent);
		}
	}
	,printReports: function() {
		this.printFinalIgnoredStatistics(this.ignoreCount);
	}
	,printFinalIgnoredStatistics: function(count) {
		if(!this.includeIgnoredReport || count == 0) {
			return;
		}
		var items = Lambda.filter(this.totalResults,$bind(this,this.filterIngored));
		if(items.length == 0) {
			return;
		}
		this.printLine("");
		this.printLine("Ignored (" + count + "):");
		this.printLine(this.divider1);
		var _g = 0;
		while(_g < items.length) {
			var result = items[_g];
			++_g;
			var ingoredString = result.get_location();
			if(result.description != null) {
				ingoredString += " - " + result.description;
			}
			this.printLine("IGNORE: " + ingoredString,1);
		}
		this.printLine("");
	}
	,filterIngored: function(result) {
		return result.get_type() == "IGNORE";
	}
	,printFinalStatistics: function(result,testCount,passCount,failCount,errorCount,ignoreCount,time) {
		this.printLine(this.divider2);
		var sb_b = "";
		sb_b += result ? "PASSED" : "FAILED";
		sb_b += "\nTests: ";
		sb_b += testCount == null ? "null" : "" + testCount;
		sb_b += "  Passed: ";
		sb_b += passCount == null ? "null" : "" + passCount;
		sb_b += "  Failed: ";
		sb_b += failCount == null ? "null" : "" + failCount;
		sb_b += " Errors: ";
		sb_b += errorCount == null ? "null" : "" + errorCount;
		sb_b += " Ignored: ";
		sb_b += ignoreCount == null ? "null" : "" + ignoreCount;
		sb_b += " Time: ";
		sb_b += Std.string(massive_munit_util_MathUtil.round(time,5));
		this.printLine(sb_b);
		this.printLine("");
	}
	,printOverallResult: function(result) {
		this.printLine("");
	}
	,print: function(value) {
		this.output += Std.string(value);
	}
	,printLine: function(value,indent) {
		if(indent == null) {
			indent = 0;
		}
		value = Std.string(value);
		value = this.indentString(value,indent);
		this.print("\n" + Std.string(value));
	}
	,indentString: function(value,indent) {
		if(indent == null) {
			indent = 0;
		}
		if(indent > 0) {
			value = StringTools.lpad(""," ",indent * 4) + value;
		}
		return value;
	}
	,__class__: massive_munit_client_PrintClientBase
});
var massive_munit_client_PrintClient = function(includeIgnoredReport) {
	if(includeIgnoredReport == null) {
		includeIgnoredReport = true;
	}
	massive_munit_client_PrintClientBase.call(this,includeIgnoredReport);
	this.id = "print";
};
massive_munit_client_PrintClient.__name__ = "massive.munit.client.PrintClient";
massive_munit_client_PrintClient.__super__ = massive_munit_client_PrintClientBase;
massive_munit_client_PrintClient.prototype = $extend(massive_munit_client_PrintClientBase.prototype,{
	init: function() {
		massive_munit_client_PrintClientBase.prototype.init.call(this);
		this.originalTrace = haxe_Log.trace;
		haxe_Log.trace = $bind(this,this.customTrace);
	}
	,initJS: function() {
		var div = window.document.getElementById("haxe:trace");
		if(div == null) {
			var positionInfo = massive_haxe_util_ReflectUtil.here({ fileName : "massive/munit/client/PrintClient.hx", lineNumber : 119, className : "massive.munit.client.PrintClient", methodName : "initJS"});
			var error = "MissingElementException: 'haxe:trace' element not found at " + positionInfo.className + "#" + positionInfo.methodName + "(" + positionInfo.lineNumber + ")";
			window.alert(Std.string(error));
		}
	}
	,printOverallResult: function(result) {
		massive_munit_client_PrintClientBase.prototype.printOverallResult.call(this,result);
	}
	,customTrace: function(value,info) {
		if(info != null && info.customParams != null) {
			value = "" + value + ", " + info.customParams.join(", ");
		}
		this.addTrace(value,info);
	}
	,print: function(value) {
		massive_munit_client_PrintClientBase.prototype.print.call(this,value);
		process.stdout.write(value);
	}
	,__class__: massive_munit_client_PrintClient
});
var massive_munit_client_ExternalPrintClient = function() { };
massive_munit_client_ExternalPrintClient.__name__ = "massive.munit.client.ExternalPrintClient";
massive_munit_client_ExternalPrintClient.__isInterface__ = true;
massive_munit_client_ExternalPrintClient.prototype = {
	__class__: massive_munit_client_ExternalPrintClient
};
var massive_munit_client_ExternalPrintClientJS = function() {
};
massive_munit_client_ExternalPrintClientJS.__name__ = "massive.munit.client.ExternalPrintClientJS";
massive_munit_client_ExternalPrintClientJS.__interfaces__ = [massive_munit_client_ExternalPrintClient];
massive_munit_client_ExternalPrintClientJS.prototype = {
	print: function(value) {
		this.queue("munitPrint",value);
	}
	,printLine: function(value) {
		this.queue("munitPrintLine",value);
	}
	,setResult: function(value) {
		this.queue("setResult",value);
	}
	,setResultBackground: function(value) {
		this.queue("setResultBackground",value);
	}
	,trace: function(value) {
		this.queue("munitTrace",value);
	}
	,createTestClass: function(className) {
		this.queue("createTestClass",className);
	}
	,printToTestClassSummary: function(value) {
		this.queue("updateTestSummary",value);
	}
	,setTestClassResult: function(resultType) {
		this.queue("setTestClassResult",resultType);
	}
	,addTestPass: function(value) {
		if(value == null) {
			return;
		}
		this.queue("addTestPass",value);
	}
	,addTestFail: function(value) {
		this.queue("addTestFail",value);
	}
	,addTestError: function(value) {
		this.queue("addTestError",value);
	}
	,addTestIgnore: function(value) {
		this.queue("addTestIgnore",value);
	}
	,addTestClassCoverage: function(className,percent) {
		if(percent == null) {
			percent = 0;
		}
		this.queue("addTestCoverageClass",[className,percent]);
	}
	,addTestClassCoverageItem: function(value) {
		this.queue("addTestCoverageItem",value);
	}
	,createCoverageReport: function(percent) {
		if(percent == null) {
			percent = 0;
		}
		this.queue("createCoverageReport",percent);
	}
	,addMissingCoverageClass: function(className,percent) {
		if(percent == null) {
			percent = 0;
		}
		this.queue("addMissingCoverageClass",[className,percent]);
	}
	,addCoverageReportSection: function(name,value) {
		this.queue("addCoverageReportSection",[name,value]);
	}
	,addCoverageSummary: function(value) {
		this.queue("addCoverageSummary",value);
	}
	,printSummary: function(value) {
		this.queue("printSummary",value);
	}
	,queue: function(method,args) {
		return false;
	}
	,convertToJavaScript: function(method,args) {
		var htmlArgs;
		if(args != null && args.length > 0) {
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var arg = args[_g1];
				++_g1;
				_g.push(this.serialiseToHTML(Std.string(arg)));
			}
			htmlArgs = _g;
		} else {
			htmlArgs = null;
		}
		if(htmlArgs == null) {
			return "addToQueue(\"" + method + "\")";
		}
		var result = "addToQueue(\"" + method + "\"";
		var _g2 = 0;
		while(_g2 < htmlArgs.length) {
			var arg1 = htmlArgs[_g2];
			++_g2;
			result += ",\"" + arg1 + "\"";
		}
		result += ")";
		return result;
	}
	,serialiseToHTML: function(value) {
		value = js_Boot.__string_rec(value,"");
		var result = StringTools.htmlEscape(value);
		result = result.split("\n").join("<br/>");
		result = result.split(" ").join("&nbsp;");
		result = result.split("\"").join("\\'");
		return result;
	}
	,__class__: massive_munit_client_ExternalPrintClientJS
};
var massive_munit_client_RichPrintClient = function() {
	massive_munit_client_PrintClientBase.call(this);
	this.id = "RichPrintClient";
};
massive_munit_client_RichPrintClient.__name__ = "massive.munit.client.RichPrintClient";
massive_munit_client_RichPrintClient.__super__ = massive_munit_client_PrintClientBase;
massive_munit_client_RichPrintClient.prototype = $extend(massive_munit_client_PrintClientBase.prototype,{
	init: function() {
		massive_munit_client_PrintClientBase.prototype.init.call(this);
		this.originalTrace = haxe_Log.trace;
		haxe_Log.trace = $bind(this,this.customTrace);
		this.external = new massive_munit_client_ExternalPrintClientJS();
	}
	,initializeTestClass: function() {
		massive_munit_client_PrintClientBase.prototype.initializeTestClass.call(this);
		this.external.createTestClass(this.currentTestClass);
		this.external.printToTestClassSummary("Class: " + this.currentTestClass + " ");
	}
	,updateTestClass: function(result) {
		massive_munit_client_PrintClientBase.prototype.updateTestClass.call(this,result);
		var value = this.serializeTestResult(result);
		switch(result.get_type()) {
		case "ERROR":
			this.external.printToTestClassSummary("x");
			this.external.addTestError(value);
			break;
		case "FAIL":
			this.external.printToTestClassSummary("!");
			this.external.addTestFail(value);
			break;
		case "IGNORE":
			this.external.printToTestClassSummary(",");
			this.external.addTestIgnore(value);
			break;
		case "PASS":
			this.external.printToTestClassSummary(".");
			this.external.addTestPass(value);
			break;
		case "UNKNOWN":
			break;
		}
	}
	,serializeTestResult: function(result) {
		var summary = result.name;
		if(result.description != null && result.description != "") {
			summary += " - " + result.description + " -";
		}
		summary += " (" + massive_munit_util_MathUtil.round(result.executionTime,4) + "s)";
		if(result.error != null) {
			return "Error: " + summary + "\n" + Std.string(result.error);
		}
		if(result.failure != null) {
			return "Failure: " + summary + "\n" + Std.string(result.failure);
		}
		if(result.ignore) {
			return "Ignore: " + summary;
		}
		return null;
	}
	,finalizeTestClass: function() {
		massive_munit_client_PrintClientBase.prototype.finalizeTestClass.call(this);
		this.testClassResultType = this.getTestClassResultType();
		var code;
		switch(this.testClassResultType) {
		case "ERROR":
			code = 2;
			break;
		case "FAIL":
			code = 1;
			break;
		case "IGNORE":
			code = 3;
			break;
		case "PASS":
			code = 0;
			break;
		default:
			code = -1;
		}
		if(code == -1) {
			return;
		}
		this.external.setTestClassResult(code);
	}
	,getTestClassResultType: function() {
		if(this.errorCount > 0) {
			return "ERROR";
		}
		if(this.failCount > 0) {
			return "FAIL";
		}
		if(this.ignoreCount > 0) {
			return "IGNORE";
		}
		return "PASS";
	}
	,setCurrentTestClassCoverage: function(result) {
		massive_munit_client_PrintClientBase.prototype.setCurrentTestClassCoverage.call(this,result);
		this.external.printToTestClassSummary(" [" + result.percent + "%]");
		if(result.percent == 100) {
			return;
		}
		this.external.addTestClassCoverage(result.className,result.percent);
		var _g = 0;
		var _g1 = result.blocks;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			this.external.addTestClassCoverageItem(item);
		}
	}
	,reportFinalCoverage: function(percent,missingCoverageResults,summary,classBreakdown,packageBreakdown,executionFrequency) {
		if(percent == null) {
			percent = 0;
		}
		massive_munit_client_PrintClientBase.prototype.reportFinalCoverage.call(this,percent,missingCoverageResults,summary,classBreakdown,packageBreakdown,executionFrequency);
		this.external.createCoverageReport(percent);
		this.printMissingCoverage(missingCoverageResults);
		if(executionFrequency != null) {
			this.external.addCoverageReportSection("Code Execution Frequency",this.trim(executionFrequency));
		}
		if(classBreakdown != null) {
			this.external.addCoverageReportSection("Class Breakdown",this.trim(classBreakdown));
		}
		if(packageBreakdown != null) {
			this.external.addCoverageReportSection("Package Breakdown",this.trim(packageBreakdown));
		}
		if(packageBreakdown != null) {
			this.external.addCoverageReportSection("Summary",this.trim(summary));
		}
	}
	,trim: function(output) {
		while(output.indexOf("\n") == 0) output = HxOverrides.substr(output,1,null);
		while(output.lastIndexOf("\n") == output.length - 2) output = HxOverrides.substr(output,0,output.length - 2);
		return output;
	}
	,printMissingCoverage: function(missingCoverageResults) {
		if(missingCoverageResults == null || missingCoverageResults.length == 0) {
			return;
		}
		var _g = 0;
		while(_g < missingCoverageResults.length) {
			var result = missingCoverageResults[_g];
			++_g;
			this.external.addMissingCoverageClass(result.className,result.percent);
			var _g1 = 0;
			var _g11 = result.blocks;
			while(_g1 < _g11.length) {
				var item = _g11[_g1];
				++_g1;
				this.external.addTestClassCoverageItem(item);
			}
		}
	}
	,printFinalStatistics: function(result,testCount,passCount,failCount,errorCount,ignoreCount,time) {
		massive_munit_client_PrintClientBase.prototype.printFinalStatistics.call(this,result,testCount,passCount,failCount,errorCount,ignoreCount,time);
		var sb_b = "";
		sb_b += result ? "PASSED" : "FAILED";
		sb_b += "\nTests: ";
		sb_b += testCount == null ? "null" : "" + testCount;
		sb_b += "  Passed: ";
		sb_b += passCount == null ? "null" : "" + passCount;
		sb_b += "  Failed: ";
		sb_b += failCount == null ? "null" : "" + failCount;
		sb_b += " Errors: ";
		sb_b += errorCount == null ? "null" : "" + errorCount;
		sb_b += " Ignored: ";
		sb_b += ignoreCount == null ? "null" : "" + ignoreCount;
		sb_b += " Time: ";
		sb_b += Std.string(massive_munit_util_MathUtil.round(time,5));
		this.external.printSummary(sb_b);
	}
	,printOverallResult: function(result) {
		massive_munit_client_PrintClientBase.prototype.printOverallResult.call(this,result);
		this.external.setResult(result);
	}
	,customTrace: function(value,info) {
		if(info != null && info.customParams != null) {
			value = "" + value + ", " + info.customParams.join(", ");
		}
		this.addTrace(value,info);
		var traces = this.getTraces();
		var t = traces[traces.length - 1];
		this.external.trace(t);
	}
	,print: function(value) {
		massive_munit_client_PrintClientBase.prototype.print.call(this,value);
		process.stdout.write(Std.string(value));
	}
	,__class__: massive_munit_client_RichPrintClient
});
var massive_munit_client_SummaryReportClient = function() {
	massive_munit_client_AbstractTestResultClient.call(this);
	this.id = "summary";
};
massive_munit_client_SummaryReportClient.__name__ = "massive.munit.client.SummaryReportClient";
massive_munit_client_SummaryReportClient.__super__ = massive_munit_client_AbstractTestResultClient;
massive_munit_client_SummaryReportClient.prototype = $extend(massive_munit_client_AbstractTestResultClient.prototype,{
	printFinalStatistics: function(result,testCount,passCount,failCount,errorCount,ignoreCount,time) {
		var sb_b = "";
		sb_b += Std.string("result:" + (result == null ? "null" : "" + result));
		sb_b += Std.string("\ncount:" + testCount);
		sb_b += Std.string("\npass:" + passCount);
		sb_b += Std.string("\nfail:" + failCount);
		sb_b += Std.string("\nerror:" + errorCount);
		sb_b += Std.string("\nignore:" + ignoreCount);
		sb_b += Std.string("\ntime:" + time);
		sb_b += "\n";
		var resultCount = 0;
		while(this.totalResults.length > 0 && resultCount < 10) {
			var result1 = this.totalResults.shift();
			if(!result1.passed) {
				sb_b += Std.string("\n# " + result1.get_location());
				++resultCount;
			}
		}
		var remainder = failCount + errorCount - resultCount;
		if(remainder > 0) {
			sb_b += Std.string("# ... plus " + remainder + " more");
		}
		this.output = sb_b;
	}
	,printOverallResult: function(result) {
	}
	,printReports: function() {
	}
	,__class__: massive_munit_client_SummaryReportClient
});
var massive_munit_util_MathUtil = function() { };
massive_munit_util_MathUtil.__name__ = "massive.munit.util.MathUtil";
massive_munit_util_MathUtil.round = function(value,precision) {
	value *= Math.pow(10,precision);
	return Math.round(value) / Math.pow(10,precision);
};
var org_hamcrest_Exception = function(message,cause,info) {
	if(message == null) {
		message = "";
	}
	var c = js_Boot.getClass(this);
	this.name = c.__name__;
	this.message = message;
	this.cause = cause;
	this.info = info;
};
org_hamcrest_Exception.__name__ = "org.hamcrest.Exception";
org_hamcrest_Exception.prototype = {
	get_name: function() {
		return this.name;
	}
	,get_message: function() {
		return this.message;
	}
	,get_cause: function() {
		return this.cause;
	}
	,toString: function() {
		var str = this.get_name() + ": " + this.get_message();
		if(this.info != null) {
			str += " at " + this.info.className + "#" + this.info.methodName + " (" + this.info.lineNumber + ")";
		}
		if(this.get_cause() != null) {
			str += "\n\t Caused by: " + Std.string(this.get_cause());
		}
		return str;
	}
	,__class__: org_hamcrest_Exception
	,__properties__: {get_cause:"get_cause",get_message:"get_message",get_name:"get_name"}
};
var org_hamcrest_AssertionException = function(message,cause,info) {
	if(message == null) {
		message = "";
	}
	org_hamcrest_Exception.call(this,message,cause,info);
};
org_hamcrest_AssertionException.__name__ = "org.hamcrest.AssertionException";
org_hamcrest_AssertionException.__super__ = org_hamcrest_Exception;
org_hamcrest_AssertionException.prototype = $extend(org_hamcrest_Exception.prototype,{
	__class__: org_hamcrest_AssertionException
});
var org_hamcrest_IllegalArgumentException = function(message,cause,info) {
	if(message == null) {
		message = "Argument could not be processed.";
	}
	org_hamcrest_Exception.call(this,message,cause,info);
};
org_hamcrest_IllegalArgumentException.__name__ = "org.hamcrest.IllegalArgumentException";
org_hamcrest_IllegalArgumentException.__super__ = org_hamcrest_Exception;
org_hamcrest_IllegalArgumentException.prototype = $extend(org_hamcrest_Exception.prototype,{
	__class__: org_hamcrest_IllegalArgumentException
});
var org_hamcrest_MissingImplementationException = function(message,cause,info) {
	if(message == null) {
		message = "Abstract method not overridden.";
	}
	org_hamcrest_Exception.call(this,message,cause,info);
};
org_hamcrest_MissingImplementationException.__name__ = "org.hamcrest.MissingImplementationException";
org_hamcrest_MissingImplementationException.__super__ = org_hamcrest_Exception;
org_hamcrest_MissingImplementationException.prototype = $extend(org_hamcrest_Exception.prototype,{
	__class__: org_hamcrest_MissingImplementationException
});
var org_hamcrest_UnsupportedOperationException = function(message,cause,info) {
	if(message == null) {
		message = "";
	}
	org_hamcrest_Exception.call(this,message,cause,info);
};
org_hamcrest_UnsupportedOperationException.__name__ = "org.hamcrest.UnsupportedOperationException";
org_hamcrest_UnsupportedOperationException.__super__ = org_hamcrest_Exception;
org_hamcrest_UnsupportedOperationException.prototype = $extend(org_hamcrest_Exception.prototype,{
	__class__: org_hamcrest_UnsupportedOperationException
});
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
ContainerTest.__meta__ = { fields : { beforeClass : { BeforeClass : null}, afterClass : { AfterClass : null}, setup : { Before : null}, tearDown : { After : null}, testExample : { Test : null}, testAsyncExample : { AsyncTest : null}, testSinglePlatform : { Test : null}}};
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
com_akifox_asynchttp_AsyncHttp.logEnabled = false;
com_akifox_asynchttp_AsyncHttp.logErrorEnabled = true;
com_akifox_asynchttp_AsyncHttp.errorSafe = false;
com_akifox_asynchttp_AsyncHttp.userAgent = "akifox-asynchttp";
com_akifox_asynchttp_AsyncHttp.maxRedirections = 10;
com_akifox_asynchttp_AsyncHttp.DEFAULT_CONTENT_TYPE = "text/plain";
com_akifox_asynchttp_AsyncHttp.DEFAULT_FILENAME = "unknown";
com_akifox_asynchttp_AsyncHttp.CONTENT_KIND_MATCHES = [{ kind : com_akifox_asynchttp_ContentKind.IMAGE, regex : new EReg("^image/(jpe?g|png|gif)","i")},{ kind : com_akifox_asynchttp_ContentKind.XML, regex : new EReg("(application/xml|text/xml|\\+xml)","i")},{ kind : com_akifox_asynchttp_ContentKind.JSON, regex : new EReg("^(application/json|\\+json)","i")},{ kind : com_akifox_asynchttp_ContentKind.TEXT, regex : new EReg("(^text|application/javascript)","i")}];
com_akifox_asynchttp_AsyncHttp.UID_CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
com_akifox_asynchttp_HttpHeaders.FORBIDDEN_ON_REQUEST = ["user-agent","host","content-type","content-length"];
com_akifox_asynchttp_HttpMethod.GET = "GET";
com_akifox_asynchttp_HttpMethod.POST = "POST";
com_akifox_asynchttp_HttpMethod.PUT = "PUT";
com_akifox_asynchttp_HttpMethod.DELETE = "DELETE";
com_akifox_asynchttp_HttpMethod.HEAD = "HEAD";
com_akifox_asynchttp_HttpMethod.CONNECT = "CONNECT";
com_akifox_asynchttp_HttpMethod.OPTIONS = "OPTIONS";
com_akifox_asynchttp_HttpMethod.TRACE = "TRACE";
com_akifox_asynchttp_HttpMethod.PATCH = "PATCH";
com_akifox_asynchttp_HttpMethod.DEFAULT_METHOD = "GET";
com_akifox_asynchttp_HttpRequest.DEFAULT_CONTENT_TYPE = "application/x-www-form-urlencoded";
com_akifox_asynchttp_HttpResponse._httpStatus = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[100] = "Continue";
	_g.h[101] = "Switching Protocols";
	_g.h[102] = "Processing";
	_g.h[200] = "OK";
	_g.h[201] = "Created";
	_g.h[202] = "Accepted";
	_g.h[203] = "Non-Authoritative Information";
	_g.h[204] = "No Content";
	_g.h[205] = "Reset Content";
	_g.h[206] = "Partial Content";
	_g.h[207] = "Multi-Status";
	_g.h[300] = "Multiple Choices";
	_g.h[301] = "Moved Permanently";
	_g.h[302] = "Found";
	_g.h[303] = "See Other";
	_g.h[304] = "Not Modified";
	_g.h[305] = "Use Proxy";
	_g.h[306] = "Switch Proxy";
	_g.h[307] = "Temporary Redirect";
	_g.h[400] = "Bad Request";
	_g.h[401] = "Unauthorized";
	_g.h[402] = "Payment Required";
	_g.h[403] = "Forbidden";
	_g.h[404] = "Not Found";
	_g.h[405] = "Method Not Allowed";
	_g.h[406] = "Not Acceptable";
	_g.h[407] = "Proxy Authentication Required";
	_g.h[408] = "Request Timeout";
	_g.h[409] = "Conflict";
	_g.h[410] = "Gone";
	_g.h[411] = "Length Required";
	_g.h[412] = "Precondition Failed";
	_g.h[413] = "Request Entity Too Large";
	_g.h[414] = "Request-URI Too Long";
	_g.h[415] = "Unsupported Media Type";
	_g.h[416] = "Requested Range Not Satisfiable";
	_g.h[417] = "Expectation Failed";
	_g.h[418] = "I'm a teapot";
	_g.h[422] = "Unprocessable Entity";
	_g.h[423] = "Locked";
	_g.h[424] = "Failed Dependency";
	_g.h[425] = "Unordered Collection";
	_g.h[426] = "Upgrade Required";
	_g.h[449] = "Retry With";
	_g.h[450] = "Blocked by Windows Parental Controls";
	_g.h[500] = "Internal Server Error";
	_g.h[501] = "Not Implemented";
	_g.h[502] = "Bad Gateway";
	_g.h[503] = "Service Unavailable";
	_g.h[504] = "Gateway Timeout";
	_g.h[505] = "HTTP Version Not Supported";
	_g.h[506] = "Variant Also Negotiates";
	_g.h[507] = "Insufficient Storage";
	_g.h[509] = "Bandwidth Limit Exceeded";
	_g.h[510] = "Not Extended";
	$r = _g;
	return $r;
}(this));
com_vige_core_GlobalState.instance = new com_vige_core_GlobalState();
com_vige_core_Navigate.routes = [];
com_vige_support_Jsonp._ID = 0;
com_vige_utils__$Colors_Colors_$Impl_$.TRANSPARENT = 0;
com_vige_utils__$Colors_Colors_$Impl_$.BLACK = -16777216;
com_vige_utils__$Colors_Colors_$Impl_$.WHITE = -1;
com_vige_utils__$Colors_Colors_$Impl_$.RED = -65536;
com_vige_utils__$Colors_Colors_$Impl_$.GREEN = -16711936;
com_vige_utils__$Colors_Colors_$Impl_$.BLUE = -16776961;
com_vige_utils__$Colors_Colors_$Impl_$.CYAN = -16711681;
com_vige_utils__$Colors_Colors_$Impl_$.MAGENTA = -65281;
com_vige_utils__$Colors_Colors_$Impl_$.YELLOW = -256;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
massive_munit_Assert.assertionCount = 0;
massive_munit_TestClassHelper.META_TAG_BEFORE_CLASS = "BeforeClass";
massive_munit_TestClassHelper.META_TAG_AFTER_CLASS = "AfterClass";
massive_munit_TestClassHelper.META_TAG_BEFORE = "Before";
massive_munit_TestClassHelper.META_TAG_AFTER = "After";
massive_munit_TestClassHelper.META_TAG_TEST = "Test";
massive_munit_TestClassHelper.META_TAG_ASYNC_TEST = "AsyncTest";
massive_munit_TestClassHelper.META_TAG_IGNORE = "Ignore";
massive_munit_TestClassHelper.META_PARAM_ASYNC_TEST = "Async";
massive_munit_TestClassHelper.META_TAG_TEST_DEBUG = "TestDebug";
massive_munit_TestClassHelper.META_TAGS = ["BeforeClass","AfterClass","Before","After","Test","AsyncTest","TestDebug"];
massive_munit_TestRunner.emptyParams = [];
massive_munit_async_AsyncDelegate.DEFAULT_TIMEOUT = 400;
massive_munit_client_HTTPClient.queue = [];
massive_munit_client_HTTPClient.responsePending = false;
massive_munit_client_JUnitReportClient.DEFAULT_ID = "junit";
massive_munit_client_PrintClientBase.DEFAULT_ID = "simple";
massive_munit_client_PrintClient.DEFAULT_ID = "print";
massive_munit_client_RichPrintClient.DEFAULT_ID = "RichPrintClient";
massive_munit_client_SummaryReportClient.DEFAULT_ID = "summary";
TestMain.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
