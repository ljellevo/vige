// Generated by Haxe 4.0.0-rc.3+e3df7a4
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
var Main = function() { };
Main.__name__ = "Main";
Main.main = function() {
	var runner = new utest_Runner();
	runner.addCase(new com_tests_TestContainer());
	utest_ui_Report.create(runner);
	runner.run();
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
Type.__name__ = "Type";
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var com_externs_JSDom = require("jsdom").JSDOM;
var com_externs_JSDomSetup = function() { };
com_externs_JSDomSetup.__name__ = "com.externs.JSDomSetup";
com_externs_JSDomSetup.init = function() {
	var dom = new com_externs_JSDom("");
	$global.document = dom.window.document;
	$global.window = dom.window;
	$global.navigator = { userAgent : "node.js"};
};
var utest_ITest = function() { };
utest_ITest.__name__ = "utest.ITest";
var utest_Test = function() {
};
utest_Test.__name__ = "utest.Test";
utest_Test.__interfaces__ = [utest_ITest];
utest_Test.prototype = {
	__initializeUtest__: function() {
		var init = { tests : [], accessories : { }};
		return init;
	}
	,__class__: utest_Test
};
var com_tests_TestContainer = function() {
	utest_Test.call(this);
};
com_tests_TestContainer.__name__ = "com.tests.TestContainer";
com_tests_TestContainer.__super__ = utest_Test;
com_tests_TestContainer.prototype = $extend(utest_Test.prototype,{
	container: null
	,setup: function() {
		com_externs_JSDomSetup.init();
		this.container = new com_vige_components_Container({ child : new com_vige_components_Text("tekst")});
	}
	,testRenderFunction: function() {
		var node = this.container.render();
		utest_Assert.notNull(node,null,{ fileName : "com/tests/TestContainer.hx", lineNumber : 25, className : "com.tests.TestContainer", methodName : "testRenderFunction"});
		utest_Assert.isTrue(node.hasChildNodes(),null,{ fileName : "com/tests/TestContainer.hx", lineNumber : 26, className : "com.tests.TestContainer", methodName : "testRenderFunction"});
		utest_Assert.equals(node.firstChild.nodeName.toLowerCase(),"p",null,{ fileName : "com/tests/TestContainer.hx", lineNumber : 27, className : "com.tests.TestContainer", methodName : "testRenderFunction"});
		utest_Assert.isFalse(node.firstChild.hasChildNodes(),null,{ fileName : "com/tests/TestContainer.hx", lineNumber : 28, className : "com.tests.TestContainer", methodName : "testRenderFunction"});
		utest_Assert.equals(node.childNodes.length,1,null,{ fileName : "com/tests/TestContainer.hx", lineNumber : 29, className : "com.tests.TestContainer", methodName : "testRenderFunction"});
	}
	,teardown: function() {
		this.container = null;
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.accessories.setup = function() {
			_gthis.setup();
			return utest_Async.getResolved();
		};
		init.tests.push({ name : "testRenderFunction", execute : function() {
			_gthis.testRenderFunction();
			return utest_Async.getResolved();
		}});
		init.accessories.teardown = function() {
			_gthis.teardown();
			return utest_Async.getResolved();
		};
		return init;
	}
	,__class__: com_tests_TestContainer
});
var com_vige_support_Widget = function() { };
com_vige_support_Widget.__name__ = "com.vige.support.Widget";
com_vige_support_Widget.prototype = {
	color: null
	,border: null
	,padding: null
	,margin: null
	,size: null
	,overflow: null
	,shadow: null
	,init: null
	,render: null
	,__class__: com_vige_support_Widget
};
var com_vige_components_Container = function(arg) {
	this.child = arg.child;
	this.color = arg.color;
	this.border = arg.border;
	this.padding = arg.padding;
	this.margin = arg.margin;
	this.size = arg.size != null ? arg.size : new com_vige_utils_Size({ height : "100%", width : "100%"});
	this.overflow = arg.overflow;
	this.shadow = arg.shadow;
};
com_vige_components_Container.__name__ = "com.vige.components.Container";
com_vige_components_Container.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Container.prototype = {
	child: null
	,color: null
	,border: null
	,padding: null
	,margin: null
	,size: null
	,overflow: null
	,shadow: null
	,init: function() {
	}
	,render: function() {
		var container = window.document.createElement("div");
		container.style.boxSizing = "border-box";
		if(this.child != null) {
			container.appendChild(this.child.render());
		}
		new com_vige_support_StyleManager().addStyleToDiv({ widget : container, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : this.size, overflow : this.overflow, shadow : this.shadow});
		return container;
	}
	,__class__: com_vige_components_Container
};
var com_vige_components_Row = function(arg) {
	this.children = null;
	this.children = arg.children;
	this.equalElementWidth = arg.equalElementWidth != null ? arg.equalElementWidth : true;
	this.cellColor = arg.cellColor != null ? arg.cellColor : new com_vige_utils_Color({ });
	this.cellSize = arg.cellSize;
	this.cellPadding = arg.cellPadding;
	this.cellMargin = arg.cellMargin;
	this.mainAxisAlignment = arg.mainAxisAlignment != null ? arg.mainAxisAlignment : com_vige_support_MainAxisAlignment.Stretch;
	this.crossAxisAlignment = arg.crossAxisAlignment != null ? arg.crossAxisAlignment : com_vige_support_CrossAxisAlignment.Stretch;
	this.flex = arg.flex != null && arg.flex;
	this.turnicate = arg.turnicate != null ? arg.turnicate : true;
	this.color = arg.color;
	this.border = arg.border;
	this.padding = arg.padding;
	this.margin = arg.margin;
	this.size = arg.size != null ? arg.size : new com_vige_utils_Size({ width : "100%"});
	this.overflow = arg.overflow;
	this.shadow = arg.shadow;
};
com_vige_components_Row.__name__ = "com.vige.components.Row";
com_vige_components_Row.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Row.prototype = {
	children: null
	,cellColor: null
	,cellSize: null
	,cellPadding: null
	,cellMargin: null
	,mainAxisAlignment: null
	,crossAxisAlignment: null
	,equalElementWidth: null
	,flex: null
	,turnicate: null
	,color: null
	,border: null
	,padding: null
	,margin: null
	,size: null
	,overflow: null
	,shadow: null
	,init: function() {
	}
	,render: function() {
		var row = window.document.createElement("div");
		if(this.flex) {
			new com_vige_support_StyleManager().addStyleToDiv({ widget : row, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : this.size, mainAxisAlignment : this.mainAxisAlignment, crossAxisAlignment : this.crossAxisAlignment, type : com_vige_support_DivType.Row, overflow : this.overflow, shadow : this.shadow});
			row.style.display = "flex";
			row.style.width = "100%";
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				row.appendChild(child.render());
			}
			return row;
		}
		if(this.equalElementWidth) {
			row.style.display = "grid";
		} else {
			row.style.display = "inline-grid";
		}
		row.style.gridAutoFlow = "column";
		new com_vige_support_StyleManager().addStyleToDiv({ widget : row, color : this.color, border : this.border, padding : this.padding, margin : this.margin, size : this.size, mainAxisAlignment : this.mainAxisAlignment, crossAxisAlignment : this.crossAxisAlignment, type : com_vige_support_DivType.Row, overflow : this.overflow, shadow : this.shadow});
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var child1 = _g11[_g2];
			++_g2;
			var rowCell = window.document.createElement("div");
			rowCell.style.boxSizing = "border-box";
			rowCell.appendChild(child1.render());
			new com_vige_support_StyleManager().addStyleToDiv({ widget : rowCell, color : this.cellColor, padding : this.cellPadding, margin : this.cellMargin, size : this.cellSize, shadow : []});
			row.appendChild(rowCell);
		}
		return row;
	}
	,__class__: com_vige_components_Row
};
var com_vige_components_Text = function(text,arg) {
	this.text = "";
	this.textSize = -1;
	this.text = text;
	if(arg == null) {
		arg = { textSize : -1, color : new com_vige_utils_Color({ }), textFormat : com_vige_support_TextFormat.p};
	}
	this.font = arg.font;
	this.textSize = arg.textSize != null ? arg.textSize : -1;
	this.color = arg.color != null ? arg.color : new com_vige_utils_Color({ });
	this.textFormat = arg.textFormat != null ? arg.textFormat : com_vige_support_TextFormat.p;
	this.textAlignment = arg.textAlignment != null ? arg.textAlignment : com_vige_support_TextAlign.Left;
	this.fontStyle = arg.fontStyle != null ? arg.fontStyle : com_vige_support_FontStyle.Normal;
	this.fontWeight = arg.fontWeight != null ? arg.fontWeight : com_vige_support_FontWeight.Normal;
	this.textOverflow = arg.textOverflow != null ? arg.textOverflow : com_vige_support_TextOverflow.Clip;
	this.whiteSpace = arg.whiteSpace != null ? arg.whiteSpace : com_vige_support_WhiteSpace.Normal;
	this.textIndent = arg.textIndent;
	this.wordBreak = arg.wordBreak != null ? arg.wordBreak : com_vige_support_WordBreak.Normal;
	this.lineHeight = arg.lineHeight;
	this.letterSpacing = arg.letterSpacing;
	this.wordSpacing = arg.wordSpacing;
};
com_vige_components_Text.__name__ = "com.vige.components.Text";
com_vige_components_Text.__interfaces__ = [com_vige_support_Widget];
com_vige_components_Text.prototype = {
	textSize: null
	,text: null
	,textFormat: null
	,font: null
	,textAlignment: null
	,fontStyle: null
	,fontWeight: null
	,textOverflow: null
	,whiteSpace: null
	,textIndent: null
	,wordBreak: null
	,lineHeight: null
	,letterSpacing: null
	,wordSpacing: null
	,color: null
	,border: null
	,padding: null
	,margin: null
	,size: null
	,overflow: null
	,shadow: null
	,init: function() {
	}
	,getText: function() {
		return this.text;
	}
	,render: function() {
		var element;
		switch(this.textFormat._hx_index) {
		case 0:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = "2em";
			element.style.margin = ".67em 0";
			element.style.fontWeight = "bold";
			break;
		case 1:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = "1.5em";
			element.style.margin = ".83em 0";
			element.style.fontWeight = "bold";
			break;
		case 2:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = "1.17em";
			element.style.margin = "1em 0";
			element.style.fontWeight = "bold";
			break;
		case 3:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = "1em";
			element.style.margin = "1.33em 0";
			element.style.fontWeight = "bold";
			break;
		case 4:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = ".83em";
			element.style.margin = "1.67em 0";
			element.style.fontWeight = "bold";
			break;
		case 5:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = ".67em";
			element.style.margin = "2.33em 0";
			element.style.fontWeight = "bold";
			break;
		case 6:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = "1em";
			element.style.margin = "0 0";
			element.style.fontWeight = "normal";
			break;
		case 7:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = "1em";
			element.style.margin = "0 0";
			element.style.fontWeight = "normal";
			break;
		case 8:
			element = window.document.createElement("p");
			element.style.display = "block";
			element.style.fontSize = "1em";
			element.style.margin = "0 0";
			element.style.fontWeight = "normal";
			break;
		}
		switch(this.textAlignment._hx_index) {
		case 0:
			element.style.textAlign = "left";
			break;
		case 1:
			element.style.textAlign = "right";
			break;
		case 2:
			element.style.textAlign = "center";
			break;
		case 3:
			element.style.textAlign = "justify";
			break;
		case 4:
			element.style.textAlign = "inherit";
			break;
		}
		switch(this.fontStyle._hx_index) {
		case 0:
			element.style.fontStyle = "normal";
			break;
		case 1:
			element.style.fontStyle = "italic";
			break;
		case 2:
			element.style.fontStyle = "oblique";
			break;
		case 3:
			element.style.fontStyle = "initial";
			break;
		case 4:
			element.style.fontStyle = "inherit";
			break;
		}
		switch(this.fontWeight._hx_index) {
		case 0:
			element.style.fontWeight = "normal";
			break;
		case 1:
			element.style.fontWeight = "bold";
			break;
		case 2:
			element.style.fontWeight = "bolder";
			break;
		case 3:
			element.style.fontWeight = "lighter";
			break;
		case 4:
			element.style.fontWeight = "100";
			break;
		case 5:
			element.style.fontWeight = "200";
			break;
		case 6:
			element.style.fontWeight = "300";
			break;
		case 7:
			element.style.fontWeight = "400";
			break;
		case 8:
			element.style.fontWeight = "500";
			break;
		case 9:
			element.style.fontWeight = "600";
			break;
		case 10:
			element.style.fontWeight = "700";
			break;
		case 11:
			element.style.fontWeight = "800";
			break;
		case 12:
			element.style.fontWeight = "900";
			break;
		}
		switch(this.textOverflow._hx_index) {
		case 0:
			element.style.textOverflow = "clip";
			break;
		case 1:
			element.style.textOverflow = "ellipsis";
			break;
		case 2:
			element.style.textOverflow = "string";
			break;
		case 3:
			element.style.textOverflow = "initial";
			break;
		case 4:
			element.style.textOverflow = "inherit";
			break;
		}
		switch(this.whiteSpace._hx_index) {
		case 0:
			element.style.whiteSpace = "normal";
			break;
		case 1:
			element.style.whiteSpace = "nowrap";
			break;
		case 2:
			element.style.whiteSpace = "pre";
			break;
		case 3:
			element.style.whiteSpace = "pre-line";
			break;
		case 4:
			element.style.whiteSpace = "pre-wrap";
			break;
		case 5:
			element.style.whiteSpace = "break-space";
			break;
		}
		switch(this.wordBreak._hx_index) {
		case 0:
			element.style.wordBreak = "normal";
			break;
		case 1:
			element.style.wordBreak = "break-all";
			break;
		case 2:
			element.style.wordBreak = "keep-all";
			break;
		case 3:
			element.style.wordBreak = "break-word";
			break;
		}
		if(this.textSize > -1) {
			element.style.fontSize = Std.string(this.textSize);
		}
		if(this.font != null) {
			var tmp = this.font.getFamilyName() + ", ";
			var tmp1 = this.font.getGenericFamily();
			element.style.fontFamily = tmp + tmp1;
		}
		if(this.textIndent != null) {
			element.style.textIndent = Std.string(this.textIndent) + "px";
		}
		if(this.lineHeight != null) {
			element.style.lineHeight = Std.string(this.lineHeight) + "px";
		} else {
			element.style.lineHeight = "normal";
		}
		if(this.letterSpacing != null) {
			element.style.letterSpacing = Std.string(this.letterSpacing) + "px";
		} else {
			element.style.letterSpacing = "normal";
		}
		if(this.wordSpacing != null) {
			element.style.wordSpacing = Std.string(this.wordSpacing) + "px";
		} else {
			element.style.wordSpacing = "normal";
		}
		element.style.color = this.color.getColor();
		element.style.backgroundColor = this.color.getBackgroundColor();
		element.innerText = this.text;
		return element;
	}
	,__class__: com_vige_components_Text
};
var com_vige_support_MainAxisAlignment = $hxEnums["com.vige.support.MainAxisAlignment"] = { __ename__ : "com.vige.support.MainAxisAlignment", __constructs__ : ["TopLeft","TopCenter","TopRight","Left","Center","Right","LowerLeft","LowerCenter","LowerRight","Stretch"]
	,TopLeft: {_hx_index:0,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,TopCenter: {_hx_index:1,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,TopRight: {_hx_index:2,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,Left: {_hx_index:3,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,Center: {_hx_index:4,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,Right: {_hx_index:5,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,LowerLeft: {_hx_index:6,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,LowerCenter: {_hx_index:7,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,LowerRight: {_hx_index:8,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
	,Stretch: {_hx_index:9,__enum__:"com.vige.support.MainAxisAlignment",toString:$estr}
};
var com_vige_support_CrossAxisAlignment = $hxEnums["com.vige.support.CrossAxisAlignment"] = { __ename__ : "com.vige.support.CrossAxisAlignment", __constructs__ : ["Stretch","Center","FlexStart","FlexEnd","Initial","Inherit","SpacedEvenly","SpaceBetween","SpaceAround"]
	,Stretch: {_hx_index:0,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
	,Center: {_hx_index:1,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
	,FlexStart: {_hx_index:2,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
	,FlexEnd: {_hx_index:3,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
	,Initial: {_hx_index:4,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
	,Inherit: {_hx_index:5,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
	,SpacedEvenly: {_hx_index:6,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
	,SpaceBetween: {_hx_index:7,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
	,SpaceAround: {_hx_index:8,__enum__:"com.vige.support.CrossAxisAlignment",toString:$estr}
};
var com_vige_support_DivType = $hxEnums["com.vige.support.DivType"] = { __ename__ : "com.vige.support.DivType", __constructs__ : ["Row","Column","Other"]
	,Row: {_hx_index:0,__enum__:"com.vige.support.DivType",toString:$estr}
	,Column: {_hx_index:1,__enum__:"com.vige.support.DivType",toString:$estr}
	,Other: {_hx_index:2,__enum__:"com.vige.support.DivType",toString:$estr}
};
var com_vige_support_Overflow = $hxEnums["com.vige.support.Overflow"] = { __ename__ : "com.vige.support.Overflow", __constructs__ : ["Visible","Hidden","Scroll","Auto","Initial","Inherit"]
	,Visible: {_hx_index:0,__enum__:"com.vige.support.Overflow",toString:$estr}
	,Hidden: {_hx_index:1,__enum__:"com.vige.support.Overflow",toString:$estr}
	,Scroll: {_hx_index:2,__enum__:"com.vige.support.Overflow",toString:$estr}
	,Auto: {_hx_index:3,__enum__:"com.vige.support.Overflow",toString:$estr}
	,Initial: {_hx_index:4,__enum__:"com.vige.support.Overflow",toString:$estr}
	,Inherit: {_hx_index:5,__enum__:"com.vige.support.Overflow",toString:$estr}
};
var com_vige_support_CenterAlignment = $hxEnums["com.vige.support.CenterAlignment"] = { __ename__ : "com.vige.support.CenterAlignment", __constructs__ : ["Horizontal","Vertical","Both"]
	,Horizontal: {_hx_index:0,__enum__:"com.vige.support.CenterAlignment",toString:$estr}
	,Vertical: {_hx_index:1,__enum__:"com.vige.support.CenterAlignment",toString:$estr}
	,Both: {_hx_index:2,__enum__:"com.vige.support.CenterAlignment",toString:$estr}
};
var com_vige_support_ResizeModifier = $hxEnums["com.vige.support.ResizeModifier"] = { __ename__ : "com.vige.support.ResizeModifier", __constructs__ : ["Height","Width","None"]
	,Height: {_hx_index:0,__enum__:"com.vige.support.ResizeModifier",toString:$estr}
	,Width: {_hx_index:1,__enum__:"com.vige.support.ResizeModifier",toString:$estr}
	,None: {_hx_index:2,__enum__:"com.vige.support.ResizeModifier",toString:$estr}
};
var com_vige_support_NavbarPosition = $hxEnums["com.vige.support.NavbarPosition"] = { __ename__ : "com.vige.support.NavbarPosition", __constructs__ : ["Top","Bottom"]
	,Top: {_hx_index:0,__enum__:"com.vige.support.NavbarPosition",toString:$estr}
	,Bottom: {_hx_index:1,__enum__:"com.vige.support.NavbarPosition",toString:$estr}
};
var com_vige_support_TextFormat = $hxEnums["com.vige.support.TextFormat"] = { __ename__ : "com.vige.support.TextFormat", __constructs__ : ["h1","h2","h3","h4","h5","h6","p","a","pre"]
	,h1: {_hx_index:0,__enum__:"com.vige.support.TextFormat",toString:$estr}
	,h2: {_hx_index:1,__enum__:"com.vige.support.TextFormat",toString:$estr}
	,h3: {_hx_index:2,__enum__:"com.vige.support.TextFormat",toString:$estr}
	,h4: {_hx_index:3,__enum__:"com.vige.support.TextFormat",toString:$estr}
	,h5: {_hx_index:4,__enum__:"com.vige.support.TextFormat",toString:$estr}
	,h6: {_hx_index:5,__enum__:"com.vige.support.TextFormat",toString:$estr}
	,p: {_hx_index:6,__enum__:"com.vige.support.TextFormat",toString:$estr}
	,a: {_hx_index:7,__enum__:"com.vige.support.TextFormat",toString:$estr}
	,pre: {_hx_index:8,__enum__:"com.vige.support.TextFormat",toString:$estr}
};
var com_vige_support_TextAlign = $hxEnums["com.vige.support.TextAlign"] = { __ename__ : "com.vige.support.TextAlign", __constructs__ : ["Left","Right","Center","Justify","Inherit"]
	,Left: {_hx_index:0,__enum__:"com.vige.support.TextAlign",toString:$estr}
	,Right: {_hx_index:1,__enum__:"com.vige.support.TextAlign",toString:$estr}
	,Center: {_hx_index:2,__enum__:"com.vige.support.TextAlign",toString:$estr}
	,Justify: {_hx_index:3,__enum__:"com.vige.support.TextAlign",toString:$estr}
	,Inherit: {_hx_index:4,__enum__:"com.vige.support.TextAlign",toString:$estr}
};
var com_vige_support_FontStyle = $hxEnums["com.vige.support.FontStyle"] = { __ename__ : "com.vige.support.FontStyle", __constructs__ : ["Normal","Italic","Oblique","Initial","Inherit"]
	,Normal: {_hx_index:0,__enum__:"com.vige.support.FontStyle",toString:$estr}
	,Italic: {_hx_index:1,__enum__:"com.vige.support.FontStyle",toString:$estr}
	,Oblique: {_hx_index:2,__enum__:"com.vige.support.FontStyle",toString:$estr}
	,Initial: {_hx_index:3,__enum__:"com.vige.support.FontStyle",toString:$estr}
	,Inherit: {_hx_index:4,__enum__:"com.vige.support.FontStyle",toString:$estr}
};
var com_vige_support_FontWeight = $hxEnums["com.vige.support.FontWeight"] = { __ename__ : "com.vige.support.FontWeight", __constructs__ : ["Normal","Bold","Bolder","Lighter","W100","W200","W300","W400","W500","W600","W700","W800","W900"]
	,Normal: {_hx_index:0,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,Bold: {_hx_index:1,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,Bolder: {_hx_index:2,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,Lighter: {_hx_index:3,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W100: {_hx_index:4,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W200: {_hx_index:5,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W300: {_hx_index:6,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W400: {_hx_index:7,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W500: {_hx_index:8,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W600: {_hx_index:9,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W700: {_hx_index:10,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W800: {_hx_index:11,__enum__:"com.vige.support.FontWeight",toString:$estr}
	,W900: {_hx_index:12,__enum__:"com.vige.support.FontWeight",toString:$estr}
};
var com_vige_support_TextOverflow = $hxEnums["com.vige.support.TextOverflow"] = { __ename__ : "com.vige.support.TextOverflow", __constructs__ : ["Clip","Ellipsis","String","Initial","Inherit"]
	,Clip: {_hx_index:0,__enum__:"com.vige.support.TextOverflow",toString:$estr}
	,Ellipsis: {_hx_index:1,__enum__:"com.vige.support.TextOverflow",toString:$estr}
	,String: {_hx_index:2,__enum__:"com.vige.support.TextOverflow",toString:$estr}
	,Initial: {_hx_index:3,__enum__:"com.vige.support.TextOverflow",toString:$estr}
	,Inherit: {_hx_index:4,__enum__:"com.vige.support.TextOverflow",toString:$estr}
};
var com_vige_support_WhiteSpace = $hxEnums["com.vige.support.WhiteSpace"] = { __ename__ : "com.vige.support.WhiteSpace", __constructs__ : ["Normal","Nowrap","Pre","PreLine","PreWrap","BreakSpace"]
	,Normal: {_hx_index:0,__enum__:"com.vige.support.WhiteSpace",toString:$estr}
	,Nowrap: {_hx_index:1,__enum__:"com.vige.support.WhiteSpace",toString:$estr}
	,Pre: {_hx_index:2,__enum__:"com.vige.support.WhiteSpace",toString:$estr}
	,PreLine: {_hx_index:3,__enum__:"com.vige.support.WhiteSpace",toString:$estr}
	,PreWrap: {_hx_index:4,__enum__:"com.vige.support.WhiteSpace",toString:$estr}
	,BreakSpace: {_hx_index:5,__enum__:"com.vige.support.WhiteSpace",toString:$estr}
};
var com_vige_support_WordBreak = $hxEnums["com.vige.support.WordBreak"] = { __ename__ : "com.vige.support.WordBreak", __constructs__ : ["Normal","BreakAll","KeepAll","BreakWord"]
	,Normal: {_hx_index:0,__enum__:"com.vige.support.WordBreak",toString:$estr}
	,BreakAll: {_hx_index:1,__enum__:"com.vige.support.WordBreak",toString:$estr}
	,KeepAll: {_hx_index:2,__enum__:"com.vige.support.WordBreak",toString:$estr}
	,BreakWord: {_hx_index:3,__enum__:"com.vige.support.WordBreak",toString:$estr}
};
var com_vige_support_BorderStyle = $hxEnums["com.vige.support.BorderStyle"] = { __ename__ : "com.vige.support.BorderStyle", __constructs__ : ["Dotted","Dashed","Solid","Double","Groove","Ridge","Inset","Outset","None","Hidden"]
	,Dotted: {_hx_index:0,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,Dashed: {_hx_index:1,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,Solid: {_hx_index:2,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,Double: {_hx_index:3,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,Groove: {_hx_index:4,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,Ridge: {_hx_index:5,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,Inset: {_hx_index:6,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,Outset: {_hx_index:7,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,None: {_hx_index:8,__enum__:"com.vige.support.BorderStyle",toString:$estr}
	,Hidden: {_hx_index:9,__enum__:"com.vige.support.BorderStyle",toString:$estr}
};
var com_vige_support_BorderSides = $hxEnums["com.vige.support.BorderSides"] = { __ename__ : "com.vige.support.BorderSides", __constructs__ : ["Top","Right","Bottom","Left","All"]
	,Top: {_hx_index:0,__enum__:"com.vige.support.BorderSides",toString:$estr}
	,Right: {_hx_index:1,__enum__:"com.vige.support.BorderSides",toString:$estr}
	,Bottom: {_hx_index:2,__enum__:"com.vige.support.BorderSides",toString:$estr}
	,Left: {_hx_index:3,__enum__:"com.vige.support.BorderSides",toString:$estr}
	,All: {_hx_index:4,__enum__:"com.vige.support.BorderSides",toString:$estr}
};
var com_vige_support_InputType = $hxEnums["com.vige.support.InputType"] = { __ename__ : "com.vige.support.InputType", __constructs__ : ["Button","Checkbox","Color","DateTime","DatetimeLocal","Email","File","Hidden","Image","Month","Number","Password","Radio","Range","Reset","Search","Submit","Tel","Text","Time","Url","Week"]
	,Button: {_hx_index:0,__enum__:"com.vige.support.InputType",toString:$estr}
	,Checkbox: {_hx_index:1,__enum__:"com.vige.support.InputType",toString:$estr}
	,Color: {_hx_index:2,__enum__:"com.vige.support.InputType",toString:$estr}
	,DateTime: {_hx_index:3,__enum__:"com.vige.support.InputType",toString:$estr}
	,DatetimeLocal: {_hx_index:4,__enum__:"com.vige.support.InputType",toString:$estr}
	,Email: {_hx_index:5,__enum__:"com.vige.support.InputType",toString:$estr}
	,File: {_hx_index:6,__enum__:"com.vige.support.InputType",toString:$estr}
	,Hidden: {_hx_index:7,__enum__:"com.vige.support.InputType",toString:$estr}
	,Image: {_hx_index:8,__enum__:"com.vige.support.InputType",toString:$estr}
	,Month: {_hx_index:9,__enum__:"com.vige.support.InputType",toString:$estr}
	,Number: {_hx_index:10,__enum__:"com.vige.support.InputType",toString:$estr}
	,Password: {_hx_index:11,__enum__:"com.vige.support.InputType",toString:$estr}
	,Radio: {_hx_index:12,__enum__:"com.vige.support.InputType",toString:$estr}
	,Range: {_hx_index:13,__enum__:"com.vige.support.InputType",toString:$estr}
	,Reset: {_hx_index:14,__enum__:"com.vige.support.InputType",toString:$estr}
	,Search: {_hx_index:15,__enum__:"com.vige.support.InputType",toString:$estr}
	,Submit: {_hx_index:16,__enum__:"com.vige.support.InputType",toString:$estr}
	,Tel: {_hx_index:17,__enum__:"com.vige.support.InputType",toString:$estr}
	,Text: {_hx_index:18,__enum__:"com.vige.support.InputType",toString:$estr}
	,Time: {_hx_index:19,__enum__:"com.vige.support.InputType",toString:$estr}
	,Url: {_hx_index:20,__enum__:"com.vige.support.InputType",toString:$estr}
	,Week: {_hx_index:21,__enum__:"com.vige.support.InputType",toString:$estr}
};
var com_vige_support_Fonts = function(familyName,genericFamily) {
	this.familyName = familyName;
	this.genericFamily = genericFamily;
};
com_vige_support_Fonts.__name__ = "com.vige.support.Fonts";
com_vige_support_Fonts.prototype = {
	familyName: null
	,genericFamily: null
	,getFamilyName: function() {
		return this.familyName;
	}
	,getGenericFamily: function() {
		return this.genericFamily;
	}
	,__class__: com_vige_support_Fonts
};
var com_vige_support_StyleManager = function() {
};
com_vige_support_StyleManager.__name__ = "com.vige.support.StyleManager";
com_vige_support_StyleManager.prototype = {
	addStyleToDiv: function(arg) {
		if(arg.type == null) {
			arg.type = com_vige_support_DivType.Other;
		}
		if(arg.size != null) {
			arg.widget.style.minHeight = arg.size.getMinHeight();
			arg.widget.style.minWidth = arg.size.getMinWidth();
			arg.widget.style.height = arg.size.getHeight();
			arg.widget.style.width = arg.size.getWidth();
			arg.widget.style.maxHeight = arg.size.getMaxHeight();
			arg.widget.style.maxWidth = arg.size.getMaxWidth();
		}
		if(arg.color != null) {
			arg.widget.style.backgroundColor = arg.color.getBackgroundColor();
			arg.widget.style.color = arg.color.getColor();
		}
		if(arg.padding != null) {
			arg.widget.style.padding = arg.padding.getPadding();
		}
		if(arg.margin != null) {
			var tmp = arg.margin != null ? arg.margin.getMargin() : com_vige_utils_Margin.all(0.0).getMargin();
			arg.widget.style.margin = tmp;
		}
		if(arg.border != null) {
			switch(arg.border.getSides()._hx_index) {
			case 0:
				var tmp1 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp2 = arg.border.getColor();
				arg.widget.style.borderTop = tmp1 + tmp2;
				break;
			case 1:
				var tmp3 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp4 = arg.border.getColor();
				arg.widget.style.borderRight = tmp3 + tmp4;
				break;
			case 2:
				var tmp5 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp6 = arg.border.getColor();
				arg.widget.style.borderBottom = tmp5 + tmp6;
				break;
			case 3:
				var tmp7 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp8 = arg.border.getColor();
				arg.widget.style.borderLeft = tmp7 + tmp8;
				break;
			case 4:
				var tmp9 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp10 = arg.border.getColor();
				arg.widget.style.border = tmp9 + tmp10;
				break;
			}
			arg.widget.style.borderRadius = arg.border.getCornerRadius();
		}
		if(arg.overflow != null) {
			switch(arg.overflow._hx_index) {
			case 0:
				arg.widget.style.overflow = "visible";
				break;
			case 1:
				arg.widget.style.overflow = "hidden";
				break;
			case 2:
				arg.widget.style.overflow = "scroll";
				break;
			case 3:
				arg.widget.style.overflow = "auto";
				break;
			case 4:
				arg.widget.style.overflow = "initial";
				break;
			case 5:
				arg.widget.style.overflow = "inherit";
				break;
			}
		}
		if(arg.mainAxisAlignment != null) {
			switch(arg.mainAxisAlignment._hx_index) {
			case 0:
				arg.widget.style.placeItems = "start start";
				break;
			case 1:
				arg.widget.style.placeItems = "start center";
				break;
			case 2:
				arg.widget.style.placeItems = "start end";
				break;
			case 3:
				arg.widget.style.placeItems = "center start";
				break;
			case 4:
				arg.widget.style.placeItems = "center center";
				break;
			case 5:
				arg.widget.style.placeItems = "center end";
				break;
			case 6:
				arg.widget.style.placeItems = "end start";
				break;
			case 7:
				arg.widget.style.placeItems = "end center";
				break;
			case 8:
				arg.widget.style.placeItems = "end end";
				break;
			case 9:
				arg.widget.style.placeItems = "stretch";
				break;
			}
		}
		if(arg.type == com_vige_support_DivType.Row) {
			if(arg.crossAxisAlignment != null) {
				switch(arg.crossAxisAlignment._hx_index) {
				case 0:
					arg.widget.style.justifyContent = null;
					break;
				case 1:
					arg.widget.style.justifyContent = "center";
					break;
				case 2:
					arg.widget.style.justifyContent = "flex-start";
					break;
				case 3:
					arg.widget.style.justifyContent = "flex-end";
					break;
				case 4:
					arg.widget.style.justifyContent = "initial";
					break;
				case 5:
					arg.widget.style.justifyContent = "inherit";
					break;
				case 6:
					arg.widget.style.justifyContent = "space-evenly";
					break;
				case 7:
					arg.widget.style.justifyContent = "space-between";
					break;
				case 8:
					arg.widget.style.justifyContent = "space-around";
					break;
				}
			}
		} else if(arg.type == com_vige_support_DivType.Column) {
			if(arg.crossAxisAlignment != null) {
				switch(arg.crossAxisAlignment._hx_index) {
				case 0:
					arg.widget.style.alignContent = "stretch";
					break;
				case 1:
					arg.widget.style.alignContent = "center";
					break;
				case 2:
					arg.widget.style.alignContent = "flex-start";
					break;
				case 3:
					arg.widget.style.alignContent = "flex-end";
					break;
				case 4:
					arg.widget.style.alignContent = "initial";
					break;
				case 5:
					arg.widget.style.alignContent = "inherit";
					break;
				case 6:
					arg.widget.style.alignContent = "space-evenly";
					break;
				case 7:
					arg.widget.style.alignContent = "space-between";
					break;
				case 8:
					arg.widget.style.alignContent = "space-around";
					break;
				}
			}
		}
		if(arg.shadow != null && arg.shadow.length > 0) {
			var joinedString = "";
			var _g = 0;
			var _g1 = arg.shadow.length;
			while(_g < _g1) {
				var i = _g++;
				if(i != 0) {
					joinedString += ", ";
				}
				joinedString += arg.shadow[i].getShadow();
			}
			arg.widget.style.boxShadow = joinedString;
		}
		return arg.widget;
	}
	,addStyleToButton: function(arg) {
		if(arg.size != null) {
			arg.widget.style.minHeight = arg.size.getMinHeight();
			arg.widget.style.minWidth = arg.size.getMinWidth();
			arg.widget.style.height = arg.size.getHeight();
			arg.widget.style.width = arg.size.getWidth();
			arg.widget.style.maxHeight = arg.size.getMaxHeight();
			arg.widget.style.maxWidth = arg.size.getMaxWidth();
		}
		if(arg.color != null) {
			arg.widget.style.backgroundColor = arg.color.getBackgroundColor();
			arg.widget.style.color = arg.color.getColor();
		}
		if(arg.padding != null) {
			arg.widget.style.padding = arg.padding.getPadding();
		}
		if(arg.margin != null) {
			arg.widget.style.margin = arg.margin.getMargin();
		}
		if(arg.overflow != null) {
			switch(arg.overflow._hx_index) {
			case 0:
				arg.widget.style.overflow = "visible";
				break;
			case 1:
				arg.widget.style.overflow = "hidden";
				break;
			case 2:
				arg.widget.style.overflow = "scroll";
				break;
			case 3:
				arg.widget.style.overflow = "auto";
				break;
			case 4:
				arg.widget.style.overflow = "initial";
				break;
			case 5:
				arg.widget.style.overflow = "inherit";
				break;
			}
		}
		if(arg.border != null) {
			switch(arg.border.getSides()._hx_index) {
			case 0:
				var tmp = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp1 = arg.border.getColor();
				arg.widget.style.borderTop = tmp + tmp1;
				break;
			case 1:
				var tmp2 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp3 = arg.border.getColor();
				arg.widget.style.borderRight = tmp2 + tmp3;
				break;
			case 2:
				var tmp4 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp5 = arg.border.getColor();
				arg.widget.style.borderBottom = tmp4 + tmp5;
				break;
			case 3:
				var tmp6 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp7 = arg.border.getColor();
				arg.widget.style.borderLeft = tmp6 + tmp7;
				break;
			case 4:
				var tmp8 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp9 = arg.border.getColor();
				arg.widget.style.border = tmp8 + tmp9;
				break;
			}
			arg.widget.style.borderRadius = arg.border.getCornerRadius();
		}
		if(arg.shadow != null && arg.shadow.length > 0) {
			arg.widget.style.boxShadow = arg.shadow.join(", ");
		}
		return arg.widget;
	}
	,addStyleToAnchor: function(arg) {
		if(arg.size != null) {
			arg.widget.style.minHeight = arg.size.getMinHeight();
			arg.widget.style.minWidth = arg.size.getMinWidth();
			arg.widget.style.height = arg.size.getHeight();
			arg.widget.style.width = arg.size.getWidth();
			arg.widget.style.maxHeight = arg.size.getMaxHeight();
			arg.widget.style.maxWidth = arg.size.getMaxWidth();
		}
		if(arg.color != null) {
			arg.widget.style.backgroundColor = arg.color.getBackgroundColor();
			arg.widget.style.color = arg.color.getColor();
		}
		if(arg.padding != null) {
			arg.widget.style.padding = arg.padding.getPadding();
		}
		if(arg.margin != null) {
			arg.widget.style.margin = arg.margin.getMargin();
		}
		if(arg.overflow != null) {
			switch(arg.overflow._hx_index) {
			case 0:
				arg.widget.style.overflow = "visible";
				break;
			case 1:
				arg.widget.style.overflow = "hidden";
				break;
			case 2:
				arg.widget.style.overflow = "scroll";
				break;
			case 3:
				arg.widget.style.overflow = "auto";
				break;
			case 4:
				arg.widget.style.overflow = "initial";
				break;
			case 5:
				arg.widget.style.overflow = "inherit";
				break;
			}
		}
		if(arg.border != null) {
			switch(arg.border.getSides()._hx_index) {
			case 0:
				var tmp = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp1 = arg.border.getColor();
				arg.widget.style.borderTop = tmp + tmp1;
				break;
			case 1:
				var tmp2 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp3 = arg.border.getColor();
				arg.widget.style.borderRight = tmp2 + tmp3;
				break;
			case 2:
				var tmp4 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp5 = arg.border.getColor();
				arg.widget.style.borderBottom = tmp4 + tmp5;
				break;
			case 3:
				var tmp6 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp7 = arg.border.getColor();
				arg.widget.style.borderLeft = tmp6 + tmp7;
				break;
			case 4:
				var tmp8 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp9 = arg.border.getColor();
				arg.widget.style.border = tmp8 + tmp9;
				break;
			}
			arg.widget.style.borderRadius = arg.border.getCornerRadius();
		}
		if(arg.shadow != null && arg.shadow.length > 0) {
			arg.widget.style.boxShadow = arg.shadow.join(", ");
		}
		return arg.widget;
	}
	,addStyleToImage: function(arg) {
		if(arg.size != null) {
			arg.widget.style.minHeight = arg.size.getMinHeight();
			arg.widget.style.minWidth = arg.size.getMinWidth();
			arg.widget.style.height = arg.size.getHeight();
			arg.widget.style.width = arg.size.getWidth();
			arg.widget.style.maxHeight = arg.size.getMaxHeight();
			arg.widget.style.maxWidth = arg.size.getMaxWidth();
		}
		if(arg.color != null) {
			arg.widget.style.backgroundColor = arg.color.getBackgroundColor();
			arg.widget.style.color = arg.color.getColor();
		}
		if(arg.padding != null) {
			arg.widget.style.padding = arg.padding.getPadding();
		}
		if(arg.margin != null) {
			arg.widget.style.margin = arg.margin.getMargin();
		}
		if(arg.overflow != null) {
			switch(arg.overflow._hx_index) {
			case 0:
				arg.widget.style.overflow = "visible";
				break;
			case 1:
				arg.widget.style.overflow = "hidden";
				break;
			case 2:
				arg.widget.style.overflow = "scroll";
				break;
			case 3:
				arg.widget.style.overflow = "auto";
				break;
			case 4:
				arg.widget.style.overflow = "initial";
				break;
			case 5:
				arg.widget.style.overflow = "inherit";
				break;
			}
		}
		if(arg.border != null) {
			switch(arg.border.getSides()._hx_index) {
			case 0:
				var tmp = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp1 = arg.border.getColor();
				arg.widget.style.borderTop = tmp + tmp1;
				break;
			case 1:
				var tmp2 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp3 = arg.border.getColor();
				arg.widget.style.borderRight = tmp2 + tmp3;
				break;
			case 2:
				var tmp4 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp5 = arg.border.getColor();
				arg.widget.style.borderBottom = tmp4 + tmp5;
				break;
			case 3:
				var tmp6 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp7 = arg.border.getColor();
				arg.widget.style.borderLeft = tmp6 + tmp7;
				break;
			case 4:
				var tmp8 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp9 = arg.border.getColor();
				arg.widget.style.border = tmp8 + tmp9;
				break;
			}
			arg.widget.style.borderRadius = arg.border.getCornerRadius();
		}
		if(arg.shadow != null && arg.shadow.length > 0) {
			arg.widget.style.boxShadow = arg.shadow.join(", ");
		}
		return arg.widget;
	}
	,addStyleToEmbeded: function(arg) {
		if(arg.size != null) {
			arg.widget.style.minHeight = arg.size.getMinHeight();
			arg.widget.style.minWidth = arg.size.getMinWidth();
			arg.widget.style.height = arg.size.getHeight();
			arg.widget.style.width = arg.size.getWidth();
			arg.widget.style.maxHeight = arg.size.getMaxHeight();
			arg.widget.style.maxWidth = arg.size.getMaxWidth();
		}
		if(arg.color != null) {
			arg.widget.style.backgroundColor = arg.color.getBackgroundColor();
			arg.widget.style.color = arg.color.getColor();
		}
		if(arg.padding != null) {
			arg.widget.style.padding = arg.padding.getPadding();
		}
		if(arg.margin != null) {
			var tmp = arg.margin != null ? arg.margin.getMargin() : com_vige_utils_Margin.all(0.0).getMargin();
			arg.widget.style.margin = tmp;
		}
		if(arg.overflow != null) {
			switch(arg.overflow._hx_index) {
			case 0:
				arg.widget.style.overflow = "visible";
				break;
			case 1:
				arg.widget.style.overflow = "hidden";
				break;
			case 2:
				arg.widget.style.overflow = "scroll";
				break;
			case 3:
				arg.widget.style.overflow = "auto";
				break;
			case 4:
				arg.widget.style.overflow = "initial";
				break;
			case 5:
				arg.widget.style.overflow = "inherit";
				break;
			}
		}
		if(arg.border != null) {
			switch(arg.border.getSides()._hx_index) {
			case 0:
				var tmp1 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp2 = arg.border.getColor();
				arg.widget.style.borderTop = tmp1 + tmp2;
				break;
			case 1:
				var tmp3 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp4 = arg.border.getColor();
				arg.widget.style.borderRight = tmp3 + tmp4;
				break;
			case 2:
				var tmp5 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp6 = arg.border.getColor();
				arg.widget.style.borderBottom = tmp5 + tmp6;
				break;
			case 3:
				var tmp7 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp8 = arg.border.getColor();
				arg.widget.style.borderLeft = tmp7 + tmp8;
				break;
			case 4:
				var tmp9 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp10 = arg.border.getColor();
				arg.widget.style.border = tmp9 + tmp10;
				break;
			}
			arg.widget.style.borderRadius = arg.border.getCornerRadius();
		}
		if(arg.mainAxisAlignment != null) {
			switch(arg.mainAxisAlignment._hx_index) {
			case 0:
				arg.widget.style.placeItems = "start start";
				break;
			case 1:
				arg.widget.style.placeItems = "start center";
				break;
			case 2:
				arg.widget.style.placeItems = "start end";
				break;
			case 3:
				arg.widget.style.placeItems = "center start";
				break;
			case 4:
				arg.widget.style.placeItems = "center center";
				break;
			case 5:
				arg.widget.style.placeItems = "center end";
				break;
			case 6:
				arg.widget.style.placeItems = "end start";
				break;
			case 7:
				arg.widget.style.placeItems = "end center";
				break;
			case 8:
				arg.widget.style.placeItems = "end end";
				break;
			case 9:
				arg.widget.style.placeItems = "stretch";
				break;
			}
		}
		if(arg.shadow != null && arg.shadow.length > 0) {
			arg.widget.style.boxShadow = arg.shadow.join(", ");
		}
		return arg.widget;
	}
	,addStyleToInput: function(arg) {
		if(arg.size != null) {
			arg.widget.style.minHeight = arg.size.getMinHeight();
			arg.widget.style.minWidth = arg.size.getMinWidth();
			arg.widget.style.height = arg.size.getHeight();
			arg.widget.style.width = arg.size.getWidth();
			arg.widget.style.maxHeight = arg.size.getMaxHeight();
			arg.widget.style.maxWidth = arg.size.getMaxWidth();
		}
		if(arg.color != null) {
			arg.widget.style.backgroundColor = arg.color.getBackgroundColor();
			arg.widget.style.color = arg.color.getColor();
		}
		if(arg.padding != null) {
			arg.widget.style.padding = arg.padding.getPadding();
		}
		if(arg.margin != null) {
			var tmp = arg.margin != null ? arg.margin.getMargin() : com_vige_utils_Margin.all(0.0).getMargin();
			arg.widget.style.margin = tmp;
		}
		if(arg.overflow != null) {
			switch(arg.overflow._hx_index) {
			case 0:
				arg.widget.style.overflow = "visible";
				break;
			case 1:
				arg.widget.style.overflow = "hidden";
				break;
			case 2:
				arg.widget.style.overflow = "scroll";
				break;
			case 3:
				arg.widget.style.overflow = "auto";
				break;
			case 4:
				arg.widget.style.overflow = "initial";
				break;
			case 5:
				arg.widget.style.overflow = "inherit";
				break;
			}
		}
		if(arg.border != null) {
			switch(arg.border.getSides()._hx_index) {
			case 0:
				var tmp1 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp2 = arg.border.getColor();
				arg.widget.style.borderTop = tmp1 + tmp2;
				break;
			case 1:
				var tmp3 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp4 = arg.border.getColor();
				arg.widget.style.borderRight = tmp3 + tmp4;
				break;
			case 2:
				var tmp5 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp6 = arg.border.getColor();
				arg.widget.style.borderBottom = tmp5 + tmp6;
				break;
			case 3:
				var tmp7 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp8 = arg.border.getColor();
				arg.widget.style.borderLeft = tmp7 + tmp8;
				break;
			case 4:
				var tmp9 = arg.border.getWidth() + " " + arg.border.getStyle() + " ";
				var tmp10 = arg.border.getColor();
				arg.widget.style.border = tmp9 + tmp10;
				break;
			}
			arg.widget.style.borderRadius = arg.border.getCornerRadius();
		}
		if(arg.mainAxisAlignment != null) {
			switch(arg.mainAxisAlignment._hx_index) {
			case 0:
				arg.widget.style.placeItems = "start start";
				break;
			case 1:
				arg.widget.style.placeItems = "start center";
				break;
			case 2:
				arg.widget.style.placeItems = "start end";
				break;
			case 3:
				arg.widget.style.placeItems = "center start";
				break;
			case 4:
				arg.widget.style.placeItems = "center center";
				break;
			case 5:
				arg.widget.style.placeItems = "center end";
				break;
			case 6:
				arg.widget.style.placeItems = "end start";
				break;
			case 7:
				arg.widget.style.placeItems = "end center";
				break;
			case 8:
				arg.widget.style.placeItems = "end end";
				break;
			case 9:
				arg.widget.style.placeItems = "stretch";
				break;
			}
		}
		if(arg.shadow != null && arg.shadow.length > 0) {
			arg.widget.style.boxShadow = arg.shadow.join(", ");
		}
		return arg.widget;
	}
	,__class__: com_vige_support_StyleManager
};
var com_vige_utils_CornerRadius = function(arg) {
	this.top = arg.top;
	this.right = arg.right;
	this.bottom = arg.bottom;
	this.left = arg.left;
};
com_vige_utils_CornerRadius.__name__ = "com.vige.utils.CornerRadius";
com_vige_utils_CornerRadius.fromTRBL = function(top,right,bottom,left) {
	return new com_vige_utils_CornerRadius({ top : top, right : right, bottom : bottom, left : left});
};
com_vige_utils_CornerRadius.all = function(radius) {
	return new com_vige_utils_CornerRadius({ top : radius, right : radius, bottom : radius, left : radius});
};
com_vige_utils_CornerRadius.prototype = {
	top: null
	,right: null
	,bottom: null
	,left: null
	,getCornerRadius: function() {
		return this.top + "px " + this.right + "px " + this.bottom + "px " + this.left + "px";
	}
	,__class__: com_vige_utils_CornerRadius
};
var com_vige_utils_Border = function(arg) {
	this.style = arg.style != null ? arg.style : com_vige_support_BorderStyle.Solid;
	this.width = arg.width != null ? arg.width : 5;
	this.color = arg.color != null ? arg.color : -16777216;
	this.cornerRadius = arg.cornerRadius != null ? arg.cornerRadius : com_vige_utils_CornerRadius.all(0.0);
	this.sides = arg.sides != null ? arg.sides : com_vige_support_BorderSides.All;
};
com_vige_utils_Border.__name__ = "com.vige.utils.Border";
com_vige_utils_Border.prototype = {
	style: null
	,width: null
	,color: null
	,cornerRadius: null
	,sides: null
	,getStyle: function() {
		var styleString = "";
		switch(this.style._hx_index) {
		case 0:
			styleString = "dotted";
			break;
		case 1:
			styleString = "dashed";
			break;
		case 2:
			styleString = "solid";
			break;
		case 3:
			styleString = "double";
			break;
		case 4:
			styleString = "groove";
			break;
		case 5:
			styleString = "ridge";
			break;
		case 6:
			styleString = "inset";
			break;
		case 7:
			styleString = "outset";
			break;
		case 8:
			styleString = "none";
			break;
		case 9:
			styleString = "hidden";
			break;
		}
		return styleString;
	}
	,getWidth: function() {
		return Std.string(this.width) + "px";
	}
	,getColor: function() {
		return "rgba(" + (this.color >> 16 & 255) + ", " + (this.color >> 8 & 255) + ", " + (this.color & 255) + ", " + (this.color >> 24 & 255) + ")";
	}
	,getCornerRadius: function() {
		return this.cornerRadius.getCornerRadius();
	}
	,getSides: function() {
		return this.sides;
	}
	,__class__: com_vige_utils_Border
};
var com_vige_utils_Color = function(arg) {
	this.color = arg.color;
	this.backgroundColor = arg.backgroundColor;
};
com_vige_utils_Color.__name__ = "com.vige.utils.Color";
com_vige_utils_Color.prototype = {
	color: null
	,backgroundColor: null
	,getColor: function() {
		if(this.color == null) {
			return "";
		}
		return "rgba(" + (this.color >> 16 & 255) + ", " + (this.color >> 8 & 255) + ", " + (this.color & 255) + ", " + (this.color >> 24 & 255) + ")";
	}
	,getBackgroundColor: function() {
		if(this.backgroundColor == null) {
			return "";
		}
		return "rgba(" + (this.backgroundColor >> 16 & 255) + ", " + (this.backgroundColor >> 8 & 255) + ", " + (this.backgroundColor & 255) + ", " + (this.backgroundColor >> 24 & 255) / 255 + ")";
	}
	,__class__: com_vige_utils_Color
};
var com_vige_utils__$Colors_Colors_$Impl_$ = {};
com_vige_utils__$Colors_Colors_$Impl_$.__name__ = "com.vige.utils._Colors.Colors_Impl_";
com_vige_utils__$Colors_Colors_$Impl_$.__properties__ = {set_bf:"set_bf",get_bf:"get_bf",set_gf:"set_gf",get_gf:"get_gf",set_rf:"set_rf",get_rf:"get_rf",set_af:"set_af",get_af:"get_af",set_bi:"set_bi",get_bi:"get_bi",set_gi:"set_gi",get_gi:"get_gi",set_ri:"set_ri",get_ri:"get_ri",set_ai:"set_ai",get_ai:"get_ai"};
com_vige_utils__$Colors_Colors_$Impl_$.fromString = function(rgba) {
	var this1 = Std.parseInt("0xff" + HxOverrides.substr(rgba,1,null));
	return this1;
};
com_vige_utils__$Colors_Colors_$Impl_$.fromRGBAi = function(r,g,b,a) {
	var this1 = r << 16 | g << 8 | b | a << 24;
	return this1;
};
com_vige_utils__$Colors_Colors_$Impl_$.fromRGBAf = function(r,g,b,a) {
	var this1 = (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0) | (a * 255 | 0) << 24;
	return this1;
};
com_vige_utils__$Colors_Colors_$Impl_$._new = function(rgba) {
	var this1 = rgba;
	return this1;
};
com_vige_utils__$Colors_Colors_$Impl_$.get_ai = function(this1) {
	return this1 >> 24 & 255;
};
com_vige_utils__$Colors_Colors_$Impl_$.set_ai = function(this1,ai) {
	var this2 = (this1 >> 16 & 255) << 16 | (this1 >> 8 & 255) << 8 | this1 & 255 | ai << 24;
	this1 = this2;
	return ai;
};
com_vige_utils__$Colors_Colors_$Impl_$.get_ri = function(this1) {
	return this1 >> 16 & 255;
};
com_vige_utils__$Colors_Colors_$Impl_$.set_ri = function(this1,ri) {
	var this2 = ri << 16 | (this1 >> 8 & 255) << 8 | this1 & 255 | (this1 >> 24 & 255) << 24;
	this1 = this2;
	return ri;
};
com_vige_utils__$Colors_Colors_$Impl_$.get_gi = function(this1) {
	return this1 >> 8 & 255;
};
com_vige_utils__$Colors_Colors_$Impl_$.set_gi = function(this1,gi) {
	var this2 = (this1 >> 16 & 255) << 16 | gi << 8 | this1 & 255 | (this1 >> 24 & 255) << 24;
	this1 = this2;
	return gi;
};
com_vige_utils__$Colors_Colors_$Impl_$.get_bi = function(this1) {
	return this1 & 255;
};
com_vige_utils__$Colors_Colors_$Impl_$.set_bi = function(this1,bi) {
	var this2 = (this1 >> 16 & 255) << 16 | (this1 >> 8 & 255) << 8 | bi | (this1 >> 24 & 255) << 24;
	this1 = this2;
	return bi;
};
com_vige_utils__$Colors_Colors_$Impl_$.get_af = function(this1) {
	return (this1 >> 24 & 255) / 255;
};
com_vige_utils__$Colors_Colors_$Impl_$.set_af = function(this1,af) {
	var this2 = ((this1 >> 16 & 255) / 255 * 255 | 0) << 16 | ((this1 >> 8 & 255) / 255 * 255 | 0) << 8 | ((this1 & 255) / 255 * 255 | 0) | (af * 255 | 0) << 24;
	this1 = this2;
	return af;
};
com_vige_utils__$Colors_Colors_$Impl_$.get_rf = function(this1) {
	return (this1 >> 16 & 255) / 255;
};
com_vige_utils__$Colors_Colors_$Impl_$.set_rf = function(this1,rf) {
	var this2 = (rf * 255 | 0) << 16 | ((this1 >> 8 & 255) / 255 * 255 | 0) << 8 | ((this1 & 255) / 255 * 255 | 0) | ((this1 >> 24 & 255) / 255 * 255 | 0) << 24;
	this1 = this2;
	return rf;
};
com_vige_utils__$Colors_Colors_$Impl_$.get_gf = function(this1) {
	return (this1 >> 8 & 255) / 255;
};
com_vige_utils__$Colors_Colors_$Impl_$.set_gf = function(this1,gf) {
	var this2 = ((this1 >> 16 & 255) / 255 * 255 | 0) << 16 | (gf * 255 | 0) << 8 | ((this1 & 255) / 255 * 255 | 0) | ((this1 >> 24 & 255) / 255 * 255 | 0) << 24;
	this1 = this2;
	return gf;
};
com_vige_utils__$Colors_Colors_$Impl_$.get_bf = function(this1) {
	return (this1 & 255) / 255;
};
com_vige_utils__$Colors_Colors_$Impl_$.set_bf = function(this1,bf) {
	var this2 = ((this1 >> 16 & 255) / 255 * 255 | 0) << 16 | ((this1 >> 8 & 255) / 255 * 255 | 0) << 8 | (bf * 255 | 0) | ((this1 >> 24 & 255) / 255 * 255 | 0) << 24;
	this1 = this2;
	return bf;
};
var com_vige_utils_Margin = function(arg) {
	this.top = arg.top;
	this.right = arg.right;
	this.bottom = arg.bottom;
	this.left = arg.left;
};
com_vige_utils_Margin.__name__ = "com.vige.utils.Margin";
com_vige_utils_Margin.fromTRBL = function(top,right,bottom,left) {
	return new com_vige_utils_Margin({ top : top, right : right, bottom : bottom, left : left});
};
com_vige_utils_Margin.all = function(margin) {
	return new com_vige_utils_Margin({ top : margin, right : margin, bottom : margin, left : margin});
};
com_vige_utils_Margin.prototype = {
	top: null
	,right: null
	,bottom: null
	,left: null
	,getMargin: function() {
		return this.top + "px " + this.right + "px " + this.bottom + "px " + this.left + "px";
	}
	,__class__: com_vige_utils_Margin
};
var com_vige_utils_Padding = function(arg) {
	this.top = arg.top;
	this.right = arg.right;
	this.bottom = arg.bottom;
	this.left = arg.left;
};
com_vige_utils_Padding.__name__ = "com.vige.utils.Padding";
com_vige_utils_Padding.fromTRBL = function(top,right,bottom,left) {
	return new com_vige_utils_Padding({ top : top, right : right, bottom : bottom, left : left});
};
com_vige_utils_Padding.all = function(padding) {
	return new com_vige_utils_Padding({ top : padding, right : padding, bottom : padding, left : padding});
};
com_vige_utils_Padding.prototype = {
	top: null
	,right: null
	,bottom: null
	,left: null
	,getPadding: function() {
		return this.top + "px " + this.right + "px " + this.bottom + "px " + this.left + "px";
	}
	,__class__: com_vige_utils_Padding
};
var com_vige_utils_Shadow = function(arg) {
	this.horizontal = arg.horizontal != null ? arg.horizontal : "";
	this.vertical = arg.vertical != null ? arg.vertical : "";
	this.blur = arg.blur != null ? arg.blur : "";
	this.spread = arg.spread != null ? arg.spread + " " : "0px ";
	this.color = arg.color;
};
com_vige_utils_Shadow.__name__ = "com.vige.utils.Shadow";
com_vige_utils_Shadow.prototype = {
	horizontal: null
	,vertical: null
	,blur: null
	,spread: null
	,color: null
	,getShadow: function() {
		if(this.color != null) {
			return this.horizontal + " " + this.vertical + " " + this.blur + " " + this.spread + "" + this.color.getBackgroundColor();
		} else {
			return "";
		}
	}
	,__class__: com_vige_utils_Shadow
};
var com_vige_utils_Size = function(arg) {
	this.minHeight = arg.minHeight != null ? arg.minHeight : Std.string(-Infinity) + "px";
	this.minWidth = arg.minWidth != null ? arg.minWidth : Std.string(-Infinity) + "px";
	this.height = arg.height != null ? arg.height : Std.string(-Infinity) + "px";
	this.width = arg.width != null ? arg.width : Std.string(-Infinity) + "px";
	this.maxHeight = arg.maxHeight != null ? arg.maxHeight : Std.string(-Infinity) + "px";
	this.maxWidth = arg.maxWidth != null ? arg.maxWidth : Std.string(-Infinity) + "px";
};
com_vige_utils_Size.__name__ = "com.vige.utils.Size";
com_vige_utils_Size.prototype = {
	minHeight: null
	,minWidth: null
	,height: null
	,width: null
	,maxHeight: null
	,maxWidth: null
	,getMinHeight: function() {
		return this.minHeight;
	}
	,getMinWidth: function() {
		return this.minWidth;
	}
	,getHeight: function() {
		return this.height;
	}
	,getWidth: function() {
		return this.width;
	}
	,getMaxHeight: function() {
		return this.maxHeight;
	}
	,getMaxWidth: function() {
		return this.maxWidth;
	}
	,__class__: com_vige_utils_Size
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = "haxe.CallStack";
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			var fileName = site.getFileName();
			var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
				fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += cname == null ? "null" : "" + cname;
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				var column = Std.parseInt(rie10.matched(4));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.prototype = {
	get: null
	,keys: null
	,__class__: haxe_IMap
};
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = $global.$haxeUID++);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,__class__: haxe_io_Bytes
};
var haxe_rtti_Meta = function() { };
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(((o) instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(((o) instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		if(o.__enum__ != null) {
			return $hxEnums[o.__enum__] == cl;
		} else {
			return false;
		}
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var utest_Assert = function() { };
utest_Assert.__name__ = "utest.Assert";
utest_Assert.processResult = function(cond,getMessage,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(getMessage(),pos));
	}
};
utest_Assert.isTrue = function(cond,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected true",pos));
	}
};
utest_Assert.isFalse = function(value,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(value == false) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected false",pos));
	}
};
utest_Assert.isNull = function(value,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(value == null) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected null but it is " + utest_Assert.q(value),pos));
	}
};
utest_Assert.notNull = function(value,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(value != null) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected not null",pos));
	}
};
utest_Assert.is = function(value,type,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(js_Boot.__instanceof(value,type)) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected type " + utest_Assert.typeToString(type) + " but it is " + utest_Assert.typeToString(value),pos));
	}
};
utest_Assert.notEquals = function(expected,value,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(expected != value) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " and test value " + utest_Assert.q(value) + " should be different",pos));
	}
};
utest_Assert.equals = function(expected,value,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(expected == value) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value),pos));
	}
};
utest_Assert.match = function(pattern,value,msg,pos) {
	var cond = pattern.match(value);
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "the value " + utest_Assert.q(value) + " does not match the provided pattern",pos));
	}
};
utest_Assert.floatEquals = function(expected,value,approx,msg,pos) {
	var cond = utest_Assert._floatEquals(expected,value,approx);
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value),pos));
	}
};
utest_Assert._floatEquals = function(expected,value,approx) {
	if(isNaN(expected)) {
		return isNaN(value);
	} else if(isNaN(value)) {
		return false;
	} else if(!isFinite(expected) && !isFinite(value)) {
		return expected > 0 == value > 0;
	}
	if(null == approx) {
		approx = 1e-5;
	}
	return Math.abs(value - expected) <= approx;
};
utest_Assert.getTypeName = function(v) {
	var _g = Type.typeof(v);
	switch(_g._hx_index) {
	case 0:
		return "`null`";
	case 1:
		return "Int";
	case 2:
		return "Float";
	case 3:
		return "Bool";
	case 4:
		return "Object";
	case 5:
		return "function";
	case 6:
		var c = _g.c;
		return c.__name__;
	case 7:
		var e = _g.e;
		return e.__ename__;
	case 8:
		return "`Unknown`";
	}
};
utest_Assert.isIterable = function(v,isAnonym) {
	var fields;
	if(isAnonym) {
		fields = Reflect.fields(v);
	} else {
		var o = v;
		fields = Type.getInstanceFields(o == null ? null : js_Boot.getClass(o));
	}
	if(!Lambda.has(fields,"iterator")) {
		return false;
	}
	return Reflect.isFunction(Reflect.field(v,"iterator"));
};
utest_Assert.isIterator = function(v,isAnonym) {
	var fields;
	if(isAnonym) {
		fields = Reflect.fields(v);
	} else {
		var o = v;
		fields = Type.getInstanceFields(o == null ? null : js_Boot.getClass(o));
	}
	if(!Lambda.has(fields,"next") || !Lambda.has(fields,"hasNext")) {
		return false;
	}
	if(Reflect.isFunction(Reflect.field(v,"next"))) {
		return Reflect.isFunction(Reflect.field(v,"hasNext"));
	} else {
		return false;
	}
};
utest_Assert.sameAs = function(expected,value,status,approx) {
	var texpected = utest_Assert.getTypeName(expected);
	var tvalue = utest_Assert.getTypeName(value);
	status.expectedValue = expected;
	status.actualValue = value;
	if(texpected != tvalue && !(texpected == "Int" && tvalue == "Float" || texpected == "Float" && tvalue == "Int")) {
		status.error = "expected type " + texpected + " but it is " + tvalue + (status.path == "" ? "" : " for field " + status.path);
		return false;
	}
	var _g = Type.typeof(expected);
	switch(_g._hx_index) {
	case 1:case 2:
		if(!utest_Assert._floatEquals(expected,value,approx)) {
			status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 0:case 3:
		if(expected != value) {
			status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 4:
		if(status.recursive || status.path == "") {
			var tfields = Reflect.fields(value);
			var fields = Reflect.fields(expected);
			var path = status.path;
			var _g1 = 0;
			while(_g1 < fields.length) {
				var field = fields[_g1];
				++_g1;
				HxOverrides.remove(tfields,field);
				status.path = path == "" ? field : path + "." + field;
				if(!Object.prototype.hasOwnProperty.call(value,field)) {
					status.error = "expected field " + status.path + " does not exist in " + utest_Assert.q(value);
					return false;
				}
				var e = Reflect.field(expected,field);
				if(Reflect.isFunction(e)) {
					continue;
				}
				var v = Reflect.field(value,field);
				if(!utest_Assert.sameAs(e,v,status,approx)) {
					return false;
				}
			}
			if(tfields.length > 0) {
				status.error = "the tested object has extra field(s) (" + tfields.join(", ") + ") not included in the expected ones";
				return false;
			}
		}
		if(utest_Assert.isIterator(expected,true)) {
			if(!utest_Assert.isIterator(value,true)) {
				status.error = "expected Iterable but it is not " + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array({ iterator : function() {
					return expected;
				}});
				var vvalues = Lambda.array({ iterator : function() {
					return value;
				}});
				if(evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterator but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path1 = status.path;
				var _g2 = 0;
				var _g11 = evalues.length;
				while(_g2 < _g11) {
					var i = _g2++;
					status.path = path1 == "" ? "iterator[" + i + "]" : path1 + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterable(expected,true)) {
			if(!utest_Assert.isIterable(value,true)) {
				status.error = "expected Iterator but it is not " + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues1 = Lambda.array(expected);
				var vvalues1 = Lambda.array(value);
				if(evalues1.length != vvalues1.length) {
					status.error = "expected " + evalues1.length + " values in Iterable but they are " + vvalues1.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path2 = status.path;
				var _g3 = 0;
				var _g12 = evalues1.length;
				while(_g3 < _g12) {
					var i1 = _g3++;
					status.path = path2 == "" ? "iterable[" + i1 + "]" : path2 + "[" + i1 + "]";
					if(!utest_Assert.sameAs(evalues1[i1],vvalues1[i1],status,approx)) {
						return false;
					}
				}
			}
			return true;
		}
		return true;
	case 5:
		if(!Reflect.compareMethods(expected,value)) {
			status.error = "expected same function reference" + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 6:
		var c = _g.c;
		var cexpected = c.__name__;
		var o = value;
		var c1 = o == null ? null : js_Boot.getClass(o);
		var cvalue = c1.__name__;
		if(cexpected != cvalue) {
			status.error = "expected instance of " + utest_Assert.q(cexpected) + " but it is " + utest_Assert.q(cvalue) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		if(typeof(expected) == "string") {
			if(expected == value) {
				return true;
			} else {
				status.error = "expected string '" + Std.string(expected) + "' but it is '" + Std.string(value) + "'";
				return false;
			}
		}
		if(((expected) instanceof Array) && expected.__enum__ == null) {
			if(status.recursive || status.path == "") {
				if(expected.length != value.length) {
					status.error = "expected " + Std.string(expected.length) + " elements but they are " + Std.string(value.length) + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path3 = status.path;
				var _g4 = 0;
				var _g13 = expected.length;
				while(_g4 < _g13) {
					var i2 = _g4++;
					status.path = path3 == "" ? "array[" + i2 + "]" : path3 + "[" + i2 + "]";
					if(!utest_Assert.sameAs(expected[i2],value[i2],status,approx)) {
						status.error = "expected array element at [" + i2 + "] to have " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(((expected) instanceof Date)) {
			if(expected.getTime() != value.getTime()) {
				status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			return true;
		}
		if(((expected) instanceof haxe_io_Bytes)) {
			if(status.recursive || status.path == "") {
				var ebytes = expected;
				var vbytes = value;
				if(ebytes.length != vbytes.length) {
					return false;
				}
				var _g5 = 0;
				var _g14 = ebytes.length;
				while(_g5 < _g14) {
					var i3 = _g5++;
					if(ebytes.b[i3] != vbytes.b[i3]) {
						status.error = "expected byte " + ebytes.b[i3] + " but it is " + vbytes.b[i3] + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(js_Boot.__instanceof(expected,haxe_IMap)) {
			if(status.recursive || status.path == "") {
				var map = js_Boot.__cast(expected , haxe_IMap);
				var vmap = js_Boot.__cast(value , haxe_IMap);
				var _g6 = [];
				var k = map.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					_g6.push(k1);
				}
				var keys = _g6;
				var _g15 = [];
				var k2 = vmap.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					_g15.push(k3);
				}
				var vkeys = _g15;
				if(keys.length != vkeys.length) {
					status.error = "expected " + keys.length + " keys but they are " + vkeys.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path4 = status.path;
				var _g21 = 0;
				while(_g21 < keys.length) {
					var key = keys[_g21];
					++_g21;
					status.path = path4 == "" ? "hash[" + Std.string(key) + "]" : path4 + "[" + Std.string(key) + "]";
					if(!utest_Assert.sameAs(map.get(key),vmap.get(key),status,approx)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterator(expected,false)) {
			if(status.recursive || status.path == "") {
				var evalues2 = Lambda.array({ iterator : function() {
					return expected;
				}});
				var vvalues2 = Lambda.array({ iterator : function() {
					return value;
				}});
				if(evalues2.length != vvalues2.length) {
					status.error = "expected " + evalues2.length + " values in Iterator but they are " + vvalues2.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path5 = status.path;
				var _g7 = 0;
				var _g16 = evalues2.length;
				while(_g7 < _g16) {
					var i4 = _g7++;
					status.path = path5 == "" ? "iterator[" + i4 + "]" : path5 + "[" + i4 + "]";
					if(!utest_Assert.sameAs(evalues2[i4],vvalues2[i4],status,approx)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterable(expected,false)) {
			if(status.recursive || status.path == "") {
				var evalues3 = Lambda.array(expected);
				var vvalues3 = Lambda.array(value);
				if(evalues3.length != vvalues3.length) {
					status.error = "expected " + evalues3.length + " values in Iterable but they are " + vvalues3.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path6 = status.path;
				var _g8 = 0;
				var _g17 = evalues3.length;
				while(_g8 < _g17) {
					var i5 = _g8++;
					status.path = path6 == "" ? "iterable[" + i5 + "]" : path6 + "[" + i5 + "]";
					if(!utest_Assert.sameAs(evalues3[i5],vvalues3[i5],status,approx)) {
						return false;
					}
				}
			}
			return true;
		}
		if(status.recursive || status.path == "") {
			var o1 = expected;
			var fields1 = Type.getInstanceFields(o1 == null ? null : js_Boot.getClass(o1));
			var path7 = status.path;
			var _g9 = 0;
			while(_g9 < fields1.length) {
				var field1 = fields1[_g9];
				++_g9;
				status.path = path7 == "" ? field1 : path7 + "." + field1;
				var e1 = Reflect.field(expected,field1);
				if(Reflect.isFunction(e1)) {
					continue;
				}
				var v1 = Reflect.field(value,field1);
				if(!utest_Assert.sameAs(e1,v1,status,approx)) {
					return false;
				}
			}
		}
		return true;
	case 7:
		var e2 = _g.e;
		var eexpected = e2.__ename__;
		var e3 = Type.getEnum(value);
		var evalue = e3.__ename__;
		if(eexpected != evalue) {
			status.error = "expected enumeration of " + utest_Assert.q(eexpected) + " but it is " + utest_Assert.q(evalue) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		if(status.recursive || status.path == "") {
			if(expected._hx_index != value._hx_index) {
				var e4 = expected;
				var tmp = "expected enum constructor " + utest_Assert.q($hxEnums[e4.__enum__].__constructs__[e4._hx_index]) + " but it is ";
				var e5 = value;
				status.error = tmp + utest_Assert.q($hxEnums[e5.__enum__].__constructs__[e5._hx_index]) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			var eparams = Type.enumParameters(expected);
			var vparams = Type.enumParameters(value);
			var path8 = status.path;
			var _g10 = 0;
			var _g18 = eparams.length;
			while(_g10 < _g18) {
				var i6 = _g10++;
				status.path = path8 == "" ? "enum[" + i6 + "]" : path8 + "[" + i6 + "]";
				if(!utest_Assert.sameAs(eparams[i6],vparams[i6],status,approx)) {
					status.error = "expected enum param " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path) + " with " + status.error;
					return false;
				}
			}
		}
		return true;
	case 8:
		throw new js__$Boot_HaxeError("Unable to compare two unknown types");
	}
};
utest_Assert.q = function(v) {
	if(typeof(v) == "string") {
		return "\"" + StringTools.replace(v,"\"","\\\"") + "\"";
	} else {
		return Std.string(v);
	}
};
utest_Assert.same = function(expected,value,recursive,msg,approx,pos) {
	if(null == approx) {
		approx = 1e-5;
	}
	var status = { recursive : null == recursive ? true : recursive, path : "", error : null, expectedValue : expected, actualValue : value};
	if(utest_Assert.sameAs(expected,value,status,approx)) {
		utest_Assert.pass(msg,pos);
	} else {
		utest_Assert.fail(msg == null ? status.error : msg,pos);
	}
};
utest_Assert.raises = function(method,type,msgNotThrown,msgWrongType,pos) {
	var name = type != null ? type.__name__ : "Dynamic";
	try {
		method();
	} catch( ex ) {
		haxe_CallStack.lastException = ex;
		var ex1 = ((ex) instanceof js__$Boot_HaxeError) ? ex.val : ex;
		if(null == type) {
			utest_Assert.pass(null,pos);
		} else {
			if(null == msgWrongType) {
				msgWrongType = "expected throw of type " + name + " but it is " + Std.string(ex1);
			}
			utest_Assert.isTrue(js_Boot.__instanceof(ex1,type),msgWrongType,pos);
		}
		return;
	}
	if(null == msgNotThrown) {
		msgNotThrown = "exception of type " + name + " not raised";
	}
	utest_Assert.fail(msgNotThrown,pos);
};
utest_Assert.allows = function(possibilities,value,msg,pos) {
	if(Lambda.has(possibilities,value)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null ? "value " + utest_Assert.q(value) + " not found in the expected possibilities " + Std.string(possibilities) : msg,pos);
	}
};
utest_Assert.contains = function(match,values,msg,pos) {
	if(Lambda.has(values,match)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null ? "values " + utest_Assert.q(values) + " do not contain " + Std.string(match) : msg,pos);
	}
};
utest_Assert.notContains = function(match,values,msg,pos) {
	if(!Lambda.has(values,match)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null ? "values " + utest_Assert.q(values) + " do contain " + Std.string(match) : msg,pos);
	}
};
utest_Assert.stringContains = function(match,value,msg,pos) {
	if(value != null && value.indexOf(match) >= 0) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null ? "value " + utest_Assert.q(value) + " does not contain " + utest_Assert.q(match) : msg,pos);
	}
};
utest_Assert.stringSequence = function(sequence,value,msg,pos) {
	if(null == value) {
		utest_Assert.fail(msg == null ? "null argument value" : msg,pos);
		return;
	}
	var p = 0;
	var _g = 0;
	while(_g < sequence.length) {
		var s = sequence[_g];
		++_g;
		var p2 = value.indexOf(s,p);
		if(p2 < 0) {
			if(msg == null) {
				msg = "expected '" + s + "' after ";
				if(p > 0) {
					var cut = HxOverrides.substr(value,0,p);
					if(cut.length > 30) {
						cut = "..." + HxOverrides.substr(cut,-27,null);
					}
					msg += " '" + cut + "'";
				} else {
					msg += " begin";
				}
			}
			utest_Assert.fail(msg,pos);
			return;
		}
		p = p2 + s.length;
	}
	utest_Assert.isTrue(true,msg,pos);
};
utest_Assert.pass = function(msg,pos) {
	if(msg == null) {
		msg = "pass expected";
	}
	utest_Assert.isTrue(true,msg,pos);
};
utest_Assert.fail = function(msg,pos) {
	if(msg == null) {
		msg = "failure expected";
	}
	utest_Assert.isTrue(false,msg,pos);
};
utest_Assert.warn = function(msg) {
	utest_Assert.results.add(utest_Assertation.Warning(msg));
};
utest_Assert.createAsync = function(f,timeout) {
	return function() {
	};
};
utest_Assert.createEvent = function(f,timeout) {
	return function(e) {
	};
};
utest_Assert.typeToString = function(t) {
	try {
		var o = t;
		var _t = o == null ? null : js_Boot.getClass(o);
		if(_t != null) {
			t = _t;
		}
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
	}
	try {
		return t.__name__;
	} catch( e2 ) {
		haxe_CallStack.lastException = e2;
		var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
	}
	try {
		var _t1 = Type.getEnum(t);
		if(_t1 != null) {
			t = _t1;
		}
	} catch( e4 ) {
		haxe_CallStack.lastException = e4;
		var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
	}
	try {
		return t.__ename__;
	} catch( e6 ) {
		haxe_CallStack.lastException = e6;
		var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
	}
	try {
		return Std.string(Type.typeof(t));
	} catch( e8 ) {
		haxe_CallStack.lastException = e8;
		var e9 = ((e8) instanceof js__$Boot_HaxeError) ? e8.val : e8;
	}
	try {
		return Std.string(t);
	} catch( e10 ) {
		haxe_CallStack.lastException = e10;
		var e11 = ((e10) instanceof js__$Boot_HaxeError) ? e10.val : e10;
	}
	return "<unable to retrieve type name>";
};
var utest_Assertation = $hxEnums["utest.Assertation"] = { __ename__ : "utest.Assertation", __constructs__ : ["Success","Failure","Error","SetupError","TeardownError","TimeoutError","AsyncError","Warning","Ignore"]
	,Success: ($_=function(pos) { return {_hx_index:0,pos:pos,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["pos"],$_)
	,Failure: ($_=function(msg,pos) { return {_hx_index:1,msg:msg,pos:pos,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["msg","pos"],$_)
	,Error: ($_=function(e,stack) { return {_hx_index:2,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,SetupError: ($_=function(e,stack) { return {_hx_index:3,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,TeardownError: ($_=function(e,stack) { return {_hx_index:4,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,TimeoutError: ($_=function(missedAsyncs,stack) { return {_hx_index:5,missedAsyncs:missedAsyncs,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["missedAsyncs","stack"],$_)
	,AsyncError: ($_=function(e,stack) { return {_hx_index:6,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,Warning: ($_=function(msg) { return {_hx_index:7,msg:msg,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["msg"],$_)
	,Ignore: ($_=function(reason) { return {_hx_index:8,reason:reason,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["reason"],$_)
};
var utest_Async = function(timeoutMs) {
	if(timeoutMs == null) {
		timeoutMs = 250;
	}
	this.branches = [];
	this.callbacks = [];
	this.timedOut = false;
	this.resolved = false;
	this.timeoutMs = timeoutMs;
	this.startTime = Date.now() / 1000;
	this.timer = haxe_Timer.delay($bind(this,this.setTimedOutState),timeoutMs);
};
utest_Async.__name__ = "utest.Async";
utest_Async.getResolved = function() {
	if(utest_Async.resolvedInstance == null) {
		utest_Async.resolvedInstance = new utest_Async();
		utest_Async.resolvedInstance.done({ fileName : "utest/Async.hx", lineNumber : 30, className : "utest.Async", methodName : "getResolved"});
	}
	return utest_Async.resolvedInstance;
};
utest_Async.prototype = {
	resolved: null
	,timedOut: null
	,callbacks: null
	,timeoutMs: null
	,startTime: null
	,timer: null
	,branches: null
	,done: function(pos) {
		if(this.resolved) {
			if(this.timedOut) {
				throw new js__$Boot_HaxeError("Cannot done() at " + pos.fileName + ":" + pos.lineNumber + " because async is timed out.");
			} else {
				throw new js__$Boot_HaxeError("Cannot done() at " + pos.fileName + ":" + pos.lineNumber + " because async is done already.");
			}
		}
		this.resolved = true;
		this.timer.stop();
		var _g = 0;
		var _g1 = this.callbacks;
		while(_g < _g1.length) {
			var cb = _g1[_g];
			++_g;
			cb();
		}
	}
	,setTimeout: function(timeoutMs,pos) {
		if(this.resolved) {
			throw new js__$Boot_HaxeError("Cannot setTimeout(" + timeoutMs + ") at " + pos.fileName + ":" + pos.lineNumber + " because async is done.");
		}
		if(this.timedOut) {
			throw new js__$Boot_HaxeError("Cannot setTimeout(" + timeoutMs + ") at " + pos.fileName + ":" + pos.lineNumber + " because async is timed out.");
		}
		this.timer.stop();
		this.timeoutMs = timeoutMs;
		var delay = timeoutMs - Math.round(1000 * (Date.now() / 1000 - this.startTime));
		this.timer = haxe_Timer.delay($bind(this,this.setTimedOutState),delay);
	}
	,branch: function(fn) {
		var branch = new utest_Async(this.timeoutMs);
		this.branches.push(branch);
		branch.then($bind(this,this.checkBranches));
		if(fn != null) {
			fn(branch);
		}
		return branch;
	}
	,checkBranches: function() {
		var _gthis = this;
		if(this.resolved) {
			return;
		}
		var _g = 0;
		var _g1 = this.branches;
		while(_g < _g1.length) {
			var branch = _g1[_g];
			++_g;
			if(!branch.resolved) {
				return;
			}
			if(branch.timedOut) {
				this.setTimedOutState();
				return;
			}
		}
		var branchCount = this.branches.length;
		haxe_Timer.delay(function() {
			if(branchCount == _gthis.branches.length) {
				_gthis.done({ fileName : "utest/Async.hx", lineNumber : 97, className : "utest.Async", methodName : "checkBranches"});
			}
		},5);
	}
	,then: function(cb) {
		if(this.resolved) {
			cb();
		} else {
			this.callbacks.push(cb);
		}
	}
	,setTimedOutState: function() {
		if(this.resolved) {
			return;
		}
		this.timedOut = true;
		this.done({ fileName : "utest/Async.hx", lineNumber : 115, className : "utest.Async", methodName : "setTimedOutState"});
	}
	,__class__: utest_Async
};
var utest__$Dispatcher_EventException = $hxEnums["utest._Dispatcher.EventException"] = { __ename__ : "utest._Dispatcher.EventException", __constructs__ : ["StopPropagation"]
	,StopPropagation: {_hx_index:0,__enum__:"utest._Dispatcher.EventException",toString:$estr}
};
var utest_Dispatcher = function() {
	this.handlers = [];
};
utest_Dispatcher.__name__ = "utest.Dispatcher";
utest_Dispatcher.stop = function() {
	throw new js__$Boot_HaxeError(utest__$Dispatcher_EventException.StopPropagation);
};
utest_Dispatcher.prototype = {
	handlers: null
	,add: function(h) {
		this.handlers.push(h);
		return h;
	}
	,remove: function(h) {
		var _g = 0;
		var _g1 = this.handlers.length;
		while(_g < _g1) {
			var i = _g++;
			if(Reflect.compareMethods(this.handlers[i],h)) {
				return this.handlers.splice(i,1)[0];
			}
		}
		return null;
	}
	,clear: function() {
		this.handlers = [];
	}
	,dispatch: function(e) {
		try {
			var list = this.handlers.slice();
			var _g = 0;
			while(_g < list.length) {
				var l = list[_g];
				++_g;
				l(e);
			}
			return true;
		} catch( exc ) {
			haxe_CallStack.lastException = exc;
			var exc1 = ((exc) instanceof js__$Boot_HaxeError) ? exc.val : exc;
			if(js_Boot.__instanceof(exc1,utest__$Dispatcher_EventException)) {
				var exc2 = exc1;
				return false;
			} else {
				throw exc;
			}
		}
	}
	,has: function() {
		return this.handlers.length > 0;
	}
	,__class__: utest_Dispatcher
};
var utest_Notifier = function() {
	this.handlers = [];
};
utest_Notifier.__name__ = "utest.Notifier";
utest_Notifier.stop = function() {
	throw new js__$Boot_HaxeError(utest__$Dispatcher_EventException.StopPropagation);
};
utest_Notifier.prototype = {
	handlers: null
	,add: function(h) {
		this.handlers.push(h);
		return h;
	}
	,remove: function(h) {
		var _g = 0;
		var _g1 = this.handlers.length;
		while(_g < _g1) {
			var i = _g++;
			if(Reflect.compareMethods(this.handlers[i],h)) {
				return this.handlers.splice(i,1)[0];
			}
		}
		return null;
	}
	,clear: function() {
		this.handlers = [];
	}
	,dispatch: function() {
		try {
			var list = this.handlers.slice();
			var _g = 0;
			while(_g < list.length) {
				var l = list[_g];
				++_g;
				l();
			}
			return true;
		} catch( exc ) {
			haxe_CallStack.lastException = exc;
			var exc1 = ((exc) instanceof js__$Boot_HaxeError) ? exc.val : exc;
			if(js_Boot.__instanceof(exc1,utest__$Dispatcher_EventException)) {
				var exc2 = exc1;
				return false;
			} else {
				throw exc;
			}
		}
	}
	,has: function() {
		return this.handlers.length > 0;
	}
	,__class__: utest_Notifier
};
var utest_TestHandler = function(fixture) {
	this.wasBound = false;
	this.finished = false;
	if(fixture == null) {
		throw new js__$Boot_HaxeError("fixture argument is null");
	}
	this.fixture = fixture;
	this.results = new haxe_ds_List();
	this.asyncStack = new haxe_ds_List();
	this.onTested = new utest_Dispatcher();
	this.onTimeout = new utest_Dispatcher();
	this.onComplete = new utest_Dispatcher();
	this.onPrecheck = new utest_Dispatcher();
	if(fixture.ignoringInfo != null) {
		this.results.add(utest_Assertation.Ignore(fixture.ignoringInfo));
	}
};
utest_TestHandler.__name__ = "utest.TestHandler";
utest_TestHandler.exceptionStack = function(pops) {
	if(pops == null) {
		pops = 2;
	}
	var stack = haxe_CallStack.exceptionStack();
	while(pops-- > 0) stack.pop();
	return stack;
};
utest_TestHandler.prototype = {
	results: null
	,fixture: null
	,finished: null
	,asyncStack: null
	,onTested: null
	,onTimeout: null
	,onComplete: null
	,onPrecheck: null
	,precheck: null
	,wasBound: null
	,execute: function() {
		var _gthis = this;
		if(this.fixture.ignoringInfo != null) {
			this.executeFinally();
			return;
		}
		var isSync = true;
		var expectingAsync = true;
		var run = function() {
			if(isSync) {
				expectingAsync = false;
				return;
			}
			_gthis.executeFixtureMethod();
			_gthis.executeFinally();
		};
		try {
			this.executeMethod(this.fixture.setup);
			this.executeAsyncMethod(this.fixture.setupAsync,run);
			if(!expectingAsync) {
				this.executeFixtureMethod();
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.SetupError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,utest_TestHandler.exceptionStack()));
		}
		isSync = false;
		if(!expectingAsync) {
			this.executeFinally();
		}
	}
	,executeFixtureMethod: function() {
		try {
			this.executeMethod(this.fixture.method);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.Error(((e) instanceof js__$Boot_HaxeError) ? e.val : e,utest_TestHandler.exceptionStack()));
		}
	}
	,executeFinally: function() {
		this.onPrecheck.dispatch(this);
		this.checkTested();
	}
	,checkTested: function() {
		if(this.expiration == null || this.asyncStack.length == 0) {
			this.tested();
		} else if(Date.now() / 1000 > this.expiration) {
			this.timeout();
		} else {
			haxe_Timer.delay($bind(this,this.checkTested),10);
		}
	}
	,expiration: null
	,setTimeout: function(timeout) {
		var newExpire = Date.now() / 1000 + timeout / 1000;
		this.expiration = this.expiration == null ? newExpire : newExpire > this.expiration ? newExpire : this.expiration;
	}
	,bindHandler: function() {
		if(this.wasBound) {
			return;
		}
		utest_Assert.results = this.results;
		utest_Assert.createAsync = $bind(this,this.addAsync);
		utest_Assert.createEvent = $bind(this,this.addEvent);
		this.wasBound = true;
	}
	,unbindHandler: function() {
		if(!this.wasBound) {
			return;
		}
		utest_Assert.results = null;
		utest_Assert.createAsync = function(f,t) {
			return function() {
			};
		};
		utest_Assert.createEvent = function(f1,t1) {
			return function(e) {
			};
		};
		this.wasBound = false;
	}
	,addAsync: function(f,timeout) {
		if(timeout == null) {
			timeout = 250;
		}
		if(null == f) {
			f = function() {
			};
		}
		this.asyncStack.add(f);
		var handler = this;
		this.setTimeout(timeout);
		return function() {
			if(!handler.asyncStack.remove(f)) {
				handler.results.add(utest_Assertation.AsyncError("async function already executed",[]));
				return;
			}
			try {
				handler.bindHandler();
				f();
			} catch( e ) {
				haxe_CallStack.lastException = e;
				handler.results.add(utest_Assertation.AsyncError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,utest_TestHandler.exceptionStack(0)));
			}
		};
	}
	,addEvent: function(f,timeout) {
		if(timeout == null) {
			timeout = 250;
		}
		this.asyncStack.add(f);
		var handler = this;
		this.setTimeout(timeout);
		return function(e) {
			if(!handler.asyncStack.remove(f)) {
				handler.results.add(utest_Assertation.AsyncError("event already executed",[]));
				return;
			}
			try {
				handler.bindHandler();
				f(e);
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
				handler.results.add(utest_Assertation.AsyncError(((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1,utest_TestHandler.exceptionStack(0)));
			}
		};
	}
	,executeMethod: function(name) {
		if(name == null) {
			return;
		}
		this.bindHandler();
		Reflect.field(this.fixture.target,name).apply(this.fixture.target,[]);
	}
	,executeAsyncMethod: function(name,done) {
		if(name == null) {
			done();
			return;
		}
		this.bindHandler();
		Reflect.field(this.fixture.target,name).apply(this.fixture.target,[done]);
	}
	,tested: function() {
		if(this.results.length == 0) {
			this.results.add(utest_Assertation.Warning("no assertions"));
		}
		this.onTested.dispatch(this);
		this.completed();
	}
	,timeout: function() {
		this.results.add(utest_Assertation.TimeoutError(this.asyncStack.length,[]));
		this.onTimeout.dispatch(this);
		this.completed();
	}
	,completed: function() {
		var _gthis = this;
		if(this.fixture.ignoringInfo != null) {
			this.completedFinally();
			return;
		}
		var isSync = true;
		var expectingAsync = true;
		var complete = function() {
			if(isSync) {
				expectingAsync = false;
				return;
			}
			_gthis.completedFinally();
		};
		try {
			this.executeMethod(this.fixture.teardown);
			this.executeAsyncMethod(this.fixture.teardownAsync,complete);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.TeardownError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,utest_TestHandler.exceptionStack(2)));
		}
		isSync = false;
		if(!expectingAsync) {
			this.completedFinally();
		}
	}
	,completedFinally: function() {
		this.finished = true;
		this.unbindHandler();
		this.onComplete.dispatch(this);
	}
	,__class__: utest_TestHandler
};
var utest_ITestHandler = function(fixture) {
	utest_TestHandler.call(this,fixture);
	if(!fixture.isITest) {
		throw new js__$Boot_HaxeError("Invalid fixture type for utest.ITestHandler");
	}
	this.testCase = js_Boot.__cast(fixture.target , utest_ITest);
	this.test = fixture.test;
	if(this.test == null) {
		throw new js__$Boot_HaxeError("Fixture is missing test data");
	}
};
utest_ITestHandler.__name__ = "utest.ITestHandler";
utest_ITestHandler.__super__ = utest_TestHandler;
utest_ITestHandler.prototype = $extend(utest_TestHandler.prototype,{
	testCase: null
	,test: null
	,setupAsync: null
	,testAsync: null
	,teardownAsync: null
	,execute: function() {
		if(this.fixture.ignoringInfo != null) {
			this.executeFinally();
			return;
		}
		this.bindHandler();
		this.runSetup();
	}
	,runSetup: function() {
		try {
			this.setupAsync = this.fixture.setupMethod();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.SetupError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,haxe_CallStack.exceptionStack()));
			this.completedFinally();
			return;
		}
		this.setupAsync.then($bind(this,this.checkSetup));
	}
	,checkSetup: function() {
		if(this.setupAsync.timedOut) {
			this.results.add(utest_Assertation.SetupError("Setup timeout",[]));
			this.completedFinally();
		} else {
			this.runTest();
		}
	}
	,runTest: function() {
		try {
			this.testAsync = this.test.execute();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.Error(((e) instanceof js__$Boot_HaxeError) ? e.val : e,haxe_CallStack.exceptionStack()));
			this.runTeardown();
			return;
		}
		this.testAsync.then($bind(this,this.checkTest));
	}
	,checkTest: function() {
		this.onPrecheck.dispatch(this);
		if(this.testAsync.timedOut) {
			this.results.add(utest_Assertation.TimeoutError(1,[]));
			this.onTimeout.dispatch(this);
		} else if(this.testAsync.resolved) {
			if(this.results.length == 0) {
				this.results.add(utest_Assertation.Warning("no assertions"));
			}
			this.onTested.dispatch(this);
		} else {
			throw new js__$Boot_HaxeError("Unexpected test state");
		}
		this.runTeardown();
	}
	,runTeardown: function() {
		try {
			this.teardownAsync = this.fixture.teardownMethod();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.TeardownError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,haxe_CallStack.exceptionStack()));
			this.completedFinally();
			return;
		}
		this.teardownAsync.then($bind(this,this.checkTeardown));
	}
	,checkTeardown: function() {
		if(this.teardownAsync.timedOut) {
			this.results.add(utest_Assertation.TeardownError("Teardown timeout",[]));
		}
		this.completedFinally();
	}
	,bindHandler: function() {
		if(this.wasBound) {
			return;
		}
		utest_Assert.results = this.results;
		var msg = " is not allowed in tests extending utest.ITest. Add `async:utest.Async` argument to the test method instead.";
		utest_Assert.createAsync = function(f,t) {
			throw new js__$Boot_HaxeError("Assert.createAsync() " + msg);
		};
		utest_Assert.createEvent = function(f1,t1) {
			throw new js__$Boot_HaxeError("Assert.createEvent() " + msg);
		};
		this.wasBound = true;
	}
	,__class__: utest_ITestHandler
});
var utest__$IgnoredFixture_IgnoredFixture_$Impl_$ = {};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.__name__ = "utest._IgnoredFixture.IgnoredFixture_Impl_";
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.__properties__ = {get_ignoreReason:"get_ignoreReason",get_isIgnored:"get_isIgnored"};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.NotIgnored = function() {
	var this1 = null;
	return this1;
};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.Ignored = function(reason) {
	var this1 = reason != null ? reason : "";
	return this1;
};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$._new = function(reason) {
	var this1 = reason;
	return this1;
};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.get_isIgnored = function(this1) {
	return this1 != null;
};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.get_ignoreReason = function(this1) {
	return this1;
};
var utest_Runner = function() {
	this.executedFixtures = 0;
	this.pos = 0;
	this.complete = false;
	this.globalPattern = null;
	this.iTestFixtures = new haxe_ds_ObjectMap();
	this.fixtures = [];
	this.onProgress = new utest_Dispatcher();
	this.onStart = new utest_Dispatcher();
	this.onComplete = new utest_Dispatcher();
	this.onPrecheck = new utest_Dispatcher();
	this.onTestStart = new utest_Dispatcher();
	this.onTestComplete = new utest_Dispatcher();
	this.length = 0;
	var envPattern = null;
	if(envPattern != null) {
		this.globalPattern = new EReg(envPattern,"");
	}
};
utest_Runner.__name__ = "utest.Runner";
utest_Runner.prototype = {
	fixtures: null
	,iTestFixtures: null
	,onProgress: null
	,onStart: null
	,onComplete: null
	,onPrecheck: null
	,onTestStart: null
	,onTestComplete: null
	,length: null
	,globalPattern: null
	,complete: null
	,addCase: function(test,setup,teardown,prefix,pattern,setupAsync,teardownAsync) {
		if(teardownAsync == null) {
			teardownAsync = "teardownAsync";
		}
		if(setupAsync == null) {
			setupAsync = "setupAsync";
		}
		if(prefix == null) {
			prefix = "test";
		}
		if(teardown == null) {
			teardown = "teardown";
		}
		if(setup == null) {
			setup = "setup";
		}
		if(js_Boot.__instanceof(test,utest_ITest)) {
			this.addITest(test,pattern);
		} else {
			this.addCaseOld(test,setup,teardown,prefix,pattern,setupAsync,teardownAsync);
		}
	}
	,addITest: function(testCase,pattern) {
		if(this.iTestFixtures.h.__keys__[testCase.__id__] != null) {
			throw new js__$Boot_HaxeError("Cannot add the same test twice.");
		}
		var fixtures = [];
		var init = testCase.__initializeUtest__();
		var c = testCase == null ? null : js_Boot.getClass(testCase);
		var className = c.__name__;
		var _g = 0;
		var _g1 = init.tests;
		while(_g < _g1.length) {
			var test = _g1[_g];
			++_g;
			if(!this.isTestFixtureName(className,test.name,["test","spec"],pattern,this.globalPattern)) {
				continue;
			}
			var fixture = utest_TestFixture.ofData(testCase,test,init.accessories);
			this.addFixture(fixture);
			fixtures.push(fixture);
		}
		if(fixtures.length > 0) {
			this.iTestFixtures.set(testCase,{ setupClass : utest_utils_AccessoriesUtils.getSetupClass(init.accessories), fixtures : fixtures, teardownClass : utest_utils_AccessoriesUtils.getTeardownClass(init.accessories)});
		}
	}
	,addCaseOld: function(test,setup,teardown,prefix,pattern,setupAsync,teardownAsync) {
		if(teardownAsync == null) {
			teardownAsync = "teardownAsync";
		}
		if(setupAsync == null) {
			setupAsync = "setupAsync";
		}
		if(prefix == null) {
			prefix = "test";
		}
		if(teardown == null) {
			teardown = "teardown";
		}
		if(setup == null) {
			setup = "setup";
		}
		if(!Reflect.isObject(test)) {
			throw new js__$Boot_HaxeError("can't add a null object as a test case");
		}
		if(!this.isMethod(test,setup)) {
			setup = null;
		}
		if(!this.isMethod(test,setupAsync)) {
			setupAsync = null;
		}
		if(!this.isMethod(test,teardown)) {
			teardown = null;
		}
		if(!this.isMethod(test,teardownAsync)) {
			teardownAsync = null;
		}
		var o = test;
		var fields = Type.getInstanceFields(o == null ? null : js_Boot.getClass(o));
		var o1 = test;
		var c = o1 == null ? null : js_Boot.getClass(o1);
		var className = c.__name__;
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(!this.isMethod(test,field)) {
				continue;
			}
			if(!this.isTestFixtureName(className,field,[prefix],pattern,this.globalPattern)) {
				continue;
			}
			this.addFixture(new utest_TestFixture(test,field,setup,teardown,setupAsync,teardownAsync));
		}
	}
	,isTestFixtureName: function(caseName,testName,prefixes,pattern,globalPattern) {
		if(pattern == null && globalPattern == null) {
			var _g = 0;
			while(_g < prefixes.length) {
				var prefix = prefixes[_g];
				++_g;
				if(StringTools.startsWith(testName,prefix)) {
					return true;
				}
			}
			return false;
		}
		if(pattern == null) {
			pattern = globalPattern;
		}
		return pattern.match("" + caseName + "." + testName);
	}
	,addFixture: function(fixture) {
		this.fixtures.push(fixture);
		this.length++;
	}
	,getFixture: function(index) {
		return this.fixtures[index];
	}
	,isMethod: function(test,name) {
		try {
			return Reflect.isFunction(Reflect.field(test,name));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return false;
		}
	}
	,run: function() {
		this.onStart.dispatch(this);
		var iTestRunner = new utest__$Runner_ITestRunner(this);
		iTestRunner.run();
		this.waitForCompletion();
	}
	,waitForCompletion: function() {
		if(!this.complete) {
			haxe_Timer.delay($bind(this,this.waitForCompletion),100);
		}
	}
	,pos: null
	,executedFixtures: null
	,runNext: function(finishedHandler) {
		var currentCase = null;
		var _g = this.pos;
		var _g1 = this.fixtures.length;
		while(_g < _g1) {
			var i = _g++;
			var fixture = this.fixtures[this.pos++];
			if(fixture.isITest) {
				continue;
			}
			if(currentCase != fixture.target) {
				currentCase = fixture.target;
				var c = currentCase == null ? null : js_Boot.getClass(currentCase);
				utest_utils_Print.startCase(c.__name__);
			}
			var handler = this.runFixture(fixture);
			if(!handler.finished) {
				handler.onComplete.add($bind(this,this.runNext));
				return;
			}
		}
		this.complete = true;
		this.onComplete.dispatch(this);
	}
	,runFixture: function(fixture) {
		var handler = fixture.isITest ? new utest_ITestHandler(fixture) : new utest_TestHandler(fixture);
		handler.onComplete.add($bind(this,this.testComplete));
		handler.onPrecheck.add(($_=this.onPrecheck,$bind($_,$_.dispatch)));
		utest_utils_Print.startTest(fixture.method);
		this.onTestStart.dispatch(handler);
		handler.execute();
		return handler;
	}
	,testComplete: function(h) {
		++this.executedFixtures;
		this.onTestComplete.dispatch(h);
		this.onProgress.dispatch({ result : utest_TestResult.ofHandler(h), done : this.executedFixtures, totals : this.length});
	}
	,__class__: utest_Runner
};
var utest__$Runner_ITestRunner = function(runner) {
	this.runner = runner;
};
utest__$Runner_ITestRunner.__name__ = "utest._Runner.ITestRunner";
utest__$Runner_ITestRunner.prototype = {
	runner: null
	,cases: null
	,currentCase: null
	,currentCaseFixtures: null
	,teardownClass: null
	,setupAsync: null
	,teardownAsync: null
	,run: function() {
		this.cases = this.runner.iTestFixtures.keys();
		this.runCases();
	}
	,runCases: function() {
		while(this.cases.hasNext()) {
			this.currentCase = this.cases.next();
			var o = this.currentCase;
			var c = o == null ? null : js_Boot.getClass(o);
			utest_utils_Print.startCase(c.__name__);
			var data = this.runner.iTestFixtures.h[this.currentCase.__id__];
			this.currentCaseFixtures = data.fixtures;
			this.teardownClass = data.teardownClass;
			try {
				this.setupAsync = data.setupClass();
			} catch( e ) {
				haxe_CallStack.lastException = e;
				this.setupFailed(utest_Assertation.SetupError("setupClass failed: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e),haxe_CallStack.exceptionStack()));
				return;
			}
			if(this.setupAsync.resolved) {
				if(!this.runFixtures()) {
					return;
				}
			} else {
				this.setupAsync.then($bind(this,this.checkSetup));
				return;
			}
		}
		this.runner.runNext();
	}
	,checkSetup: function() {
		if(this.setupAsync.timedOut) {
			this.setupFailed(utest_Assertation.SetupError("setupClass timeout",[]));
		} else {
			this.runFixtures();
		}
	}
	,setupFailed: function(assertation) {
		this.runner.executedFixtures += this.currentCaseFixtures.length;
		this.runner.onProgress.dispatch({ totals : this.runner.length, result : utest_TestResult.ofFailedSetupClass(this.currentCase,assertation), done : this.runner.executedFixtures});
		this.runCases();
	}
	,runFixtures: function(finishedHandler) {
		while(this.currentCaseFixtures.length > 0) {
			var handler = this.runner.runFixture(this.currentCaseFixtures.pop());
			if(!handler.finished) {
				handler.onComplete.add($bind(this,this.runFixtures));
				return false;
			}
		}
		try {
			this.teardownAsync = this.teardownClass();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.teardownFailed(utest_Assertation.TeardownError("teardownClass failed: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e),haxe_CallStack.exceptionStack()));
			return true;
		}
		if(this.teardownAsync.resolved && finishedHandler == null) {
			return true;
		}
		this.teardownAsync.then($bind(this,this.checkTeardown));
		return false;
	}
	,checkTeardown: function() {
		if(this.teardownAsync.timedOut) {
			this.teardownFailed(utest_Assertation.TeardownError("teardownClass timeout",[]));
		}
		this.runCases();
	}
	,teardownFailed: function(assertation) {
		this.runner.onProgress.dispatch({ totals : this.runner.length, result : utest_TestResult.ofFailedTeardownClass(this.currentCase,assertation), done : this.runner.executedFixtures});
	}
	,__class__: utest__$Runner_ITestRunner
};
var utest_AccessoryName = function() { };
utest_AccessoryName.__name__ = "utest.AccessoryName";
var utest_TestFixture = function(target,method,setup,teardown,setupAsync,teardownAsync) {
	this.isITest = false;
	this.target = target;
	this.method = method;
	this.setup = setup;
	this.setupAsync = setupAsync;
	this.teardown = teardown;
	this.teardownAsync = teardownAsync;
	this.ignoringInfo = this.getIgnored();
};
utest_TestFixture.__name__ = "utest.TestFixture";
utest_TestFixture.ofData = function(target,test,accessories) {
	var fixture = new utest_TestFixture(target,test.name);
	fixture.isITest = true;
	fixture.test = test;
	fixture.setupMethod = utest_utils_AccessoriesUtils.getSetup(accessories);
	fixture.teardownMethod = utest_utils_AccessoriesUtils.getTeardown(accessories);
	return fixture;
};
utest_TestFixture.prototype = {
	target: null
	,method: null
	,setup: null
	,setupAsync: null
	,teardown: null
	,teardownAsync: null
	,ignoringInfo: null
	,isITest: null
	,test: null
	,setupMethod: null
	,teardownMethod: null
	,checkMethod: function(name,arg) {
		var field = Reflect.field(this.target,name);
		if(field == null) {
			throw new js__$Boot_HaxeError(arg + " function " + name + " is not a field of target");
		}
		if(!Reflect.isFunction(field)) {
			throw new js__$Boot_HaxeError(arg + " function " + name + " is not a function");
		}
	}
	,getIgnored: function() {
		var o = this.target;
		var metas = haxe_rtti_Meta.getFields(o == null ? null : js_Boot.getClass(o));
		var metasForTestMetas = Reflect.getProperty(metas,this.method);
		if(metasForTestMetas == null || !Object.prototype.hasOwnProperty.call(metasForTestMetas,"Ignored")) {
			return utest__$IgnoredFixture_IgnoredFixture_$Impl_$.NotIgnored();
		}
		var ignoredArgs = Reflect.getProperty(metasForTestMetas,"Ignored");
		if(ignoredArgs == null || ignoredArgs.length == 0 || ignoredArgs[0] == null) {
			return utest__$IgnoredFixture_IgnoredFixture_$Impl_$.Ignored();
		}
		var ignoredReason = Std.string(ignoredArgs[0]);
		return utest__$IgnoredFixture_IgnoredFixture_$Impl_$.Ignored(ignoredReason);
	}
	,__class__: utest_TestFixture
};
var utest_TestResult = function() {
};
utest_TestResult.__name__ = "utest.TestResult";
utest_TestResult.ofHandler = function(handler) {
	var r = new utest_TestResult();
	var o = handler.fixture.target;
	var c = o == null ? null : js_Boot.getClass(o);
	var path = c.__name__.split(".");
	r.cls = path.pop();
	r.pack = path.join(".");
	r.method = handler.fixture.method;
	r.setup = handler.fixture.setup;
	r.setupAsync = handler.fixture.setupAsync;
	r.teardown = handler.fixture.teardown;
	r.teardownAsync = handler.fixture.teardownAsync;
	r.assertations = handler.results;
	return r;
};
utest_TestResult.ofFailedSetupClass = function(testCase,assertation) {
	var r = new utest_TestResult();
	var c = testCase == null ? null : js_Boot.getClass(testCase);
	var path = c.__name__.split(".");
	r.cls = path.pop();
	r.pack = path.join(".");
	r.method = "setup";
	r.assertations = new haxe_ds_List();
	r.assertations.add(assertation);
	return r;
};
utest_TestResult.ofFailedTeardownClass = function(testCase,assertation) {
	var r = new utest_TestResult();
	var c = testCase == null ? null : js_Boot.getClass(testCase);
	var path = c.__name__.split(".");
	r.cls = path.pop();
	r.pack = path.join(".");
	r.method = "setup";
	r.assertations = new haxe_ds_List();
	r.assertations.add(assertation);
	return r;
};
utest_TestResult.prototype = {
	pack: null
	,cls: null
	,method: null
	,setup: null
	,setupAsync: null
	,teardown: null
	,teardownAsync: null
	,assertations: null
	,allOk: function() {
		var _g_head = this.assertations.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var l = val;
			if(l._hx_index == 0) {
				var _g = l.pos;
				break;
			} else {
				return false;
			}
		}
		return true;
	}
	,__class__: utest_TestResult
};
var utest_ui_Report = function() { };
utest_ui_Report.__name__ = "utest.ui.Report";
utest_ui_Report.create = function(runner,displaySuccessResults,headerDisplayMode) {
	var report = new utest_ui_text_PrintReport(runner);
	if(null == displaySuccessResults) {
		report.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.ShowSuccessResultsWithNoErrors;
	} else {
		report.displaySuccessResults = displaySuccessResults;
	}
	if(null == headerDisplayMode) {
		report.displayHeader = utest_ui_common_HeaderDisplayMode.ShowHeaderWithResults;
	} else {
		report.displayHeader = headerDisplayMode;
	}
	return report;
};
var utest_ui_common_ClassResult = function(className,setupName,teardownName) {
	this.fixtures = new haxe_ds_StringMap();
	this.className = className;
	this.setupName = setupName;
	this.hasSetup = setupName != null;
	this.teardownName = teardownName;
	this.hasTeardown = teardownName != null;
	this.methods = 0;
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_ClassResult.__name__ = "utest.ui.common.ClassResult";
utest_ui_common_ClassResult.prototype = {
	fixtures: null
	,className: null
	,setupName: null
	,teardownName: null
	,hasSetup: null
	,hasTeardown: null
	,methods: null
	,stats: null
	,add: function(result) {
		var key = result.methodName;
		var _this = this.fixtures;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			throw new js__$Boot_HaxeError("invalid duplicated fixture: " + this.className + "." + result.methodName);
		}
		this.stats.wire(result.stats);
		this.methods++;
		var key1 = result.methodName;
		var _this1 = this.fixtures;
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,result);
		} else {
			_this1.h[key1] = result;
		}
	}
	,get: function(method) {
		var _this = this.fixtures;
		if(__map_reserved[method] != null) {
			return _this.getReserved(method);
		} else {
			return _this.h[method];
		}
	}
	,exists: function(method) {
		var _this = this.fixtures;
		if(__map_reserved[method] != null) {
			return _this.existsReserved(method);
		} else {
			return _this.h.hasOwnProperty(method);
		}
	}
	,methodNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		var name = this.fixtures.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			names.push(name1);
		}
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.get(a).stats;
				var bs = me.get(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a1,b1) {
				return Reflect.compare(a1,b1);
			});
		}
		return names;
	}
	,__class__: utest_ui_common_ClassResult
};
var utest_ui_common_FixtureResult = function(methodName) {
	this.methodName = methodName;
	this.list = new haxe_ds_List();
	this.hasTestError = false;
	this.hasSetupError = false;
	this.hasTeardownError = false;
	this.hasTimeoutError = false;
	this.hasAsyncError = false;
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_FixtureResult.__name__ = "utest.ui.common.FixtureResult";
utest_ui_common_FixtureResult.prototype = {
	methodName: null
	,hasTestError: null
	,hasSetupError: null
	,hasTeardownError: null
	,hasTimeoutError: null
	,hasAsyncError: null
	,stats: null
	,list: null
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.list.h);
	}
	,add: function(assertation) {
		this.list.add(assertation);
		switch(assertation._hx_index) {
		case 0:
			var _g9 = assertation.pos;
			this.stats.addSuccesses(1);
			break;
		case 1:
			var _g3 = assertation.pos;
			var _g2 = assertation.msg;
			this.stats.addFailures(1);
			break;
		case 2:
			var _g8 = assertation.stack;
			var _g7 = assertation.e;
			this.stats.addErrors(1);
			break;
		case 3:
			var _g14 = assertation.stack;
			var _g13 = assertation.e;
			this.stats.addErrors(1);
			this.hasSetupError = true;
			break;
		case 4:
			var _g5 = assertation.stack;
			var _g4 = assertation.e;
			this.stats.addErrors(1);
			this.hasTeardownError = true;
			break;
		case 5:
			var _g1 = assertation.stack;
			var _g = assertation.missedAsyncs;
			this.stats.addErrors(1);
			this.hasTimeoutError = true;
			break;
		case 6:
			var _g12 = assertation.stack;
			var _g11 = assertation.e;
			this.stats.addErrors(1);
			this.hasAsyncError = true;
			break;
		case 7:
			var _g10 = assertation.msg;
			this.stats.addWarnings(1);
			break;
		case 8:
			var _g6 = assertation.reason;
			this.stats.addIgnores(1);
			break;
		}
	}
	,__class__: utest_ui_common_FixtureResult
};
var utest_ui_common_HeaderDisplayMode = $hxEnums["utest.ui.common.HeaderDisplayMode"] = { __ename__ : "utest.ui.common.HeaderDisplayMode", __constructs__ : ["AlwaysShowHeader","NeverShowHeader","ShowHeaderWithResults"]
	,AlwaysShowHeader: {_hx_index:0,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
	,NeverShowHeader: {_hx_index:1,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
	,ShowHeaderWithResults: {_hx_index:2,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
};
var utest_ui_common_SuccessResultsDisplayMode = $hxEnums["utest.ui.common.SuccessResultsDisplayMode"] = { __ename__ : "utest.ui.common.SuccessResultsDisplayMode", __constructs__ : ["AlwaysShowSuccessResults","NeverShowSuccessResults","ShowSuccessResultsWithNoErrors"]
	,AlwaysShowSuccessResults: {_hx_index:0,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
	,NeverShowSuccessResults: {_hx_index:1,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
	,ShowSuccessResultsWithNoErrors: {_hx_index:2,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
};
var utest_ui_common_IReport = function() { };
utest_ui_common_IReport.__name__ = "utest.ui.common.IReport";
utest_ui_common_IReport.prototype = {
	displaySuccessResults: null
	,displayHeader: null
	,setHandler: null
	,__class__: utest_ui_common_IReport
};
var utest_ui_common_PackageResult = function(packageName) {
	this.isEmpty = true;
	this.packageName = packageName;
	this.classes = new haxe_ds_StringMap();
	this.packages = new haxe_ds_StringMap();
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_PackageResult.__name__ = "utest.ui.common.PackageResult";
utest_ui_common_PackageResult.prototype = {
	packageName: null
	,isEmpty: null
	,classes: null
	,packages: null
	,stats: null
	,addResult: function(result,flattenPackage) {
		this.isEmpty = false;
		var pack = this.getOrCreatePackage(result.pack,flattenPackage,this);
		var cls = this.getOrCreateClass(pack,result.cls,result.setup,result.teardown);
		var fix = this.createFixture(result.method,result.assertations);
		cls.add(fix);
	}
	,addClass: function(result) {
		this.isEmpty = false;
		var key = result.className;
		var _this = this.classes;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,result);
		} else {
			_this.h[key] = result;
		}
		this.stats.wire(result.stats);
	}
	,addPackage: function(result) {
		this.isEmpty = false;
		var key = result.packageName;
		var _this = this.packages;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,result);
		} else {
			_this.h[key] = result;
		}
		this.stats.wire(result.stats);
	}
	,existsPackage: function(name) {
		var _this = this.packages;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,existsClass: function(name) {
		var _this = this.classes;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,getPackage: function(name) {
		if(this.packageName == null && name == "") {
			return this;
		}
		var _this = this.packages;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getClass: function(name) {
		var _this = this.classes;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,classNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		var name = this.classes.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			names.push(name1);
		}
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.getClass(a).stats;
				var bs = me.getClass(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a1,b1) {
				return Reflect.compare(a1,b1);
			});
		}
		return names;
	}
	,packageNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		if(this.packageName == null) {
			names.push("");
		}
		var name = this.packages.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			names.push(name1);
		}
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.getPackage(a).stats;
				var bs = me.getPackage(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a1,b1) {
				return Reflect.compare(a1,b1);
			});
		}
		return names;
	}
	,createFixture: function(method,assertations) {
		var f = new utest_ui_common_FixtureResult(method);
		var assertation = $getIterator(assertations);
		while(assertation.hasNext()) {
			var assertation1 = assertation.next();
			f.add(assertation1);
		}
		return f;
	}
	,getOrCreateClass: function(pack,cls,setup,teardown) {
		if(pack.existsClass(cls)) {
			return pack.getClass(cls);
		}
		var c = new utest_ui_common_ClassResult(cls,setup,teardown);
		pack.addClass(c);
		return c;
	}
	,getOrCreatePackage: function(pack,flat,ref) {
		if(pack == null || pack == "") {
			return ref;
		}
		if(flat) {
			if(ref.existsPackage(pack)) {
				return ref.getPackage(pack);
			}
			var p = new utest_ui_common_PackageResult(pack);
			ref.addPackage(p);
			return p;
		} else {
			var parts = pack.split(".");
			var _g = 0;
			while(_g < parts.length) {
				var part = parts[_g];
				++_g;
				ref = this.getOrCreatePackage(part,true,ref);
			}
			return ref;
		}
	}
	,__class__: utest_ui_common_PackageResult
};
var utest_ui_common_ReportTools = function() { };
utest_ui_common_ReportTools.__name__ = "utest.ui.common.ReportTools";
utest_ui_common_ReportTools.hasHeader = function(report,stats) {
	switch(report.displayHeader._hx_index) {
	case 0:
		return true;
	case 1:
		return false;
	case 2:
		if(!stats.isOk) {
			return true;
		}
		switch(report.displaySuccessResults._hx_index) {
		case 1:
			return false;
		case 0:case 2:
			return true;
		}
		break;
	}
};
utest_ui_common_ReportTools.skipResult = function(report,stats,isOk) {
	if(!stats.isOk) {
		return false;
	}
	switch(report.displaySuccessResults._hx_index) {
	case 0:
		return false;
	case 1:
		return true;
	case 2:
		return !isOk;
	}
};
utest_ui_common_ReportTools.hasOutput = function(report,stats) {
	if(!stats.isOk) {
		return true;
	}
	return utest_ui_common_ReportTools.hasHeader(report,stats);
};
var utest_ui_common_ResultAggregator = function(runner,flattenPackage) {
	if(flattenPackage == null) {
		flattenPackage = false;
	}
	if(runner == null) {
		throw new js__$Boot_HaxeError("runner argument is null");
	}
	this.flattenPackage = flattenPackage;
	this.runner = runner;
	runner.onStart.add($bind(this,this.start));
	runner.onProgress.add($bind(this,this.progress));
	runner.onComplete.add($bind(this,this.complete));
	this.onStart = new utest_Notifier();
	this.onComplete = new utest_Dispatcher();
	this.onProgress = new utest_Dispatcher();
};
utest_ui_common_ResultAggregator.__name__ = "utest.ui.common.ResultAggregator";
utest_ui_common_ResultAggregator.prototype = {
	runner: null
	,flattenPackage: null
	,root: null
	,onStart: null
	,onComplete: null
	,onProgress: null
	,start: function(runner) {
		this.checkNonITest();
		this.root = new utest_ui_common_PackageResult(null);
		this.onStart.dispatch();
	}
	,checkNonITest: function() {
		var first = null;
		var total = 0;
		var _g = 0;
		var _g1 = this.runner.length;
		while(_g < _g1) {
			var i = _g++;
			var fixture = this.runner.getFixture(i);
			if(!fixture.isITest) {
				++total;
				if(first == null) {
					var o = fixture.target;
					var c = o == null ? null : js_Boot.getClass(o);
					first = c.__name__;
				}
			}
		}
		if(total > 0) {
			var baseMsg = "implement utest.ITest. Non-ITest tests are deprecated. Implement utest.ITest or extend utest.Test.";
			var msg;
			switch(total) {
			case 1:
				msg = "" + first + " doesn't " + baseMsg;
				break;
			case 2:
				msg = "" + first + " and 1 other don't " + baseMsg;
				break;
			default:
				msg = "" + first + " and " + total + " others don't " + baseMsg;
			}
			haxe_Log.trace(msg,{ fileName : "utest/ui/common/ResultAggregator.hx", lineNumber : 54, className : "utest.ui.common.ResultAggregator", methodName : "checkNonITest"});
		}
	}
	,getOrCreatePackage: function(pack,flat,ref) {
		if(ref == null) {
			ref = this.root;
		}
		if(pack == null || pack == "") {
			return ref;
		}
		if(flat) {
			if(ref.existsPackage(pack)) {
				return ref.getPackage(pack);
			}
			var p = new utest_ui_common_PackageResult(pack);
			ref.addPackage(p);
			return p;
		} else {
			var parts = pack.split(".");
			var _g = 0;
			while(_g < parts.length) {
				var part = parts[_g];
				++_g;
				ref = this.getOrCreatePackage(part,true,ref);
			}
			return ref;
		}
	}
	,getOrCreateClass: function(pack,cls,setup,teardown) {
		if(pack.existsClass(cls)) {
			return pack.getClass(cls);
		}
		var c = new utest_ui_common_ClassResult(cls,setup,teardown);
		pack.addClass(c);
		return c;
	}
	,createFixture: function(result) {
		var f = new utest_ui_common_FixtureResult(result.method);
		var _g_head = result.assertations.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var assertation = val;
			f.add(assertation);
		}
		return f;
	}
	,progress: function(e) {
		this.root.addResult(e.result,this.flattenPackage);
		this.onProgress.dispatch(e);
	}
	,complete: function(runner) {
		if(this.root.isEmpty) {
			this.root.addResult(this.createNoTestsResult(),false);
		}
		this.onComplete.dispatch(this.root);
	}
	,createNoTestsResult: function() {
		var result = new utest_TestResult();
		result.pack = "";
		result.cls = "";
		result.method = "";
		result.assertations = new haxe_ds_List();
		var pos = { fileName : "", lineNumber : 1, className : "utest.Runner", methodName : "run"};
		result.assertations.add(utest_Assertation.Failure("No tests executed.",pos));
		return result;
	}
	,__class__: utest_ui_common_ResultAggregator
};
var utest_ui_common_ResultStats = function() {
	this.assertations = 0;
	this.successes = 0;
	this.failures = 0;
	this.errors = 0;
	this.warnings = 0;
	this.ignores = 0;
	this.isOk = true;
	this.hasFailures = false;
	this.hasErrors = false;
	this.hasWarnings = false;
	this.hasIgnores = false;
	this.onAddSuccesses = new utest_Dispatcher();
	this.onAddFailures = new utest_Dispatcher();
	this.onAddErrors = new utest_Dispatcher();
	this.onAddWarnings = new utest_Dispatcher();
	this.onAddIgnores = new utest_Dispatcher();
};
utest_ui_common_ResultStats.__name__ = "utest.ui.common.ResultStats";
utest_ui_common_ResultStats.prototype = {
	assertations: null
	,successes: null
	,failures: null
	,errors: null
	,warnings: null
	,ignores: null
	,onAddSuccesses: null
	,onAddFailures: null
	,onAddErrors: null
	,onAddWarnings: null
	,onAddIgnores: null
	,isOk: null
	,hasFailures: null
	,hasErrors: null
	,hasWarnings: null
	,hasIgnores: null
	,addSuccesses: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.successes += v;
		this.onAddSuccesses.dispatch(v);
	}
	,addFailures: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.failures += v;
		this.hasFailures = this.failures > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddFailures.dispatch(v);
	}
	,addErrors: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.errors += v;
		this.hasErrors = this.errors > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddErrors.dispatch(v);
	}
	,addIgnores: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.ignores += v;
		this.hasIgnores = this.ignores > 0;
		this.onAddIgnores.dispatch(v);
	}
	,addWarnings: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.warnings += v;
		this.hasWarnings = this.warnings > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddWarnings.dispatch(v);
	}
	,sum: function(other) {
		this.addSuccesses(other.successes);
		this.addFailures(other.failures);
		this.addErrors(other.errors);
		this.addWarnings(other.warnings);
		this.addIgnores(other.ignores);
	}
	,subtract: function(other) {
		this.addSuccesses(-other.successes);
		this.addFailures(-other.failures);
		this.addErrors(-other.errors);
		this.addWarnings(-other.warnings);
		this.addIgnores(-other.ignores);
	}
	,wire: function(dependant) {
		dependant.onAddSuccesses.add($bind(this,this.addSuccesses));
		dependant.onAddFailures.add($bind(this,this.addFailures));
		dependant.onAddErrors.add($bind(this,this.addErrors));
		dependant.onAddWarnings.add($bind(this,this.addWarnings));
		dependant.onAddIgnores.add($bind(this,this.addIgnores));
		this.sum(dependant);
	}
	,unwire: function(dependant) {
		dependant.onAddSuccesses.remove($bind(this,this.addSuccesses));
		dependant.onAddFailures.remove($bind(this,this.addFailures));
		dependant.onAddErrors.remove($bind(this,this.addErrors));
		dependant.onAddWarnings.remove($bind(this,this.addWarnings));
		dependant.onAddIgnores.remove($bind(this,this.addIgnores));
		this.subtract(dependant);
	}
	,__class__: utest_ui_common_ResultStats
};
var utest_ui_text_PlainTextReport = function(runner,outputHandler) {
	this.aggregator = new utest_ui_common_ResultAggregator(runner,true);
	runner.onStart.add($bind(this,this.start));
	this.aggregator.onComplete.add($bind(this,this.complete));
	if(null != outputHandler) {
		this.setHandler(outputHandler);
	}
	this.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.AlwaysShowSuccessResults;
	this.displayHeader = utest_ui_common_HeaderDisplayMode.AlwaysShowHeader;
};
utest_ui_text_PlainTextReport.__name__ = "utest.ui.text.PlainTextReport";
utest_ui_text_PlainTextReport.__interfaces__ = [utest_ui_common_IReport];
utest_ui_text_PlainTextReport.prototype = {
	displaySuccessResults: null
	,displayHeader: null
	,handler: null
	,aggregator: null
	,newline: null
	,indent: null
	,setHandler: function(handler) {
		this.handler = handler;
	}
	,startTime: null
	,start: function(e) {
		this.startTime = this.getTime();
	}
	,getTime: function() {
		return Date.now() / 1000;
	}
	,indents: function(c) {
		var s = "";
		while(--c >= 0) s += this.indent;
		return s;
	}
	,dumpStack: function(stack) {
		if(stack.length == 0) {
			return "";
		}
		var parts = haxe_CallStack.toString(stack).split("\n");
		var r = [];
		var _g = 0;
		while(_g < parts.length) {
			var part = parts[_g];
			++_g;
			if(part.indexOf(" utest.") >= 0) {
				continue;
			}
			r.push(part);
		}
		return r.join(this.newline);
	}
	,addHeader: function(buf,result) {
		if(!utest_ui_common_ReportTools.hasHeader(this,result.stats)) {
			return;
		}
		var end = this.getTime();
		var time = ((end - this.startTime) * 1000 | 0) / 1000;
		buf.b += Std.string("\nassertations: " + result.stats.assertations + this.newline);
		buf.b += Std.string("successes: " + result.stats.successes + this.newline);
		buf.b += Std.string("errors: " + result.stats.errors + this.newline);
		buf.b += Std.string("failures: " + result.stats.failures + this.newline);
		buf.b += Std.string("warnings: " + result.stats.warnings + this.newline);
		buf.b += Std.string("execution time: " + time + this.newline);
		buf.b += Std.string(this.newline);
		buf.b += Std.string("results: " + (result.stats.isOk ? "ALL TESTS OK (success: true)" : "SOME TESTS FAILURES (success: false)"));
		buf.b += Std.string(this.newline);
	}
	,result: null
	,getResults: function() {
		var buf = new StringBuf();
		this.addHeader(buf,this.result);
		var _g = 0;
		var _g1 = this.result.packageNames();
		while(_g < _g1.length) {
			var pname = _g1[_g];
			++_g;
			var pack = this.result.getPackage(pname);
			if(utest_ui_common_ReportTools.skipResult(this,pack.stats,this.result.stats.isOk)) {
				continue;
			}
			var _g2 = 0;
			var _g11 = pack.classNames();
			while(_g2 < _g11.length) {
				var cname = _g11[_g2];
				++_g2;
				var cls = pack.getClass(cname);
				if(utest_ui_common_ReportTools.skipResult(this,cls.stats,this.result.stats.isOk)) {
					continue;
				}
				buf.b += Std.string((pname == "" ? "" : pname + ".") + cname + this.newline);
				var _g3 = 0;
				var _g12 = cls.methodNames();
				while(_g3 < _g12.length) {
					var mname = _g12[_g3];
					++_g3;
					var fix = cls.get(mname);
					if(utest_ui_common_ReportTools.skipResult(this,fix.stats,this.result.stats.isOk)) {
						continue;
					}
					var x = this.indents(1) + mname + ": ";
					buf.b += Std.string(x);
					if(fix.stats.isOk) {
						buf.b += "OK ";
					} else if(fix.stats.hasErrors) {
						buf.b += "ERROR ";
					} else if(fix.stats.hasFailures) {
						buf.b += "FAILURE ";
					} else if(fix.stats.hasWarnings) {
						buf.b += "WARNING ";
					}
					var messages = "";
					var _g4 = fix.iterator();
					while(_g4.head != null) {
						var val = _g4.head.item;
						_g4.head = _g4.head.next;
						var assertation = val;
						switch(assertation._hx_index) {
						case 0:
							var _g9 = assertation.pos;
							buf.b += ".";
							break;
						case 1:
							var pos = assertation.pos;
							var msg = assertation.msg;
							buf.b += "F";
							messages += this.indents(2) + "line: " + pos.lineNumber + ", " + msg + this.newline;
							break;
						case 2:
							var s = assertation.stack;
							var e = assertation.e;
							buf.b += "E";
							messages += this.indents(2) + Std.string(e) + this.dumpStack(s) + this.newline;
							break;
						case 3:
							var s1 = assertation.stack;
							var e1 = assertation.e;
							buf.b += "S";
							messages += this.indents(2) + Std.string(e1) + this.dumpStack(s1) + this.newline;
							break;
						case 4:
							var s2 = assertation.stack;
							var e2 = assertation.e;
							buf.b += "T";
							messages += this.indents(2) + Std.string(e2) + this.dumpStack(s2) + this.newline;
							break;
						case 5:
							var s3 = assertation.stack;
							var missedAsyncs = assertation.missedAsyncs;
							buf.b += "O";
							messages += this.indents(2) + "missed async calls: " + missedAsyncs + this.dumpStack(s3) + this.newline;
							break;
						case 6:
							var s4 = assertation.stack;
							var e3 = assertation.e;
							buf.b += "A";
							messages += this.indents(2) + Std.string(e3) + this.dumpStack(s4) + this.newline;
							break;
						case 7:
							var msg1 = assertation.msg;
							buf.b += "W";
							messages += this.indents(2) + msg1 + this.newline;
							break;
						case 8:
							var reason = assertation.reason;
							buf.b += "I";
							if(reason != null && reason != "") {
								messages += this.indents(2) + ("With reason: " + reason) + this.newline;
							}
							break;
						}
					}
					buf.b += Std.string(this.newline);
					buf.b += messages == null ? "null" : "" + messages;
				}
			}
		}
		return buf.b;
	}
	,complete: function(result) {
		this.result = result;
		if(this.handler != null) {
			this.handler(this);
		}
		if(typeof phantom != "undefined") {
			phantom.exit(result.stats.isOk ? 0 : 1);
		}
		if(typeof process != "undefined") {
			process.exit(result.stats.isOk ? 0 : 1);
		}
	}
	,__class__: utest_ui_text_PlainTextReport
};
var utest_ui_text_PrintReport = function(runner) {
	utest_ui_text_PlainTextReport.call(this,runner,$bind(this,this._handler));
	this.newline = "\n";
	this.indent = "  ";
};
utest_ui_text_PrintReport.__name__ = "utest.ui.text.PrintReport";
utest_ui_text_PrintReport.__super__ = utest_ui_text_PlainTextReport;
utest_ui_text_PrintReport.prototype = $extend(utest_ui_text_PlainTextReport.prototype,{
	_handler: function(report) {
		this._trace(report.getResults());
	}
	,_trace: function(s) {
		s = StringTools.replace(s,"  ",this.indent);
		s = StringTools.replace(s,"\n",this.newline);
		haxe_Log.trace(s,{ fileName : "utest/ui/text/PrintReport.hx", lineNumber : 52, className : "utest.ui.text.PrintReport", methodName : "_trace"});
	}
	,__class__: utest_ui_text_PrintReport
});
var utest_utils_AccessoriesUtils = function() { };
utest_utils_AccessoriesUtils.__name__ = "utest.utils.AccessoriesUtils";
utest_utils_AccessoriesUtils.getSetupClass = function(accessories) {
	if(accessories.setupClass == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.setupClass;
	}
};
utest_utils_AccessoriesUtils.getSetup = function(accessories) {
	if(accessories.setup == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.setup;
	}
};
utest_utils_AccessoriesUtils.getTeardown = function(accessories) {
	if(accessories.teardown == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.teardown;
	}
};
utest_utils_AccessoriesUtils.getTeardownClass = function(accessories) {
	if(accessories.teardownClass == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.teardownClass;
	}
};
var utest_utils_AsyncUtils = function() { };
utest_utils_AsyncUtils.__name__ = "utest.utils.AsyncUtils";
utest_utils_AsyncUtils.orResolved = function(_async) {
	if(_async == null) {
		return utest_Async.getResolved();
	} else {
		return _async;
	}
};
var utest_utils_Print = function() { };
utest_utils_Print.__name__ = "utest.utils.Print";
utest_utils_Print.immediately = function(msg) {
	console.log(msg);
};
utest_utils_Print.startCase = function(caseName) {
};
utest_utils_Print.startTest = function(name) {
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if(typeof $global.$haxeUID == "undefined") $global.$haxeUID = 0;
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
com_vige_utils__$Colors_Colors_$Impl_$.TRANSPARENT = 0;
com_vige_utils__$Colors_Colors_$Impl_$.BLACK = -16777216;
com_vige_utils__$Colors_Colors_$Impl_$.WHITE = -1;
com_vige_utils__$Colors_Colors_$Impl_$.RED = -65536;
com_vige_utils__$Colors_Colors_$Impl_$.GREEN = -16711936;
com_vige_utils__$Colors_Colors_$Impl_$.BLUE = -16776961;
com_vige_utils__$Colors_Colors_$Impl_$.CYAN = -16711681;
com_vige_utils__$Colors_Colors_$Impl_$.MAGENTA = -65281;
com_vige_utils__$Colors_Colors_$Impl_$.YELLOW = -256;
utest_TestHandler.POLLING_TIME = 10;
utest_AccessoryName.SETUP_NAME = "setup";
utest_AccessoryName.SETUP_CLASS_NAME = "setupClass";
utest_AccessoryName.TEARDOWN_NAME = "teardown";
utest_AccessoryName.TEARDOWN_CLASS_NAME = "teardownClass";
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
